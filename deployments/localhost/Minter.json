{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authority",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_kondux",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "UNAUTHORIZED",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kondux",
      "outputs": [
        {
          "internalType": "contract IKondux",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "root",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "setRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unsafeMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "whitelistMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xadcf7b745bf2e734d7a146564f1d7404bebe7752efc595403b1fe23c2c9959c5",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "495277",
    "logsBloom": "0x
    "blockHash": "0x7cb3441c8a0b1f7485ae914e32fbefa47d457b78fa780cbeff16d1b0ac004c55",
    "transactionHash": "0xadcf7b745bf2e734d7a146564f1d7404bebe7752efc595403b1fe23c2c9959c5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0xadcf7b745bf2e734d7a146564f1d7404bebe7752efc595403b1fe23c2c9959c5",
        "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad"
        ],
        "data": "0x0000000000000000000000005fbdb2315678afecb367f032d93f642f64180aa3",
        "logIndex": 0,
        "blockHash": "0x7cb3441c8a0b1f7485ae914e32fbefa47d457b78fa780cbeff16d1b0ac004c55"
      }
    ],
    "blockNumber": 3,
    "cumulativeGasUsed": "495277",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
  ],
  "numDeployments": 1,
  "solcInputHash": "3e401a24613fe9111107daba59c825be",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_kondux\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"UNAUTHORIZED\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kondux\",\"outputs\":[{\"internalType\":\"contract IKondux\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"setRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unsafeMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"whitelistMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Minter.sol\":\"Minter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa504ac17eb0298dcdf5733ce24021b4914f035b97f4400b92827341d3facb3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Minter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport \\\"./interfaces/IKondux.sol\\\";\\r\\nimport \\\"./types/AccessControlled.sol\\\";\\r\\n\\r\\ncontract Minter is AccessControlled {\\r\\n\\r\\n    uint256 public price;\\r\\n    bytes32 public root;\\r\\n\\r\\n    IKondux public immutable kondux;\\r\\n\\r\\n    constructor(address _authority, address _kondux) \\r\\n        AccessControlled(IAuthority(_authority)) {        \\r\\n            require(_kondux != address(0), \\\"Kondux address is not set\\\");\\r\\n            kondux = IKondux(_kondux);\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        _mint();\\r\\n    }\\r\\n\\r\\n    function unsafeMint() public returns (uint256) {\\r\\n        uint256 id = _unsafeMint();\\r\\n        return id;\\r\\n\\r\\n    }        \\r\\n\\r\\n    function setPrice(uint256 _price) public onlyGovernor {\\r\\n        price = _price;\\r\\n    }\\r\\n\\r\\n    function whitelistMint(bytes32[] calldata _merkleProof) public returns (uint256) {\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\\r\\n        require(MerkleProof.verify(_merkleProof, root, leaf), \\\"Incorrect proof\\\");\\r\\n        return _unsafeMint();\\r\\n    }\\r\\n\\r\\n    function setRoot(bytes32 _root) public onlyGovernor {\\r\\n        root = _root;\\r\\n    }\\r\\n\\r\\n    // ** INTERNAL FUNCTIONS **\\r\\n\\r\\n    function _mint() internal {\\r\\n        require(msg.value >= price, \\\"Not enought ether\\\");\\r\\n        kondux.automaticMint(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _unsafeMint() internal returns (uint256) {\\r\\n        uint256 id = kondux.automaticMint(msg.sender);\\r\\n        return id;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0xaaf901b3f25aa70bd82c082fc722795bbd7c5046f57bc5a72645def82d532466\",\"license\":\"MIT\"},\"contracts/interfaces/IAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\ninterface IAuthority {\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n\\r\\n    event GovernorPulled(address indexed from, address indexed to);\\r\\n    event GuardianPulled(address indexed from, address indexed to);\\r\\n    event PolicyPulled(address indexed from, address indexed to);\\r\\n    event VaultPulled(address indexed from, address indexed to);\\r\\n\\r\\n    /* ========== VIEW ========== */\\r\\n\\r\\n    function governor() external view returns (address);\\r\\n\\r\\n    function guardian() external view returns (address);\\r\\n\\r\\n    function policy() external view returns (address);\\r\\n\\r\\n    function vault() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x162ef81a6d172910d8817409df50dc7155f746bcd4173a9e6c844a24abd78fca\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IKondux.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ninterface IKondux {\\r\\n\\r\\n    function changeDenominator(uint96 _denominator) external returns (uint96);\\r\\n\\r\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\\r\\n\\r\\n    function setTokenRoyalty(uint256 tokenId,address receiver,uint96 feeNumerator) external;\\r\\n\\r\\n    function setBaseURI(string memory _newURI) external returns (string memory);\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    function safeMint(address to, uint256 dna) external;\\r\\n\\r\\n    function setDna(uint256 _tokenID, uint256 _dna) external;\\r\\n\\r\\n    function setMinter(address _minter) external;\\r\\n\\r\\n    function automaticMint(address to) external returns (uint256);\\r\\n\\r\\n}\",\"keccak256\":\"0x05835be7d4f15949379107606dce9d9b0d2c563eeda873ef018ca6eaa8535e19\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/types/AccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/IAuthority.sol\\\";\\r\\n\\r\\nerror UNAUTHORIZED();\\r\\nerror AUTHORITY_INITIALIZED();\\r\\n\\r\\n/// @dev Reasoning for this contract = modifiers literaly copy code\\r\\n/// instead of pointing towards the logic to execute. Over many\\r\\n/// functions this bloats contract size unnecessarily.\\r\\n/// imho modifiers are a meme.\\r\\nabstract contract AccessControlled {\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event AuthorityUpdated(IAuthority authority);\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    IAuthority public authority;\\r\\n\\r\\n    /* ========== Constructor ========== */\\r\\n\\r\\n    constructor(IAuthority _authority) {\\r\\n        authority = _authority;\\r\\n        emit AuthorityUpdated(_authority);\\r\\n    }\\r\\n\\r\\n    /* ========== \\\"MODIFIERS\\\" ========== */\\r\\n\\r\\n    modifier onlyGovernor {\\r\\n\\t_onlyGovernor();\\r\\n\\t_;\\r\\n    }\\r\\n\\r\\n    modifier onlyGuardian {\\r\\n\\t_onlyGuardian();\\r\\n\\t_;\\r\\n    }\\r\\n\\r\\n    modifier onlyPolicy {\\r\\n\\t_onlyPolicy();\\r\\n\\t_;\\r\\n    }\\r\\n\\r\\n    modifier onlyVault {\\r\\n\\t_onlyVault();\\r\\n\\t_;\\r\\n    }\\r\\n\\r\\n    /* ========== GOV ONLY ========== */\\r\\n\\r\\n    function initializeAuthority(IAuthority _newAuthority) internal {\\r\\n        if (authority != IAuthority(address(0))) revert AUTHORITY_INITIALIZED();\\r\\n        authority = _newAuthority;\\r\\n        emit AuthorityUpdated(_newAuthority);\\r\\n    }\\r\\n\\r\\n    function setAuthority(IAuthority _newAuthority) external {\\r\\n        _onlyGovernor();\\r\\n        authority = _newAuthority;\\r\\n        emit AuthorityUpdated(_newAuthority);\\r\\n    }\\r\\n\\r\\n    /* ========== INTERNAL CHECKS ========== */\\r\\n\\r\\n    function _onlyGovernor() internal view {\\r\\n        if (msg.sender != authority.governor()) revert UNAUTHORIZED();\\r\\n    }\\r\\n\\r\\n    function _onlyGuardian() internal view {\\r\\n        if (msg.sender != authority.guardian()) revert UNAUTHORIZED();\\r\\n    }\\r\\n\\r\\n    function _onlyPolicy() internal view {\\r\\n        if (msg.sender != authority.policy()) revert UNAUTHORIZED();\\r\\n    }\\r\\n\\r\\n    function _onlyVault() internal view {\\r\\n        if (msg.sender != authority.vault()) revert UNAUTHORIZED();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbe21d3fcdfb682f395f50ff9b6916912ab6a806c70f460e5c16ed30baeb7374a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516108e63803806108e683398101604081905261002f9161010b565b600080546001600160a01b0319166001600160a01b03841690811790915560405190815282907f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a1506001600160a01b0381166100dd5760405162461bcd60e51b815260206004820152601960248201527f4b6f6e6475782061646472657373206973206e6f742073657400000000000000604482015260640160405180910390fd5b6001600160a01b03166080525061013e565b80516001600160a01b038116811461010657600080fd5b919050565b6000806040838503121561011e57600080fd5b610127836100ef565b9150610135602084016100ef565b90509250929050565b6080516107806101666000396000818160f30152818161025a015261049001526107806000f3fe60806040526004361061009a5760003560e01c806391b7f5ed11610069578063bf7e214f1161004e578063bf7e214f14610198578063dab5f340146101b8578063ebf0c717146101d857600080fd5b806391b7f5ed14610162578063a035b1fe1461018257600080fd5b8063372f657c146100ae57806369434b71146100e15780637a9e5e4b1461012d57806388c91f121461014d57600080fd5b366100a9576100a76101ee565b005b600080fd5b3480156100ba57600080fd5b506100ce6100c9366004610637565b6102e1565b6040519081526020015b60405180910390f35b3480156100ed57600080fd5b506101157f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100d8565b34801561013957600080fd5b506100a76101483660046106c1565b6103b9565b34801561015957600080fd5b506100ce61042d565b34801561016e57600080fd5b506100a761017d3660046106e5565b61043e565b34801561018e57600080fd5b506100ce60015481565b3480156101a457600080fd5b50600054610115906001600160a01b031681565b3480156101c457600080fd5b506100a76101d33660046106e5565b61044b565b3480156101e457600080fd5b506100ce60025481565b6001543410156102455760405162461bcd60e51b815260206004820152601160248201527f4e6f7420656e6f7567687420657468657200000000000000000000000000000060448201526064015b60405180910390fd5b604051631bfc324f60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906337f8649e90602401602060405180830381600087803b1580156102a657600080fd5b505af11580156102ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102de91906106fe565b50565b6040516bffffffffffffffffffffffff193360601b166020820152600090819060340160405160208183030381529060405280519060200120905061035d848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506002549150849050610458565b6103a95760405162461bcd60e51b815260206004820152600f60248201527f496e636f72726563742070726f6f660000000000000000000000000000000000604482015260640161023c565b6103b161046e565b949350505050565b6103c161050c565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a150565b60008061043861046e565b92915050565b61044661050c565b600155565b61045361050c565b600255565b60008261046585846105c3565b14949350505050565b604051631bfc324f60e11b815233600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906337f8649e90602401602060405180830381600087803b1580156104d457600080fd5b505af11580156104e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043891906106fe565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561055857600080fd5b505afa15801561056c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105909190610717565b6001600160a01b0316336001600160a01b0316146105c15760405163075fd2b160e01b815260040160405180910390fd5b565b600081815b845181101561062f5760008582815181106105e5576105e5610734565b6020026020010151905080831161060b576000838152602082905260409020925061061c565b600081815260208490526040902092505b50806106278161074a565b9150506105c8565b509392505050565b6000806020838503121561064a57600080fd5b823567ffffffffffffffff8082111561066257600080fd5b818501915085601f83011261067657600080fd5b81358181111561068557600080fd5b8660208260051b850101111561069a57600080fd5b60209290920196919550909350505050565b6001600160a01b03811681146102de57600080fd5b6000602082840312156106d357600080fd5b81356106de816106ac565b9392505050565b6000602082840312156106f757600080fd5b5035919050565b60006020828403121561071057600080fd5b5051919050565b60006020828403121561072957600080fd5b81516106de816106ac565b634e487b7160e01b600052603260045260246000fd5b600060001982141561076c57634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000809000a",
  "deployedBytecode": "0x60806040526004361061009a5760003560e01c806391b7f5ed11610069578063bf7e214f1161004e578063bf7e214f14610198578063dab5f340146101b8578063ebf0c717146101d857600080fd5b806391b7f5ed14610162578063a035b1fe1461018257600080fd5b8063372f657c146100ae57806369434b71146100e15780637a9e5e4b1461012d57806388c91f121461014d57600080fd5b366100a9576100a76101ee565b005b600080fd5b3480156100ba57600080fd5b506100ce6100c9366004610637565b6102e1565b6040519081526020015b60405180910390f35b3480156100ed57600080fd5b506101157f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100d8565b34801561013957600080fd5b506100a76101483660046106c1565b6103b9565b34801561015957600080fd5b506100ce61042d565b34801561016e57600080fd5b506100a761017d3660046106e5565b61043e565b34801561018e57600080fd5b506100ce60015481565b3480156101a457600080fd5b50600054610115906001600160a01b031681565b3480156101c457600080fd5b506100a76101d33660046106e5565b61044b565b3480156101e457600080fd5b506100ce60025481565b6001543410156102455760405162461bcd60e51b815260206004820152601160248201527f4e6f7420656e6f7567687420657468657200000000000000000000000000000060448201526064015b60405180910390fd5b604051631bfc324f60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906337f8649e90602401602060405180830381600087803b1580156102a657600080fd5b505af11580156102ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102de91906106fe565b50565b6040516bffffffffffffffffffffffff193360601b166020820152600090819060340160405160208183030381529060405280519060200120905061035d848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506002549150849050610458565b6103a95760405162461bcd60e51b815260206004820152600f60248201527f496e636f72726563742070726f6f660000000000000000000000000000000000604482015260640161023c565b6103b161046e565b949350505050565b6103c161050c565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a150565b60008061043861046e565b92915050565b61044661050c565b600155565b61045361050c565b600255565b60008261046585846105c3565b14949350505050565b604051631bfc324f60e11b815233600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906337f8649e90602401602060405180830381600087803b1580156104d457600080fd5b505af11580156104e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043891906106fe565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561055857600080fd5b505afa15801561056c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105909190610717565b6001600160a01b0316336001600160a01b0316146105c15760405163075fd2b160e01b815260040160405180910390fd5b565b600081815b845181101561062f5760008582815181106105e5576105e5610734565b6020026020010151905080831161060b576000838152602082905260409020925061061c565b600081815260208490526040902092505b50806106278161074a565b9150506105c8565b509392505050565b6000806020838503121561064a57600080fd5b823567ffffffffffffffff8082111561066257600080fd5b818501915085601f83011261067657600080fd5b81358181111561068557600080fd5b8660208260051b850101111561069a57600080fd5b60209290920196919550909350505050565b6001600160a01b03811681146102de57600080fd5b6000602082840312156106d357600080fd5b81356106de816106ac565b9392505050565b6000602082840312156106f757600080fd5b5035919050565b60006020828403121561071057600080fd5b5051919050565b60006020828403121561072957600080fd5b81516106de816106ac565b634e487b7160e01b600052603260045260246000fd5b600060001982141561076c57634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000809000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6546,
        "contract": "contracts/Minter.sol:Minter",
        "label": "authority",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAuthority)6164"
      },
      {
        "astId": 5723,
        "contract": "contracts/Minter.sol:Minter",
        "label": "price",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5725,
        "contract": "contracts/Minter.sol:Minter",
        "label": "root",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAuthority)6164": {
        "encoding": "inplace",
        "label": "contract IAuthority",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}