{
  "address": "0x107EAe6d788068b2B7891f9F0aBa10BB1201Fa8a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authority",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_konduxERC20",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_konduxERC721Founders",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_konduxERC721kNFT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_helixERC20",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Compound",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawAll",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "calculateRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compoundFreq",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "compoundRewardsTimer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_timer",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_timelock",
          "type": "uint8"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "foundersRewardBoost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "foundersRewardBoostDivisor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getDepositIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "getDepositInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_stake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFoundersRewardBoost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_foundersRewardBoost",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFoundersRewardBoostDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_foundersRewardBoostDivisor",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getKnftRewardBoostDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_kNFTRewardBoostDivisor",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_minStake",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardsPerHour",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_rewardsPerHour",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "getStakedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_deposited",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "getTimeOfLastUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_timeOfLastUpdate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "getTimelock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_timelock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "getTimelockCategory",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "_timelockCategory",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWithdrawalFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawalFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWithdrawalFeeDivisor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawalFeeDivisor",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getkNFTRewardBoost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_kNFTRewardBoost",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "helixERC20",
      "outputs": [
        {
          "internalType": "contract IHelix",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kNFTRewardBoost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kNFTRewardBoostDivisor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "konduxERC20",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "konduxERC721Founders",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "konduxERC721kNFT",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsPerHour",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_compoundFreq",
          "type": "uint256"
        }
      ],
      "name": "setCompFreq",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_foundersRewardBoost",
          "type": "uint256"
        }
      ],
      "name": "setFoundersRewardBoost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_foundersRewardBoostDivisor",
          "type": "uint256"
        }
      ],
      "name": "setFoundersRewardBoostDivisor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_helix",
          "type": "address"
        }
      ],
      "name": "setHelixERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_konduxERC20",
          "type": "address"
        }
      ],
      "name": "setKonduxERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_konduxERC721Founders",
          "type": "address"
        }
      ],
      "name": "setKonduxERC721Founders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_konduxERC721kNFT",
          "type": "address"
        }
      ],
      "name": "setKonduxERC721kNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minStake",
          "type": "uint256"
        }
      ],
      "name": "setMinStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardsPerHour",
          "type": "uint256"
        }
      ],
      "name": "setRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawalFee",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawalFeeDivisor",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalFeeDivisor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_kNFTRewardBoost",
          "type": "uint256"
        }
      ],
      "name": "setkNFTRewardBoost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_kNFTRewardBoostDivisor",
          "type": "uint256"
        }
      ],
      "name": "setkNFTRewardBoostDivisor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "stakeRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "contract ITreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userDeposits",
      "outputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deposited",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redeemed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeOfLastUpdate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastDepositTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unclaimedRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timelock",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "timelockCategory",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userDepositsIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalFeeDivisor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfd29451a548a496b04677ce8c4d7dd14feac22f30df24486faad4fba23bbd712",
  "receipt": {
    "to": null,
    "from": "0x9f5Ea5Af0368E1d6F685F07978c8A22b2Df7c78D",
    "contractAddress": "0x107EAe6d788068b2B7891f9F0aBa10BB1201Fa8a",
    "transactionIndex": 54,
    "gasUsed": "2959059",
    "logsBloom": "0x
    "blockHash": "0xd80cbc70fa5fe26c6f24d1b4f675dcc551749ebaddb91933fb410fb2df125964",
    "transactionHash": "0xfd29451a548a496b04677ce8c4d7dd14feac22f30df24486faad4fba23bbd712",
    "logs": [
      {
        "transactionIndex": 54,
        "blockNumber": 8412718,
        "transactionHash": "0xfd29451a548a496b04677ce8c4d7dd14feac22f30df24486faad4fba23bbd712",
        "address": "0x107EAe6d788068b2B7891f9F0aBa10BB1201Fa8a",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad"
        ],
        "data": "0x000000000000000000000000348e88f388417cb86ce2359b4108692ce43c6d85",
        "logIndex": 370,
        "blockHash": "0xd80cbc70fa5fe26c6f24d1b4f675dcc551749ebaddb91933fb410fb2df125964"
      }
    ],
    "blockNumber": 8412718,
    "cumulativeGasUsed": "12018964",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x348e88f388417Cb86cE2359b4108692ce43c6D85",
    "0xD1d5764b1ab25B2c765B29e5E6be03ec6784083e",
    "0xefFDa63B1AF6B4033606368B7F3aA13E5BC91C26",
    "0x6f70323F3701B911deBa98f5F2Cd5e082C2D6F6b",
    "0xc7BE5BcD6Cb06EE8b5cE1fbA2BfDF25E3134CaCb",
    "0x15F7EF03af6cc050f256d2D250d1b7e37A2D0431"
  ],
  "numDeployments": 9,
  "solcInputHash": "688bd6c73888165ffab23adf1b60563a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_konduxERC20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_konduxERC721Founders\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_konduxERC721kNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_helixERC20\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Compound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAll\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundFreq\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"compoundRewardsTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_timer\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_timelock\",\"type\":\"uint8\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundersRewardBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundersRewardBoostDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getDepositIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"getDepositInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFoundersRewardBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_foundersRewardBoost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFoundersRewardBoostDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_foundersRewardBoostDivisor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKnftRewardBoostDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_kNFTRewardBoostDivisor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsPerHour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsPerHour\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"getStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_deposited\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"getTimeOfLastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeOfLastUpdate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"getTimelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_timelock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"getTimelockCategory\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"_timelockCategory\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawalFeeDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalFeeDivisor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getkNFTRewardBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_kNFTRewardBoost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"helixERC20\",\"outputs\":[{\"internalType\":\"contract IHelix\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kNFTRewardBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kNFTRewardBoostDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"konduxERC20\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"konduxERC721Founders\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"konduxERC721kNFT\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPerHour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_compoundFreq\",\"type\":\"uint256\"}],\"name\":\"setCompFreq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_foundersRewardBoost\",\"type\":\"uint256\"}],\"name\":\"setFoundersRewardBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_foundersRewardBoostDivisor\",\"type\":\"uint256\"}],\"name\":\"setFoundersRewardBoostDivisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_helix\",\"type\":\"address\"}],\"name\":\"setHelixERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_konduxERC20\",\"type\":\"address\"}],\"name\":\"setKonduxERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_konduxERC721Founders\",\"type\":\"address\"}],\"name\":\"setKonduxERC721Founders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_konduxERC721kNFT\",\"type\":\"address\"}],\"name\":\"setKonduxERC721kNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"}],\"name\":\"setMinStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsPerHour\",\"type\":\"uint256\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalFeeDivisor\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFeeDivisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_kNFTRewardBoost\",\"type\":\"uint256\"}],\"name\":\"setkNFTRewardBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_kNFTRewardBoostDivisor\",\"type\":\"uint256\"}],\"name\":\"setkNFTRewardBoostDivisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"stakeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userDeposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeOfLastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unclaimedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"timelockCategory\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userDepositsIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFeeDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"./interfaces/ITreasury.sol\\\";\\r\\nimport \\\"./interfaces/IHelix.sol\\\";\\r\\nimport \\\"./types/AccessControlled.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract Staking is AccessControlled {\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    Counters.Counter private _depositIds;\\r\\n\\r\\n    // Staker info\\r\\n    struct Staker {\\r\\n        address staker;\\r\\n        // The deposited tokens of the Staker\\r\\n        uint256 deposited;\\r\\n        uint256 redeemed;\\r\\n        // Last time of details update for Deposit\\r\\n        uint256 timeOfLastUpdate;\\r\\n        // Last deposit time\\r\\n        uint256 lastDepositTime;\\r\\n        // Calculated, but unclaimed rewards. These are calculated each time\\r\\n        // a user writes to the contract.\\r\\n        uint256 unclaimedRewards;\\r\\n        uint256 timelock;\\r\\n        uint8 timelockCategory;\\r\\n    }\\r\\n\\r\\n    enum LockingTimes {        \\r\\n        OneMonth,\\r\\n        ThreeMonths,\\r\\n        SixMonths,\\r\\n        OneYear,\\r\\n        Test\\r\\n    }\\r\\n\\r\\n    // Withdrawal fee in basis points\\r\\n    uint256 public withdrawalFee = 100_000; // 1% fee on withdrawal or 100_000/10_000_000\\r\\n    uint256 public withdrawalFeeDivisor = 10_000_000; // 10_000_000 basis points\\r\\n\\r\\n    // Founder's reward boost in basis points\\r\\n    uint256 public foundersRewardBoost = 11_000_000; // 10% boost (=110%) on rewards or 1_000_000/10_000_000\\r\\n    uint256 public foundersRewardBoostDivisor = 10_000_000; // 10_000_000 basis points\\r\\n\\r\\n    // kNFT reward boost in basis points\\r\\n    uint256 public kNFTRewardBoost = 100_000; // 1% boost on rewards or 100_000/10_000_000\\r\\n    uint256 public kNFTRewardBoostDivisor = 10_000_000; // 10_000_000 basis points\\r\\n\\r\\n    // Rewards per hour. A fraction calculated as x/10.000.000 to get the percentage\\r\\n    // https://www.buybitcoinbank.com/crypto-apy-staking-calculator\\r\\n    uint256 public rewardsPerHour = 285; // 0.00285%/h or 25% APR\\r\\n\\r\\n    // Minimum amount to stake\\r\\n    uint256 public minStake = 10_000_000; // 10,000,000 wei\\r\\n\\r\\n    // Compounding frequency limit in seconds\\r\\n    // uint256 public compoundFreq = 60 * 60 * 24; // 24 hours // PROD\\r\\n    uint256 public compoundFreq = 60 * 60; // 1 hour\\r\\n    // uint256 public compoundFreq = 60; // 1 minute // gives bugs when unstaking\\r\\n\\r\\n    // Mapping of address to Staker info\\r\\n    //mapping(address => Staker) internal stakers;\\r\\n    mapping(address => uint) name;\\r\\n    mapping(address => uint[]) public userDepositsIds;\\r\\n    mapping(uint => Staker) public userDeposits;\\r\\n\\r\\n    // Staked tokens minimum timelock\\r\\n    //uint256 public timelock = 60 * 60 * 24 * 1; // 1 days\\r\\n    // uint256 public timelock = 60 * 60 * 2; // 2 hours\\r\\n    // uint256 public timelock = 60 * 2; // 2 minutes\\r\\n\\r\\n\\r\\n    // KonduxERC20 Contract\\r\\n    IERC20 public konduxERC20;\\r\\n    IHelix public helixERC20;\\r\\n    IERC721 public konduxERC721Founders;\\r\\n    IERC721 public konduxERC721kNFT;\\r\\n\\r\\n    // Treasury Contract\\r\\n    ITreasury public treasury;\\r\\n\\r\\n    // Events\\r\\n    event Withdraw(address indexed staker, uint256 amount);\\r\\n    event WithdrawAll(address indexed staker, uint256 amount);\\r\\n    event Compound(address indexed staker, uint256 amount);\\r\\n    event Stake(uint indexed id, address indexed staker, uint256 amount);\\r\\n    event Unstake(address indexed staker, uint256 amount); \\r\\n    event Reward(address indexed staker, uint256 amount);\\r\\n\\r\\n\\r\\n    // Constructor function\\r\\n    constructor(address _authority, address _konduxERC20, address _treasury, address _konduxERC721Founders, address _konduxERC721kNFT, address _helixERC20)\\r\\n        AccessControlled(IAuthority(_authority)) {        \\r\\n            require(_konduxERC20 != address(0), \\\"Kondux ERC20 address is not set\\\");\\r\\n            require(_treasury != address(0), \\\"Treasury address is not set\\\");\\r\\n            konduxERC20 = IERC20(_konduxERC20);\\r\\n            konduxERC721Founders = IERC721(_konduxERC721Founders);\\r\\n            konduxERC721kNFT = IERC721(_konduxERC721kNFT);\\r\\n            helixERC20 = IHelix(_helixERC20);\\r\\n            treasury = ITreasury(_treasury);\\r\\n    }\\r\\n\\r\\n    // modifier timelocked(uint _id) {\\r\\n    //     require(block.timestamp >= stakers[msg.sender].timelock, \\\"Timelock not passed\\\");\\r\\n    //     _;\\r\\n    // }\\r\\n\\r\\n    // If address has no Staker struct, initiate one. If address already was a stake,\\r\\n    // calculate the rewards and add them to unclaimedRewards, reset the last time of\\r\\n    // deposit and then add _amount to the already deposited amount.\\r\\n    // Transfers the amount staked.\\r\\n    function deposit(uint256 _amount, uint8 _timelock) public returns (uint) {\\r\\n        require(_amount >= minStake, \\\"Amount smaller than minimimum deposit\\\");\\r\\n        require(konduxERC20.balanceOf(msg.sender) >= _amount, \\\"Can't stake more than you own\\\");\\r\\n        require(konduxERC20.allowance(msg.sender, address(this)) >= _amount, \\\"Allowance not set\\\");\\r\\n        require(_timelock >= 0 && _timelock <= 4, \\\"Invalid timelock\\\"); // PROD: 3\\r\\n        // require(stakers[msg.sender].timelockCategory <= _timelock, \\\"Can't decrease timelock category\\\");\\r\\n\\r\\n        console.log(konduxERC20.balanceOf(msg.sender)); \\r\\n        console.log(_amount);\\r\\n        console.log(konduxERC20.allowance(msg.sender, address(this))); \\r\\n\\r\\n        uint _id = _depositIds.current();\\r\\n\\r\\n        userDeposits[_id] = Staker({\\r\\n            staker: msg.sender,\\r\\n            deposited: _amount,\\r\\n            unclaimedRewards: 0,\\r\\n            timelock: 0,\\r\\n            timelockCategory: _timelock,\\r\\n            timeOfLastUpdate: block.timestamp,\\r\\n            lastDepositTime: block.timestamp,\\r\\n            redeemed: 0\\r\\n        });             \\r\\n        \\r\\n        if (_timelock == uint8(LockingTimes.OneMonth)) {\\r\\n            userDeposits[_id].timelock = block.timestamp + 30 days; // 1 month\\r\\n        } else if (_timelock == uint8(LockingTimes.ThreeMonths)) {\\r\\n            userDeposits[_id].timelock = block.timestamp + 90 days; // 3 months\\r\\n        } else if (_timelock == uint8(LockingTimes.SixMonths)) {\\r\\n            userDeposits[_id].timelock = block.timestamp + 180 days; // 6 months\\r\\n        } else if (_timelock == uint8(LockingTimes.OneYear)) {\\r\\n            userDeposits[_id].timelock = block.timestamp + 365 days; // 1 year \\r\\n        } else if (_timelock == uint8(LockingTimes.Test)) {\\r\\n            userDeposits[_id].timelock = block.timestamp + 2 minutes; // 2 minutes // TEST\\r\\n        }\\r\\n\\r\\n        userDepositsIds[msg.sender].push(_id);         \\r\\n\\r\\n        konduxERC20.transferFrom(msg.sender, authority.vault(), _amount);\\r\\n        helixERC20.mint(msg.sender, _amount);\\r\\n        \\r\\n        _depositIds.increment(); \\r\\n\\r\\n        emit Stake(_id, msg.sender, _amount);\\r\\n\\r\\n        return _id;\\r\\n    }\\r\\n\\r\\n    // Compound the rewards and reset the last time of update for Deposit info\\r\\n    function stakeRewards(uint _depositId) public {\\r\\n        require(msg.sender == userDeposits[_depositId].staker, \\\"You are not the owner of this deposit\\\");\\r\\n        require(compoundRewardsTimer(_depositId) == 0, \\\"Tried to compound rewards too soon\\\"); // incluir depositId\\r\\n\\r\\n        uint256 rewards = calculateRewards(msg.sender, _depositId) + userDeposits[_depositId].unclaimedRewards; \\r\\n        userDeposits[_depositId].unclaimedRewards = 0; \\r\\n        userDeposits[_depositId].deposited += rewards;\\r\\n        userDeposits[_depositId].timeOfLastUpdate = block.timestamp; \\r\\n\\r\\n        helixERC20.mint(msg.sender, rewards);\\r\\n\\r\\n        emit Compound(msg.sender, rewards);\\r\\n    }\\r\\n\\r\\n    // Transfer rewards to msg.sender\\r\\n    function claimRewards(uint _depositId) public {\\r\\n        require(msg.sender == userDeposits[_depositId].staker, \\\"You are not the owner of this deposit\\\");\\r\\n        require(block.timestamp >= userDeposits[_depositId].timelock, \\\"Timelock not passed\\\");\\r\\n        // console.log(\\\"Claiming rewards\\\");\\r\\n        // console.log(\\\"staking contract address\\\", address(this));\\r\\n\\r\\n        uint256 rewards = calculateRewards(msg.sender, _depositId) + userDeposits[_depositId].unclaimedRewards; \\r\\n        // console.log(\\\"rewards: %s\\\", rewards);\\r\\n        // console.log(\\\"pre-claiming balance vault: %s\\\", konduxERC20.balanceOf(authority.vault()));\\r\\n        // console.log(\\\"ERC20 address: %s\\\", address(konduxERC20));\\r\\n        require(rewards > 0, \\\"You have no rewards\\\");\\r\\n        userDeposits[_depositId].unclaimedRewards = 0;\\r\\n        userDeposits[_depositId].timeOfLastUpdate = block.timestamp;\\r\\n        helixERC20.burn(msg.sender, rewards);\\r\\n        konduxERC20.transferFrom(authority.vault(), msg.sender, rewards);\\r\\n        // console.logString(\\\"Rewards claimed\\\");\\r\\n        // console.log(konduxERC20.balanceOf(authority.vault()));\\r\\n        emit Reward(msg.sender, rewards);\\r\\n    }\\r\\n\\r\\n    // Withdraw specified amount of staked tokens\\r\\n    function withdraw(uint256 _amount, uint _depositId) public {\\r\\n        require(msg.sender == userDeposits[_depositId].staker, \\\"You are not the owner of this deposit\\\");\\r\\n        require(block.timestamp >= userDeposits[_depositId].timelock, \\\"Timelock not passed\\\");\\r\\n        require(userDeposits[_depositId].deposited >= _amount, \\\"Can't withdraw more than you have\\\");\\r\\n        require(_amount <= helixERC20.balanceOf(msg.sender), \\\"Can't withdraw more tokens than the collateral you have\\\");\\r\\n        console.log(\\\"Withdrawing\\\");\\r\\n        console.log(\\\"Amount to withdraw: %s\\\", _amount);\\r\\n        console.log(\\\"Deposit ID: %s\\\", _depositId);\\r\\n        console.log(\\\"Staker: %s\\\", userDeposits[_depositId].staker);\\r\\n        console.log(\\\"Staker address: %s\\\", msg.sender);\\r\\n        console.log(\\\"Staker balance: %s\\\", helixERC20.balanceOf(msg.sender)); \\r\\n        uint256 _rewards = calculateRewards(msg.sender, _depositId);\\r\\n        userDeposits[_depositId].deposited -= _amount;\\r\\n        userDeposits[_depositId].timeOfLastUpdate = block.timestamp;\\r\\n        userDeposits[_depositId].unclaimedRewards = _rewards;\\r\\n        console.log(\\\"Rewards: %s\\\", _rewards);\\r\\n        console.log(\\\"withdrawalFee: %s\\\", withdrawalFee);\\r\\n        console.log(\\\"withdrawalFeeDivisor: %s\\\", withdrawalFeeDivisor);\\r\\n        uint256 _liquid = (_amount * (withdrawalFeeDivisor - withdrawalFee)) / withdrawalFeeDivisor;\\r\\n        console.log(\\\"Liquid: %s\\\", _liquid);\\r\\n        helixERC20.burn(msg.sender, _amount);\\r\\n        konduxERC20.transferFrom(authority.vault(), msg.sender, _liquid);\\r\\n        emit Withdraw(msg.sender, _liquid);\\r\\n    }\\r\\n\\r\\n    // Withdraw all stake and rewards and mints them to the msg.sender\\r\\n    function withdrawAll() public { // fazer depois q tiver view q pega todos os depositos do usuario\\r\\n        console.log(\\\"Withdrawing all\\\");\\r\\n        uint[] memory _userDepositIds = getDepositIds(msg.sender); \\r\\n        uint _liquid = 0;\\r\\n        uint _rewards = 0;\\r\\n        uint _deposit = 0;\\r\\n        for (uint i = 0; i < _userDepositIds.length; i++) {\\r\\n            console.log(\\\"Deposit ID: %s\\\", _userDepositIds[i]);\\r\\n            require(block.timestamp >= userDeposits[_userDepositIds[i]].timelock, \\\"Timelock not passed\\\");\\r\\n            console.log(\\\"calculated rewards: %s\\\", calculateRewards(msg.sender, _userDepositIds[i]));\\r\\n            console.log(\\\"unclaimed rewards: %s\\\", userDeposits[_userDepositIds[i]].unclaimedRewards);\\r\\n            _rewards = _rewards + calculateRewards(msg.sender, _userDepositIds[i]) + userDeposits[_userDepositIds[i]].unclaimedRewards;\\r\\n            _deposit = _deposit + userDeposits[_userDepositIds[i]].deposited;\\r\\n            userDeposits[_userDepositIds[i]].deposited = 0;\\r\\n            userDeposits[_userDepositIds[i]].timeOfLastUpdate = 0;\\r\\n            console.log(\\\"Rewards: %s\\\", _rewards);\\r\\n            \\r\\n         //   helixERC20.burn(msg.sender, _amount);\\r\\n           // konduxERC20.transferFrom(authority.vault(), msg.sender, _liquid);\\r\\n           // emit Withdraw(msg.sender, _liquid);\\r\\n        }\\r\\n\\r\\n        helixERC20.mint(msg.sender, _rewards);\\r\\n\\r\\n        uint _amount = _rewards + _deposit; \\r\\n        console.log(\\\"Amount: %s\\\", _amount); \\r\\n        console.log(\\\"withdrawalFee: %s\\\", withdrawalFee);\\r\\n        console.log(\\\"withdrawalFeeDivisor: %s\\\", withdrawalFeeDivisor);\\r\\n        _liquid = (_amount * (withdrawalFeeDivisor - withdrawalFee)) / withdrawalFeeDivisor;\\r\\n        console.log(\\\"****** Liquid: %s\\\", _liquid);\\r\\n        require(_amount <= helixERC20.balanceOf(msg.sender), \\\"Can't withdraw more tokens than the collateral you have\\\");\\r\\n        helixERC20.burn(msg.sender, _amount);\\r\\n        konduxERC20.transferFrom(authority.vault(), msg.sender, _liquid);\\r\\n        emit WithdrawAll(msg.sender, _liquid);\\r\\n    }\\r\\n\\r\\n    // Function useful for fron-end that returns user stake and rewards by address\\r\\n    function getDepositInfo(address _staker, uint _depositId) public view returns (uint256 _stake, uint256 _rewards) {\\r\\n        _stake = userDeposits[_depositId].deposited;  \\r\\n        _rewards = calculateRewards(_staker, _depositId) + userDeposits[_depositId].unclaimedRewards;\\r\\n        return (_stake, _rewards); \\r\\n    }\\r\\n\\r\\n    // Utility function that returns the timer for restaking rewards\\r\\n    function compoundRewardsTimer(uint _depositId) public view returns (uint256 _timer) {\\r\\n        if (userDeposits[_depositId].timeOfLastUpdate + compoundFreq <= block.timestamp) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return (userDeposits[_depositId].timeOfLastUpdate + compoundFreq) - block.timestamp;\\r\\n        } \\r\\n    }\\r\\n\\r\\n    // Calculate the rewards since the last update on Deposit info\\r\\n    function calculateRewards(address _staker, uint _depositId) public view returns (uint256 rewards) {\\r\\n        console.log(\\\"Calculating rewards\\\");\\r\\n        console.log(\\\"stakers[_staker].timeOfLastUpdate: %s\\\", userDeposits[_depositId].timeOfLastUpdate);\\r\\n        console.log(\\\"block.timestamp: %s\\\", block.timestamp);\\r\\n        console.log(\\\"stakers[_staker].deposited: %s\\\", userDeposits[_depositId].deposited);\\r\\n        console.log(\\\"rewardsPerHour: %s\\\", rewardsPerHour);\\r\\n        console.log(\\\"((((block.timestamp - userDeposits[_depositId].timeOfLastUpdate) * userDeposits[_depositId].deposited) * rewardsPerHour) / 3600) / 10_000_000: %s\\\", ((((block.timestamp - userDeposits[_depositId].timeOfLastUpdate) * userDeposits[_depositId].deposited) * rewardsPerHour) / 3600) / 10_000_000);\\r\\n\\r\\n        uint256 _reward = (((((block.timestamp - userDeposits[_depositId].timeOfLastUpdate) * \\r\\n            userDeposits[_depositId].deposited) * rewardsPerHour) / 3600) / 10_000_000); // blocks * staked * rewards/hour / 1h / 10^7\\r\\n\\r\\n        console.log(\\\"reward: %s\\\", _reward);\\r\\n        \\r\\n        if (IERC721(konduxERC721Founders).balanceOf(_staker) > 0) {\\r\\n            _reward = (_reward * foundersRewardBoost) / foundersRewardBoostDivisor;\\r\\n            console.log(\\\"reward after founders: %s\\\", _reward);\\r\\n        }\\r\\n\\r\\n        if (IERC721(konduxERC721kNFT).balanceOf(_staker) > 0) {\\r\\n            uint256 _kNFTBalance = IERC721(konduxERC721kNFT).balanceOf(_staker);\\r\\n            if (_kNFTBalance > 5) {\\r\\n                _kNFTBalance = 5;\\r\\n            }\\r\\n            \\r\\n            //give 1% more for each kNFT owned using kNFTRewardBoost\\r\\n            _reward = (_reward * (kNFTRewardBoostDivisor + (_kNFTBalance * kNFTRewardBoost))) / kNFTRewardBoostDivisor;\\r\\n\\r\\n            console.log(\\\"reward after kNFT: %s\\\", _reward);\\r\\n        }\\r\\n\\r\\n        // add 0% if reward category is 0; add 1% if reward category is 1; add 3% if reward category is 2; add 9% if reward category is 3;\\r\\n        if (userDeposits[_depositId].timelockCategory == 1) { \\r\\n            _reward = (_reward * 10100) / 10000;\\r\\n        } else if (userDeposits[_depositId].timelockCategory == 2) {\\r\\n            _reward = (_reward * 10300) / 10000;\\r\\n        } else if (userDeposits[_depositId].timelockCategory == 3) { \\r\\n            _reward = (_reward * 10900) / 10000; \\r\\n        }\\r\\n\\r\\n        return _reward;\\r\\n    }\\r\\n\\r\\n    // Functions for modifying  staking mechanism variables:\\r\\n\\r\\n    // Set rewards per hour as x/10.000.000 (Example: 100.000 = 1%)\\r\\n    function setRewards(uint256 _rewardsPerHour) public onlyGovernor {\\r\\n        rewardsPerHour = _rewardsPerHour;\\r\\n    }\\r\\n\\r\\n    // Set the minimum amount for staking in wei\\r\\n    function setMinStake(uint256 _minStake) public onlyGovernor {\\r\\n        minStake = _minStake;\\r\\n    }\\r\\n\\r\\n    // Set the minimum time that has to pass for a user to be able to restake rewards\\r\\n    function setCompFreq(uint256 _compoundFreq) public onlyGovernor {\\r\\n        compoundFreq = _compoundFreq;\\r\\n    }\\r\\n\\r\\n    // Set the address of the Kondux ERC20 token\\r\\n    function setKonduxERC20(address _konduxERC20) public onlyGovernor {\\r\\n        konduxERC20 = IERC20(_konduxERC20);\\r\\n    }\\r\\n\\r\\n    // Set the address of Helix Contract\\r\\n    function setHelixERC20(address _helix) public onlyGovernor {\\r\\n        helixERC20 = IHelix(_helix);\\r\\n    }\\r\\n\\r\\n    // Set the address of konduxERC721Founders contract\\r\\n    function setKonduxERC721Founders(address _konduxERC721Founders) public onlyGovernor {\\r\\n        konduxERC721Founders = IERC721(_konduxERC721Founders);\\r\\n    }\\r\\n\\r\\n    // Set the address of konduxERC721kNFT contract\\r\\n    function setKonduxERC721kNFT(address _konduxERC721kNFT) public onlyGovernor {\\r\\n        konduxERC721kNFT = IERC721(_konduxERC721kNFT);\\r\\n    }\\r\\n\\r\\n    // Set the address of the Treasury contract\\r\\n    function setTreasury(address _treasury) public onlyGovernor {\\r\\n        treasury = ITreasury(_treasury);\\r\\n    }\\r\\n\\r\\n    // Set the withdrawal fee\\r\\n    function setWithdrawalFee(uint256 _withdrawalFee) public onlyGovernor {\\r\\n        withdrawalFee = _withdrawalFee;\\r\\n    }\\r\\n\\r\\n    // Set the withdrawal fee divisor\\r\\n    function setWithdrawalFeeDivisor(uint256 _withdrawalFeeDivisor) public onlyGovernor {\\r\\n        withdrawalFeeDivisor = _withdrawalFeeDivisor;\\r\\n    }\\r\\n\\r\\n    // Set the founders reward boost\\r\\n    function setFoundersRewardBoost(uint256 _foundersRewardBoost) public onlyGovernor {\\r\\n        foundersRewardBoost = _foundersRewardBoost;\\r\\n    }\\r\\n\\r\\n    // Set the founders reward boost divisor\\r\\n    function setFoundersRewardBoostDivisor(uint256 _foundersRewardBoostDivisor) public onlyGovernor {\\r\\n        foundersRewardBoostDivisor = _foundersRewardBoostDivisor;\\r\\n    }\\r\\n\\r\\n    // Set the kNFT reward boost\\r\\n    function setkNFTRewardBoost(uint256 _kNFTRewardBoost) public onlyGovernor {\\r\\n        kNFTRewardBoost = _kNFTRewardBoost;\\r\\n    }\\r\\n\\r\\n    // Set the kNFT reward boost divisor\\r\\n    function setkNFTRewardBoostDivisor(uint256 _kNFTRewardBoostDivisor) public onlyGovernor {\\r\\n        kNFTRewardBoostDivisor = _kNFTRewardBoostDivisor;\\r\\n    }\\r\\n\\r\\n    // Functions for getting staking mechanism variables:\\r\\n\\r\\n    // Get staker's time of last update\\r\\n    function getTimeOfLastUpdate(uint _depositId) public view returns (uint256 _timeOfLastUpdate) {\\r\\n        return userDeposits[_depositId].timeOfLastUpdate;\\r\\n    }\\r\\n\\r\\n    // Get staker's deposited amount\\r\\n    function getStakedAmount(uint _depositId) public view returns (uint256 _deposited) {\\r\\n        return userDeposits[_depositId].deposited;\\r\\n    }\\r\\n\\r\\n    // Get rewards per hour\\r\\n    function getRewardsPerHour() public view returns (uint256 _rewardsPerHour) {\\r\\n        return rewardsPerHour;\\r\\n    }\\r\\n\\r\\n    // Get Founder's reward boost\\r\\n    function getFoundersRewardBoost() public view returns (uint256 _foundersRewardBoost) {\\r\\n        return foundersRewardBoost;\\r\\n    }\\r\\n\\r\\n    // Get Founder's reward boost divisor\\r\\n    function getFoundersRewardBoostDenominator() public view returns (uint256 _foundersRewardBoostDivisor) {\\r\\n        return foundersRewardBoostDivisor;\\r\\n    }\\r\\n\\r\\n    // Get kNFT reward boost\\r\\n    function getkNFTRewardBoost() public view returns (uint256 _kNFTRewardBoost) {\\r\\n        return kNFTRewardBoost;\\r\\n    }\\r\\n\\r\\n    // Get kNFT reward boost divisor\\r\\n    function getKnftRewardBoostDenominator() public view returns (uint256 _kNFTRewardBoostDivisor) {\\r\\n        return kNFTRewardBoostDivisor;\\r\\n    }\\r\\n\\r\\n    // Get minimum stake\\r\\n    function getMinStake() public view returns (uint256 _minStake) {\\r\\n        return minStake;\\r\\n    }\\r\\n\\r\\n    function getTimelockCategory(uint _depositId) public view returns (uint8 _timelockCategory) {\\r\\n        return userDeposits[_depositId].timelockCategory;\\r\\n    }\\r\\n\\r\\n    function getTimelock(uint _depositId) public view returns (uint256 _timelock) {\\r\\n        return userDeposits[_depositId].timelock;\\r\\n    }\\r\\n\\r\\n    function getDepositIds(address _user) public view returns (uint256[] memory) {\\r\\n        return userDepositsIds[_user];\\r\\n    }\\r\\n\\r\\n    function getWithdrawalFeeDivisor() public view returns (uint256 _withdrawalFeeDivisor) {\\r\\n        return withdrawalFeeDivisor;\\r\\n    }\\r\\n\\r\\n    function getWithdrawalFee() public view returns (uint256 _withdrawalFee) {\\r\\n        return withdrawalFee;\\r\\n    }\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0x77899fa7fb3098c8224715b208525c895d7806e3a1de8b63d5927ec3fcae56a0\",\"license\":\"MIT\"},\"contracts/interfaces/IAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\ninterface IAuthority {\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event RolePushed(address indexed account, bytes32 _role);\\r\\n\\r\\n    event GovernorPulled(address indexed from, address indexed to);\\r\\n    event GuardianPulled(address indexed from, address indexed to);\\r\\n    event PolicyPulled(address indexed from, address indexed to);\\r\\n    event VaultPulled(address indexed from, address indexed to);\\r\\n\\r\\n    /* ========== VIEW ========== */\\r\\n\\r\\n    function governor() external view returns (address);\\r\\n\\r\\n    function guardian() external view returns (address);\\r\\n\\r\\n    function policy() external view returns (address);\\r\\n\\r\\n    function vault() external view returns (address);\\r\\n\\r\\n    function roles(address _addr) external view returns (bytes32);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x887a7eb2eeab95bba651b3d65b3d6a4695301acb16f27722524021afa1cf97d5\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IHelix.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IHelix is IERC20 {\\r\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\r\\n    function burn(address _to, uint256 _amount) external;\\r\\n    function mint(address _to, uint256 _amount) external;\\r\\n}\",\"keccak256\":\"0xe84d0c27c30de7ed7dec020efc3fcccaa55f3d54ebaaabb3ace6354d7cd00f84\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\ninterface ITreasury {\\r\\n    function deposit(\\r\\n        uint256 _amount,\\r\\n        address _token\\r\\n    ) external;\\r\\n\\r\\n    function depositEther() external payable;\\r\\n\\r\\n    function withdraw(\\r\\n        uint256 _amount,\\r\\n        address _token\\r\\n    ) external;\\r\\n\\r\\n    function withdrawTo(\\r\\n        uint256 _amount,\\r\\n        address _token,\\r\\n        address _to\\r\\n    ) external;\\r\\n\\r\\n    function withdrawEther(\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n}\",\"keccak256\":\"0xf49bf308cba46e3ffe330f85fa0842c23ed5424eeda9055fa7cc6153f52ec10c\",\"license\":\"MIT\"},\"contracts/types/AccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/IAuthority.sol\\\";\\r\\n\\r\\n/// @dev Reasoning for this contract = modifiers literaly copy code\\r\\n/// instead of pointing towards the logic to execute. Over many\\r\\n/// functions this bloats contract size unnecessarily.\\r\\n/// imho modifiers are a meme.\\r\\nabstract contract AccessControlled {\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event AuthorityUpdated(IAuthority authority);\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    IAuthority public authority;\\r\\n\\r\\n    /* ========== Constructor ========== */\\r\\n\\r\\n    constructor(IAuthority _authority) {\\r\\n        require(address(_authority) != address(0), \\\"Authority cannot be zero address\\\");\\r\\n        authority = _authority;\\r\\n        emit AuthorityUpdated(_authority);\\r\\n    }\\r\\n\\r\\n    /* ========== \\\"MODIFIERS\\\" ========== */\\r\\n\\r\\n    modifier onlyGovernor {\\r\\n        _onlyGovernor();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGuardian {\\r\\n        _onlyGuardian();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPolicy {\\r\\n        _onlyPolicy();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyVault {\\r\\n        _onlyVault();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyRole(bytes32 _role){\\r\\n        _onlyRole(_role);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========== GOV ONLY ========== */\\r\\n\\r\\n    function initializeAuthority(IAuthority _newAuthority) internal {\\r\\n        require(authority == IAuthority(address(0)), \\\"AUTHORITY_INITIALIZED\\\");\\r\\n        authority = _newAuthority;\\r\\n        emit AuthorityUpdated(_newAuthority);\\r\\n    }\\r\\n\\r\\n    function setAuthority(IAuthority _newAuthority) external {\\r\\n        _onlyGovernor();\\r\\n        authority = _newAuthority;\\r\\n        emit AuthorityUpdated(_newAuthority);\\r\\n    }\\r\\n\\r\\n    /* ========== INTERNAL CHECKS ========== */\\r\\n\\r\\n    function _onlyGovernor() internal view {\\r\\n        require(msg.sender == authority.governor(), \\\"UNAUTHORIZED\\\");\\r\\n    }\\r\\n\\r\\n    function _onlyGuardian() internal view {\\r\\n        require(msg.sender == authority.guardian(), \\\"UNAUTHORIZED\\\");\\r\\n    }\\r\\n\\r\\n    function _onlyPolicy() internal view {\\r\\n        require(msg.sender == authority.policy(), \\\"UNAUTHORIZED\\\");        \\r\\n    }\\r\\n\\r\\n    function _onlyVault() internal view {\\r\\n        require(msg.sender == authority.vault(), \\\"UNAUTHORIZED\\\");                \\r\\n    }\\r\\n\\r\\n    function _onlyRole(bytes32 _role) internal view {\\r\\n        require(authority.roles(msg.sender) == _role, \\\"UNAUTHORIZED\\\");\\r\\n    }\\r\\n\\r\\n  \\r\\n}\\r\\n\",\"keccak256\":\"0x69a30ff5614ccb42137005d86252f6a9009c36785ab7a3c25e2c49a24ba5af5e\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052620186a06002556298968060035562a7d8c060045562989680600555620186a06006556298968060075561011d60085562989680600955610e10600a553480156200004e57600080fd5b506040516200313e3803806200313e833981016040819052620000719162000250565b856001600160a01b038116620000ce5760405162461bcd60e51b815260206004820181905260248201527f417574686f726974792063616e6e6f74206265207a65726f206164647265737360448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a1506001600160a01b038516620001785760405162461bcd60e51b815260206004820152601f60248201527f4b6f6e6475782045524332302061646472657373206973206e6f7420736574006044820152606401620000c5565b6001600160a01b038416620001d05760405162461bcd60e51b815260206004820152601b60248201527f54726561737572792061646472657373206973206e6f742073657400000000006044820152606401620000c5565b600e80546001600160a01b03199081166001600160a01b03978816179091556010805482169487169490941790935560118054841692861692909217909155600f80548316918516919091179055601280549091169190921617905550620002d1565b80516001600160a01b03811681146200024b57600080fd5b919050565b60008060008060008060c087890312156200026a57600080fd5b620002758762000233565b9550620002856020880162000233565b9450620002956040880162000233565b9350620002a56060880162000233565b9250620002b56080880162000233565b9150620002c560a0880162000233565b90509295509295509295565b612e5d80620002e16000396000f3fe608060405234801561001057600080fd5b50600436106103575760003560e01c80637d15b9e7116101c8578063beb8314c11610104578063cfb656a5116100a2578063e6fd009f1161007c578063e6fd009f146106f6578063ecbb34dc146106ff578063f0f4426014610708578063f16b41f41461071b57600080fd5b8063cfb656a5146106c8578063d55111c5146106db578063d8e159f8146106ee57600080fd5b8063c11479ab116100de578063c11479ab1461066f578063c5ebc2f714610682578063c647b10e146106a2578063c7a29c6f146106b557600080fd5b8063beb8314c14610636578063bf7e214f14610649578063bf811fbc1461065c57600080fd5b806394a6899111610171578063a55dfa1c1161014b578063a55dfa1c146105ea578063a9b29407146105fd578063ac1e502514610610578063ba5771481461062357600080fd5b806394a68991146105c657806397b833e1146105d95780639ef29244146105e257600080fd5b80638bc7e8c4116101a25780638bc7e8c4146105a15780638c80fd90146105aa5780638e7271fa146105bd57600080fd5b80637d15b9e714610588578063853828b61461059157806387c4fdec1461059957600080fd5b8063441a3e701161029757806359b0e59011610240578063654cfdff1161021a578063654cfdff1461054757806378e2816b1461055a5780637a1dbc661461056d5780637a9e5e4b1461057557600080fd5b806359b0e590146104ee5780635a5392be1461051157806361d027b31461053457600080fd5b80635385689c116102715780635385689c146104c057806356a3b5fa146104d35780635972e559146104db57600080fd5b8063441a3e70146104915780634477c974146104a45780634ca3bca3146104b757600080fd5b80632604b7041161030457806334302605116102de578063343026051461042a578063375b3c0a1461043d57806338c26d1814610446578063408433401461047e57600080fd5b80632604b704146103e45780632707e95b1461040f5780632ebd8a461461042257600080fd5b80630d0ea614116103355780630d0ea614146103b057806310b18438146103b85780631a121d54146103db57600080fd5b80630903e9581461035c5780630930df6a146103735780630962ef791461039b575b600080fd5b6008545b6040519081526020015b60405180910390f35b610386610381366004612af2565b6107c1565b6040805192835260208301919091520161036a565b6103ae6103a9366004612b1e565b6107fa565b005b600754610360565b6103606103c6366004612b1e565b6000908152600d602052604090206006015490565b610360600a5481565b600e546103f7906001600160a01b031681565b6040516001600160a01b03909116815260200161036a565b6103ae61041d366004612b1e565b610af3565b600454610360565b6103ae610438366004612b1e565b610b00565b61036060095481565b61046c610454366004612b1e565b6000908152600d602052604090206007015460ff1690565b60405160ff909116815260200161036a565b6103ae61048c366004612b1e565b610b0d565b6103ae61049f366004612b37565b610b1a565b6103ae6104b2366004612b1e565b611219565b61036060045481565b6011546103f7906001600160a01b031681565b600954610360565b6103ae6104e9366004612b1e565b6113f2565b6103606104fc366004612b1e565b6000908152600d602052604090206003015490565b61036061051f366004612b1e565b6000908152600d602052604090206001015490565b6012546103f7906001600160a01b031681565b610360610555366004612b59565b6113ff565b6103ae610568366004612b8f565b611a01565b600354610360565b6103ae610583366004612b8f565b611a2b565b61036060035481565b6103ae611a87565b600554610360565b61036060025481565b6103ae6105b8366004612b1e565b6121bb565b61036060085481565b6103ae6105d4366004612b8f565b6121c8565b61036060065481565b600654610360565b6103606105f8366004612b1e565b6121f2565b600f546103f7906001600160a01b031681565b6103ae61061e366004612b1e565b61224c565b610360610631366004612af2565b612259565b610360610644366004612af2565b61228a565b6000546103f7906001600160a01b031681565b6103ae61066a366004612b8f565b6127bf565b6103ae61067d366004612b1e565b6127e9565b610695610690366004612b8f565b6127f6565b60405161036a9190612bac565b6103ae6106b0366004612b1e565b612862565b6103ae6106c3366004612b1e565b61286f565b6103ae6106d6366004612b8f565b61287c565b6010546103f7906001600160a01b031681565b600254610360565b61036060075481565b61036060055481565b6103ae610716366004612b8f565b6128a6565b610779610729366004612b1e565b600d60205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007909701546001600160a01b03909616969495939492939192909160ff1688565b604080516001600160a01b0390991689526020890197909752958701949094526060860192909252608085015260a084015260c083015260ff1660e08201526101000161036a565b6000818152600d6020526040812060018101546005909101549091906107e7858561228a565b6107f19190612c06565b90509250929050565b6000818152600d60205260409020546001600160a01b031633146108735760405162461bcd60e51b815260206004820152602560248201527f596f7520617265206e6f7420746865206f776e6572206f6620746869732064656044820152641c1bdcda5d60da1b60648201526084015b60405180910390fd5b6000818152600d60205260409020600601544210156108ca5760405162461bcd60e51b8152602060048201526013602482015272151a5b595b1bd8dac81b9bdd081c185cdcd959606a1b604482015260640161086a565b6000818152600d60205260408120600501546108e6338461228a565b6108f09190612c06565b9050600081116109425760405162461bcd60e51b815260206004820152601360248201527f596f752068617665206e6f207265776172647300000000000000000000000000604482015260640161086a565b6000828152600d6020526040808220600581019290925542600390920191909155600f549051632770a7eb60e21b8152336004820152602481018390526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b1580156109ae57600080fd5b505af11580156109c2573d6000803e3d6000fd5b5050600e546000546040805163fbfa77cf60e01b815290516001600160a01b0393841695506323b872dd9450919092169163fbfa77cf9160048083019260209291908290030181865afa158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a419190612c19565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152336024820152604481018490526064016020604051808303816000875af1158015610a94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab89190612c36565b5060405181815233907f619caafabdd75649b302ba8419e48cccf64f37f1983ac4727cfb38b57703ffc9906020015b60405180910390a25050565b610afb6128d0565b600655565b610b086128d0565b600355565b610b156128d0565b600755565b6000818152600d60205260409020546001600160a01b03163314610b8e5760405162461bcd60e51b815260206004820152602560248201527f596f7520617265206e6f7420746865206f776e6572206f6620746869732064656044820152641c1bdcda5d60da1b606482015260840161086a565b6000818152600d6020526040902060060154421015610be55760405162461bcd60e51b8152602060048201526013602482015272151a5b595b1bd8dac81b9bdd081c185cdcd959606a1b604482015260640161086a565b6000818152600d6020526040902060010154821115610c505760405162461bcd60e51b815260206004820152602160248201527f43616e2774207769746864726177206d6f7265207468616e20796f75206861766044820152606560f81b606482015260840161086a565b600f546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbc9190612c58565b821115610d315760405162461bcd60e51b815260206004820152603760248201527f43616e2774207769746864726177206d6f726520746f6b656e73207468616e2060448201527f74686520636f6c6c61746572616c20796f752068617665000000000000000000606482015260840161086a565b610d6f6040518060400160405280600b81526020017f5769746864726177696e670000000000000000000000000000000000000000008152506129a7565b610dae6040518060400160405280601681526020017f416d6f756e7420746f2077697468647261773a20257300000000000000000000815250836129ed565b610dde6040518060400160405280600e81526020016d4465706f7369742049443a20257360901b815250826129ed565b604080518082018252600a81527f5374616b65723a202573000000000000000000000000000000000000000000006020808301919091526000848152600d9091529190912054610e3791906001600160a01b0316612a36565b610e766040518060400160405280601281526020017f5374616b657220616464726573733a202573000000000000000000000000000081525033612a36565b604080518082018252601281527f5374616b65722062616c616e63653a20257300000000000000000000000000006020820152600f5491516370a0823160e01b8152336004820152610f1b926001600160a01b0316906370a0823190602401602060405180830381865afa158015610ef2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f169190612c58565b6129ed565b6000610f27338361228a565b905082600d60008481526020019081526020016000206001016000828254610f4f9190612c71565b90915550506000828152600d60209081526040918290204260038201556005018390558151808301909252600b82526a526577617264733a20257360a81b90820152610f9b90826129ed565b610fdc6040518060400160405280601181526020017f7769746864726177616c4665653a2025730000000000000000000000000000008152506002546129ed565b61101d6040518060400160405280601881526020017f7769746864726177616c46656544697669736f723a20257300000000000000008152506003546129ed565b60006003546002546003546110329190612c71565b61103c9086612c84565b6110469190612ca3565b90506110876040518060400160405280600a81526020017f4c69717569643a20257300000000000000000000000000000000000000000000815250826129ed565b600f54604051632770a7eb60e21b8152336004820152602481018690526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b1580156110d357600080fd5b505af11580156110e7573d6000803e3d6000fd5b5050600e546000546040805163fbfa77cf60e01b815290516001600160a01b0393841695506323b872dd9450919092169163fbfa77cf9160048083019260209291908290030181865afa158015611142573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111669190612c19565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152336024820152604481018490526064016020604051808303816000875af11580156111b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111dd9190612c36565b5060405181815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a250505050565b6000818152600d60205260409020546001600160a01b0316331461128d5760405162461bcd60e51b815260206004820152602560248201527f596f7520617265206e6f7420746865206f776e6572206f6620746869732064656044820152641c1bdcda5d60da1b606482015260840161086a565b611296816121f2565b156112ee5760405162461bcd60e51b815260206004820152602260248201527f547269656420746f20636f6d706f756e64207265776172647320746f6f20736f60448201526137b760f11b606482015260840161086a565b6000818152600d602052604081206005015461130a338461228a565b6113149190612c06565b6000838152600d602052604081206005810182905560010180549293508392909190611341908490612c06565b90915550506000828152600d60205260409081902042600390910155600f5490516340c10f1960e01b8152336004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b1580156113a857600080fd5b505af11580156113bc573d6000803e3d6000fd5b50506040518381523392507f169f1815ebdea059aac3bb00ec9a9594c7a5ffcb64a17e8392b5d84909a145569150602001610ae7565b6113fa6128d0565b600555565b60006009548310156114615760405162461bcd60e51b815260206004820152602560248201527f416d6f756e7420736d616c6c6572207468616e206d696e696d696d756d2064656044820152641c1bdcda5d60da1b606482015260840161086a565b600e546040516370a0823160e01b815233600482015284916001600160a01b0316906370a0823190602401602060405180830381865afa1580156114a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cd9190612c58565b101561151b5760405162461bcd60e51b815260206004820152601d60248201527f43616e2774207374616b65206d6f7265207468616e20796f75206f776e000000604482015260640161086a565b600e54604051636eb1769f60e11b815233600482015230602482015284916001600160a01b03169063dd62ed3e90604401602060405180830381865afa158015611569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158d9190612c58565b10156115db5760405162461bcd60e51b815260206004820152601160248201527f416c6c6f77616e6365206e6f7420736574000000000000000000000000000000604482015260640161086a565b60048260ff16111561162f5760405162461bcd60e51b815260206004820152601060248201527f496e76616c69642074696d656c6f636b00000000000000000000000000000000604482015260640161086a565b600e546040516370a0823160e01b81523360048201526116a3916001600160a01b0316906370a08231906024015b602060405180830381865afa15801561167a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169e9190612c58565b612a7b565b6116ac83612a7b565b600e54604051636eb1769f60e11b81523360048201523060248201526116e4916001600160a01b03169063dd62ed3e9060440161165d565b60006116ef60015490565b60408051610100810182523381526020808201888152600083850181815242606086018181526080870191825260a0870184815260c0880185815260ff8e811660e08b018181528d8952600d909a529a909620985189546001600160a01b0319166001600160a01b0390911617895595516001890155925160028801555160038701555160048601555160058501559051600684015590516007909201805460ff1916929091169190911790559091506117c7576117b04262278d00612c06565b6000828152600d602052604090206006015561183d565b60001960ff8416016117e0576117b0426276a700612c06565b60011960ff8416016117f9576117b04262ed4e00612c06565b60021960ff841601611813576117b0426301e13380612c06565b60031960ff84160161183d5761182a426078612c06565b6000828152600d60205260409020600601555b336000818152600c60209081526040808320805460018101825590845282842001859055600e549254815163fbfa77cf60e01b815291516001600160a01b03948516956323b872dd95909492169263fbfa77cf9260048083019391928290030181865afa1580156118b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d69190612c19565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018790526064016020604051808303816000875af115801561192a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194e9190612c36565b50600f546040516340c10f1960e01b8152336004820152602481018690526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561199b57600080fd5b505af11580156119af573d6000803e3d6000fd5b505050506119c1600180546001019055565b604051848152339082907f02567b2553aeb44e4ddd5d68462774dc3de158cb0f2c2da1740e729b22086aff9060200160405180910390a390505b92915050565b611a096128d0565b601080546001600160a01b0319166001600160a01b0392909216919091179055565b611a336128d0565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a150565b611ac56040518060400160405280600f81526020017f5769746864726177696e6720616c6c00000000000000000000000000000000008152506129a7565b6000611ad0336127f6565b90506000806000805b8451811015611dac57611b2b6040518060400160405280600e81526020016d4465706f7369742049443a20257360901b815250868381518110611b1e57611b1e612cc5565b60200260200101516129ed565b600d6000868381518110611b4157611b41612cc5565b6020026020010151815260200190815260200160002060060154421015611ba05760405162461bcd60e51b8152602060048201526013602482015272151a5b595b1bd8dac81b9bdd081c185cdcd959606a1b604482015260640161086a565b611bfc6040518060400160405280601681526020017f63616c63756c6174656420726577617264733a20257300000000000000000000815250610f1633888581518110611bef57611bef612cc5565b602002602001015161228a565b611c6a6040518060400160405280601581526020017f756e636c61696d656420726577617264733a2025730000000000000000000000815250600d6000888581518110611c4b57611c4b612cc5565b60200260200101518152602001908152602001600020600501546129ed565b600d6000868381518110611c8057611c80612cc5565b6020026020010151815260200190815260200160002060050154611cb033878481518110611bef57611bef612cc5565b611cba9085612c06565b611cc49190612c06565b9250600d6000868381518110611cdc57611cdc612cc5565b602002602001015181526020019081526020016000206001015482611d019190612c06565b91506000600d6000878481518110611d1b57611d1b612cc5565b60200260200101518152602001908152602001600020600101819055506000600d6000878481518110611d5057611d50612cc5565b6020026020010151815260200190815260200160002060030181905550611d9a6040518060400160405280600b81526020016a526577617264733a20257360a81b815250846129ed565b80611da481612cdb565b915050611ad9565b50600f546040516340c10f1960e01b8152336004820152602481018490526001600160a01b03909116906340c10f1990604401600060405180830381600087803b158015611df957600080fd5b505af1158015611e0d573d6000803e3d6000fd5b5050505060008183611e1f9190612c06565b9050611e606040518060400160405280600a81526020017f416d6f756e743a20257300000000000000000000000000000000000000000000815250826129ed565b611ea16040518060400160405280601181526020017f7769746864726177616c4665653a2025730000000000000000000000000000008152506002546129ed565b611ee26040518060400160405280601881526020017f7769746864726177616c46656544697669736f723a20257300000000000000008152506003546129ed565b600354600254611ef29082612c71565b611efc9083612c84565b611f069190612ca3565b9350611f476040518060400160405280601181526020017f2a2a2a2a2a2a204c69717569643a202573000000000000000000000000000000815250856129ed565b600f546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb39190612c58565b8111156120285760405162461bcd60e51b815260206004820152603760248201527f43616e2774207769746864726177206d6f726520746f6b656e73207468616e2060448201527f74686520636f6c6c61746572616c20796f752068617665000000000000000000606482015260840161086a565b600f54604051632770a7eb60e21b8152336004820152602481018390526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b15801561207457600080fd5b505af1158015612088573d6000803e3d6000fd5b5050600e546000546040805163fbfa77cf60e01b815290516001600160a01b0393841695506323b872dd9450919092169163fbfa77cf9160048083019260209291908290030181865afa1580156120e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121079190612c19565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152336024820152604481018790526064016020604051808303816000875af115801561215a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217e9190612c36565b5060405184815233907fd7a4aa9f3dca5f6606ac15d7e1850920201bbb02c38cd986793779f58ae0dfd39060200160405180910390a25050505050565b6121c36128d0565b600955565b6121d06128d0565b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b600a546000828152600d6020526040812060030154909142916122159190612c06565b1161222257506000919050565b600a546000838152600d6020526040902060030154429161224291612c06565b6119fb9190612c71565b6122546128d0565b600255565b600c602052816000526040600020818154811061227557600080fd5b90600052602060002001600091509150505481565b60006122ca6040518060400160405280601381526020017f43616c63756c6174696e672072657761726473000000000000000000000000008152506129a7565b6122fd604051806060016040528060258152602001612e2c602591396000848152600d60205260409020600301546129ed565b61233c6040518060400160405280601381526020017f626c6f636b2e74696d657374616d703a20257300000000000000000000000000815250426129ed565b6123916040518060400160405280601e81526020017f7374616b6572735b5f7374616b65725d2e6465706f73697465643a2025730000815250600d6000858152602001908152602001600020600101546129ed565b6123d26040518060400160405280601281526020017f72657761726473506572486f75723a20257300000000000000000000000000008152506008546129ed565b6124476040518060c0016040528060918152602001612d9b609191396008546000858152600d6020526040902060018101546003909101546298968092610e1092909161241f9042612c71565b6124299190612c84565b6124339190612c84565b61243d9190612ca3565b610f169190612ca3565b6008546000838152600d60205260408120600181015460039091015491926298968092610e1092906124799042612c71565b6124839190612c84565b61248d9190612c84565b6124979190612ca3565b6124a19190612ca3565b90506124e26040518060400160405280600a81526020017f7265776172643a20257300000000000000000000000000000000000000000000815250826129ed565b6010546040516370a0823160e01b81526001600160a01b03868116600483015260009216906370a0823190602401602060405180830381865afa15801561252d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125519190612c58565b11156125b2576005546004546125679083612c84565b6125719190612ca3565b90506125b26040518060400160405280601981526020017f72657761726420616674657220666f756e646572733a20257300000000000000815250826129ed565b6011546040516370a0823160e01b81526001600160a01b03868116600483015260009216906370a0823190602401602060405180830381865afa1580156125fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126219190612c58565b1115612719576011546040516370a0823160e01b81526001600160a01b03868116600483015260009216906370a0823190602401602060405180830381865afa158015612672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126969190612c58565b905060058111156126a5575060055b6007546006546126b59083612c84565b6007546126c29190612c06565b6126cc9084612c84565b6126d69190612ca3565b91506127176040518060400160405280601581526020017f726577617264206166746572206b4e46543a2025730000000000000000000000815250836129ed565b505b6000838152600d602052604090206007015460ff166001036127555761271061274482612774612c84565b61274e9190612ca3565b90506127b8565b6000838152600d602052604090206007015460ff16600203612780576127106127448261283c612c84565b6000838152600d602052604090206007015460ff166003036127b8576127106127ab82612a94612c84565b6127b59190612ca3565b90505b9392505050565b6127c76128d0565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b6127f16128d0565b600a55565b6001600160a01b0381166000908152600c602090815260409182902080548351818402810184019094528084526060939283018282801561285657602002820191906000526020600020905b815481526020019060010190808311612842575b50505050509050919050565b61286a6128d0565b600455565b6128776128d0565b600855565b6128846128d0565b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b6128ae6128d0565b601280546001600160a01b0319166001600160a01b0392909216919091179055565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015612921573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129459190612c19565b6001600160a01b0316336001600160a01b0316146129a55760405162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a45440000000000000000000000000000000000000000604482015260640161086a565b565b6129ea816040516024016129bb9190612d3a565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052612abc565b50565b612a328282604051602401612a03929190612d4d565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b179052612abc565b5050565b612a328282604051602401612a4c929190612d6f565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052612abc565b6129ea81604051602401612a9191815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663f82c50f160e01b1790525b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6001600160a01b03811681146129ea57600080fd5b60008060408385031215612b0557600080fd5b8235612b1081612add565b946020939093013593505050565b600060208284031215612b3057600080fd5b5035919050565b60008060408385031215612b4a57600080fd5b50508035926020909101359150565b60008060408385031215612b6c57600080fd5b82359150602083013560ff81168114612b8457600080fd5b809150509250929050565b600060208284031215612ba157600080fd5b81356127b881612add565b6020808252825182820181905260009190848201906040850190845b81811015612be457835183529284019291840191600101612bc8565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156119fb576119fb612bf0565b600060208284031215612c2b57600080fd5b81516127b881612add565b600060208284031215612c4857600080fd5b815180151581146127b857600080fd5b600060208284031215612c6a57600080fd5b5051919050565b818103818111156119fb576119fb612bf0565b6000816000190483118215151615612c9e57612c9e612bf0565b500290565b600082612cc057634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060018201612ced57612ced612bf0565b5060010190565b6000815180845260005b81811015612d1a57602081850181015186830182015201612cfe565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006127b86020830184612cf4565b604081526000612d606040830185612cf4565b90508260208301529392505050565b604081526000612d826040830185612cf4565b90506001600160a01b0383166020830152939250505056fe28282828626c6f636b2e74696d657374616d70202d20757365724465706f736974735b5f6465706f73697449645d2e74696d654f664c61737455706461746529202a20757365724465706f736974735b5f6465706f73697449645d2e6465706f736974656429202a2072657761726473506572486f757229202f203336303029202f2031305f3030305f3030303a2025737374616b6572735b5f7374616b65725d2e74696d654f664c6173745570646174653a202573a164736f6c6343000810000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103575760003560e01c80637d15b9e7116101c8578063beb8314c11610104578063cfb656a5116100a2578063e6fd009f1161007c578063e6fd009f146106f6578063ecbb34dc146106ff578063f0f4426014610708578063f16b41f41461071b57600080fd5b8063cfb656a5146106c8578063d55111c5146106db578063d8e159f8146106ee57600080fd5b8063c11479ab116100de578063c11479ab1461066f578063c5ebc2f714610682578063c647b10e146106a2578063c7a29c6f146106b557600080fd5b8063beb8314c14610636578063bf7e214f14610649578063bf811fbc1461065c57600080fd5b806394a6899111610171578063a55dfa1c1161014b578063a55dfa1c146105ea578063a9b29407146105fd578063ac1e502514610610578063ba5771481461062357600080fd5b806394a68991146105c657806397b833e1146105d95780639ef29244146105e257600080fd5b80638bc7e8c4116101a25780638bc7e8c4146105a15780638c80fd90146105aa5780638e7271fa146105bd57600080fd5b80637d15b9e714610588578063853828b61461059157806387c4fdec1461059957600080fd5b8063441a3e701161029757806359b0e59011610240578063654cfdff1161021a578063654cfdff1461054757806378e2816b1461055a5780637a1dbc661461056d5780637a9e5e4b1461057557600080fd5b806359b0e590146104ee5780635a5392be1461051157806361d027b31461053457600080fd5b80635385689c116102715780635385689c146104c057806356a3b5fa146104d35780635972e559146104db57600080fd5b8063441a3e70146104915780634477c974146104a45780634ca3bca3146104b757600080fd5b80632604b7041161030457806334302605116102de578063343026051461042a578063375b3c0a1461043d57806338c26d1814610446578063408433401461047e57600080fd5b80632604b704146103e45780632707e95b1461040f5780632ebd8a461461042257600080fd5b80630d0ea614116103355780630d0ea614146103b057806310b18438146103b85780631a121d54146103db57600080fd5b80630903e9581461035c5780630930df6a146103735780630962ef791461039b575b600080fd5b6008545b6040519081526020015b60405180910390f35b610386610381366004612af2565b6107c1565b6040805192835260208301919091520161036a565b6103ae6103a9366004612b1e565b6107fa565b005b600754610360565b6103606103c6366004612b1e565b6000908152600d602052604090206006015490565b610360600a5481565b600e546103f7906001600160a01b031681565b6040516001600160a01b03909116815260200161036a565b6103ae61041d366004612b1e565b610af3565b600454610360565b6103ae610438366004612b1e565b610b00565b61036060095481565b61046c610454366004612b1e565b6000908152600d602052604090206007015460ff1690565b60405160ff909116815260200161036a565b6103ae61048c366004612b1e565b610b0d565b6103ae61049f366004612b37565b610b1a565b6103ae6104b2366004612b1e565b611219565b61036060045481565b6011546103f7906001600160a01b031681565b600954610360565b6103ae6104e9366004612b1e565b6113f2565b6103606104fc366004612b1e565b6000908152600d602052604090206003015490565b61036061051f366004612b1e565b6000908152600d602052604090206001015490565b6012546103f7906001600160a01b031681565b610360610555366004612b59565b6113ff565b6103ae610568366004612b8f565b611a01565b600354610360565b6103ae610583366004612b8f565b611a2b565b61036060035481565b6103ae611a87565b600554610360565b61036060025481565b6103ae6105b8366004612b1e565b6121bb565b61036060085481565b6103ae6105d4366004612b8f565b6121c8565b61036060065481565b600654610360565b6103606105f8366004612b1e565b6121f2565b600f546103f7906001600160a01b031681565b6103ae61061e366004612b1e565b61224c565b610360610631366004612af2565b612259565b610360610644366004612af2565b61228a565b6000546103f7906001600160a01b031681565b6103ae61066a366004612b8f565b6127bf565b6103ae61067d366004612b1e565b6127e9565b610695610690366004612b8f565b6127f6565b60405161036a9190612bac565b6103ae6106b0366004612b1e565b612862565b6103ae6106c3366004612b1e565b61286f565b6103ae6106d6366004612b8f565b61287c565b6010546103f7906001600160a01b031681565b600254610360565b61036060075481565b61036060055481565b6103ae610716366004612b8f565b6128a6565b610779610729366004612b1e565b600d60205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007909701546001600160a01b03909616969495939492939192909160ff1688565b604080516001600160a01b0390991689526020890197909752958701949094526060860192909252608085015260a084015260c083015260ff1660e08201526101000161036a565b6000818152600d6020526040812060018101546005909101549091906107e7858561228a565b6107f19190612c06565b90509250929050565b6000818152600d60205260409020546001600160a01b031633146108735760405162461bcd60e51b815260206004820152602560248201527f596f7520617265206e6f7420746865206f776e6572206f6620746869732064656044820152641c1bdcda5d60da1b60648201526084015b60405180910390fd5b6000818152600d60205260409020600601544210156108ca5760405162461bcd60e51b8152602060048201526013602482015272151a5b595b1bd8dac81b9bdd081c185cdcd959606a1b604482015260640161086a565b6000818152600d60205260408120600501546108e6338461228a565b6108f09190612c06565b9050600081116109425760405162461bcd60e51b815260206004820152601360248201527f596f752068617665206e6f207265776172647300000000000000000000000000604482015260640161086a565b6000828152600d6020526040808220600581019290925542600390920191909155600f549051632770a7eb60e21b8152336004820152602481018390526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b1580156109ae57600080fd5b505af11580156109c2573d6000803e3d6000fd5b5050600e546000546040805163fbfa77cf60e01b815290516001600160a01b0393841695506323b872dd9450919092169163fbfa77cf9160048083019260209291908290030181865afa158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a419190612c19565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152336024820152604481018490526064016020604051808303816000875af1158015610a94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab89190612c36565b5060405181815233907f619caafabdd75649b302ba8419e48cccf64f37f1983ac4727cfb38b57703ffc9906020015b60405180910390a25050565b610afb6128d0565b600655565b610b086128d0565b600355565b610b156128d0565b600755565b6000818152600d60205260409020546001600160a01b03163314610b8e5760405162461bcd60e51b815260206004820152602560248201527f596f7520617265206e6f7420746865206f776e6572206f6620746869732064656044820152641c1bdcda5d60da1b606482015260840161086a565b6000818152600d6020526040902060060154421015610be55760405162461bcd60e51b8152602060048201526013602482015272151a5b595b1bd8dac81b9bdd081c185cdcd959606a1b604482015260640161086a565b6000818152600d6020526040902060010154821115610c505760405162461bcd60e51b815260206004820152602160248201527f43616e2774207769746864726177206d6f7265207468616e20796f75206861766044820152606560f81b606482015260840161086a565b600f546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbc9190612c58565b821115610d315760405162461bcd60e51b815260206004820152603760248201527f43616e2774207769746864726177206d6f726520746f6b656e73207468616e2060448201527f74686520636f6c6c61746572616c20796f752068617665000000000000000000606482015260840161086a565b610d6f6040518060400160405280600b81526020017f5769746864726177696e670000000000000000000000000000000000000000008152506129a7565b610dae6040518060400160405280601681526020017f416d6f756e7420746f2077697468647261773a20257300000000000000000000815250836129ed565b610dde6040518060400160405280600e81526020016d4465706f7369742049443a20257360901b815250826129ed565b604080518082018252600a81527f5374616b65723a202573000000000000000000000000000000000000000000006020808301919091526000848152600d9091529190912054610e3791906001600160a01b0316612a36565b610e766040518060400160405280601281526020017f5374616b657220616464726573733a202573000000000000000000000000000081525033612a36565b604080518082018252601281527f5374616b65722062616c616e63653a20257300000000000000000000000000006020820152600f5491516370a0823160e01b8152336004820152610f1b926001600160a01b0316906370a0823190602401602060405180830381865afa158015610ef2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f169190612c58565b6129ed565b6000610f27338361228a565b905082600d60008481526020019081526020016000206001016000828254610f4f9190612c71565b90915550506000828152600d60209081526040918290204260038201556005018390558151808301909252600b82526a526577617264733a20257360a81b90820152610f9b90826129ed565b610fdc6040518060400160405280601181526020017f7769746864726177616c4665653a2025730000000000000000000000000000008152506002546129ed565b61101d6040518060400160405280601881526020017f7769746864726177616c46656544697669736f723a20257300000000000000008152506003546129ed565b60006003546002546003546110329190612c71565b61103c9086612c84565b6110469190612ca3565b90506110876040518060400160405280600a81526020017f4c69717569643a20257300000000000000000000000000000000000000000000815250826129ed565b600f54604051632770a7eb60e21b8152336004820152602481018690526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b1580156110d357600080fd5b505af11580156110e7573d6000803e3d6000fd5b5050600e546000546040805163fbfa77cf60e01b815290516001600160a01b0393841695506323b872dd9450919092169163fbfa77cf9160048083019260209291908290030181865afa158015611142573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111669190612c19565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152336024820152604481018490526064016020604051808303816000875af11580156111b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111dd9190612c36565b5060405181815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a250505050565b6000818152600d60205260409020546001600160a01b0316331461128d5760405162461bcd60e51b815260206004820152602560248201527f596f7520617265206e6f7420746865206f776e6572206f6620746869732064656044820152641c1bdcda5d60da1b606482015260840161086a565b611296816121f2565b156112ee5760405162461bcd60e51b815260206004820152602260248201527f547269656420746f20636f6d706f756e64207265776172647320746f6f20736f60448201526137b760f11b606482015260840161086a565b6000818152600d602052604081206005015461130a338461228a565b6113149190612c06565b6000838152600d602052604081206005810182905560010180549293508392909190611341908490612c06565b90915550506000828152600d60205260409081902042600390910155600f5490516340c10f1960e01b8152336004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b1580156113a857600080fd5b505af11580156113bc573d6000803e3d6000fd5b50506040518381523392507f169f1815ebdea059aac3bb00ec9a9594c7a5ffcb64a17e8392b5d84909a145569150602001610ae7565b6113fa6128d0565b600555565b60006009548310156114615760405162461bcd60e51b815260206004820152602560248201527f416d6f756e7420736d616c6c6572207468616e206d696e696d696d756d2064656044820152641c1bdcda5d60da1b606482015260840161086a565b600e546040516370a0823160e01b815233600482015284916001600160a01b0316906370a0823190602401602060405180830381865afa1580156114a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cd9190612c58565b101561151b5760405162461bcd60e51b815260206004820152601d60248201527f43616e2774207374616b65206d6f7265207468616e20796f75206f776e000000604482015260640161086a565b600e54604051636eb1769f60e11b815233600482015230602482015284916001600160a01b03169063dd62ed3e90604401602060405180830381865afa158015611569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158d9190612c58565b10156115db5760405162461bcd60e51b815260206004820152601160248201527f416c6c6f77616e6365206e6f7420736574000000000000000000000000000000604482015260640161086a565b60048260ff16111561162f5760405162461bcd60e51b815260206004820152601060248201527f496e76616c69642074696d656c6f636b00000000000000000000000000000000604482015260640161086a565b600e546040516370a0823160e01b81523360048201526116a3916001600160a01b0316906370a08231906024015b602060405180830381865afa15801561167a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169e9190612c58565b612a7b565b6116ac83612a7b565b600e54604051636eb1769f60e11b81523360048201523060248201526116e4916001600160a01b03169063dd62ed3e9060440161165d565b60006116ef60015490565b60408051610100810182523381526020808201888152600083850181815242606086018181526080870191825260a0870184815260c0880185815260ff8e811660e08b018181528d8952600d909a529a909620985189546001600160a01b0319166001600160a01b0390911617895595516001890155925160028801555160038701555160048601555160058501559051600684015590516007909201805460ff1916929091169190911790559091506117c7576117b04262278d00612c06565b6000828152600d602052604090206006015561183d565b60001960ff8416016117e0576117b0426276a700612c06565b60011960ff8416016117f9576117b04262ed4e00612c06565b60021960ff841601611813576117b0426301e13380612c06565b60031960ff84160161183d5761182a426078612c06565b6000828152600d60205260409020600601555b336000818152600c60209081526040808320805460018101825590845282842001859055600e549254815163fbfa77cf60e01b815291516001600160a01b03948516956323b872dd95909492169263fbfa77cf9260048083019391928290030181865afa1580156118b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d69190612c19565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018790526064016020604051808303816000875af115801561192a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194e9190612c36565b50600f546040516340c10f1960e01b8152336004820152602481018690526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561199b57600080fd5b505af11580156119af573d6000803e3d6000fd5b505050506119c1600180546001019055565b604051848152339082907f02567b2553aeb44e4ddd5d68462774dc3de158cb0f2c2da1740e729b22086aff9060200160405180910390a390505b92915050565b611a096128d0565b601080546001600160a01b0319166001600160a01b0392909216919091179055565b611a336128d0565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a150565b611ac56040518060400160405280600f81526020017f5769746864726177696e6720616c6c00000000000000000000000000000000008152506129a7565b6000611ad0336127f6565b90506000806000805b8451811015611dac57611b2b6040518060400160405280600e81526020016d4465706f7369742049443a20257360901b815250868381518110611b1e57611b1e612cc5565b60200260200101516129ed565b600d6000868381518110611b4157611b41612cc5565b6020026020010151815260200190815260200160002060060154421015611ba05760405162461bcd60e51b8152602060048201526013602482015272151a5b595b1bd8dac81b9bdd081c185cdcd959606a1b604482015260640161086a565b611bfc6040518060400160405280601681526020017f63616c63756c6174656420726577617264733a20257300000000000000000000815250610f1633888581518110611bef57611bef612cc5565b602002602001015161228a565b611c6a6040518060400160405280601581526020017f756e636c61696d656420726577617264733a2025730000000000000000000000815250600d6000888581518110611c4b57611c4b612cc5565b60200260200101518152602001908152602001600020600501546129ed565b600d6000868381518110611c8057611c80612cc5565b6020026020010151815260200190815260200160002060050154611cb033878481518110611bef57611bef612cc5565b611cba9085612c06565b611cc49190612c06565b9250600d6000868381518110611cdc57611cdc612cc5565b602002602001015181526020019081526020016000206001015482611d019190612c06565b91506000600d6000878481518110611d1b57611d1b612cc5565b60200260200101518152602001908152602001600020600101819055506000600d6000878481518110611d5057611d50612cc5565b6020026020010151815260200190815260200160002060030181905550611d9a6040518060400160405280600b81526020016a526577617264733a20257360a81b815250846129ed565b80611da481612cdb565b915050611ad9565b50600f546040516340c10f1960e01b8152336004820152602481018490526001600160a01b03909116906340c10f1990604401600060405180830381600087803b158015611df957600080fd5b505af1158015611e0d573d6000803e3d6000fd5b5050505060008183611e1f9190612c06565b9050611e606040518060400160405280600a81526020017f416d6f756e743a20257300000000000000000000000000000000000000000000815250826129ed565b611ea16040518060400160405280601181526020017f7769746864726177616c4665653a2025730000000000000000000000000000008152506002546129ed565b611ee26040518060400160405280601881526020017f7769746864726177616c46656544697669736f723a20257300000000000000008152506003546129ed565b600354600254611ef29082612c71565b611efc9083612c84565b611f069190612ca3565b9350611f476040518060400160405280601181526020017f2a2a2a2a2a2a204c69717569643a202573000000000000000000000000000000815250856129ed565b600f546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb39190612c58565b8111156120285760405162461bcd60e51b815260206004820152603760248201527f43616e2774207769746864726177206d6f726520746f6b656e73207468616e2060448201527f74686520636f6c6c61746572616c20796f752068617665000000000000000000606482015260840161086a565b600f54604051632770a7eb60e21b8152336004820152602481018390526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b15801561207457600080fd5b505af1158015612088573d6000803e3d6000fd5b5050600e546000546040805163fbfa77cf60e01b815290516001600160a01b0393841695506323b872dd9450919092169163fbfa77cf9160048083019260209291908290030181865afa1580156120e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121079190612c19565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152336024820152604481018790526064016020604051808303816000875af115801561215a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217e9190612c36565b5060405184815233907fd7a4aa9f3dca5f6606ac15d7e1850920201bbb02c38cd986793779f58ae0dfd39060200160405180910390a25050505050565b6121c36128d0565b600955565b6121d06128d0565b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b600a546000828152600d6020526040812060030154909142916122159190612c06565b1161222257506000919050565b600a546000838152600d6020526040902060030154429161224291612c06565b6119fb9190612c71565b6122546128d0565b600255565b600c602052816000526040600020818154811061227557600080fd5b90600052602060002001600091509150505481565b60006122ca6040518060400160405280601381526020017f43616c63756c6174696e672072657761726473000000000000000000000000008152506129a7565b6122fd604051806060016040528060258152602001612e2c602591396000848152600d60205260409020600301546129ed565b61233c6040518060400160405280601381526020017f626c6f636b2e74696d657374616d703a20257300000000000000000000000000815250426129ed565b6123916040518060400160405280601e81526020017f7374616b6572735b5f7374616b65725d2e6465706f73697465643a2025730000815250600d6000858152602001908152602001600020600101546129ed565b6123d26040518060400160405280601281526020017f72657761726473506572486f75723a20257300000000000000000000000000008152506008546129ed565b6124476040518060c0016040528060918152602001612d9b609191396008546000858152600d6020526040902060018101546003909101546298968092610e1092909161241f9042612c71565b6124299190612c84565b6124339190612c84565b61243d9190612ca3565b610f169190612ca3565b6008546000838152600d60205260408120600181015460039091015491926298968092610e1092906124799042612c71565b6124839190612c84565b61248d9190612c84565b6124979190612ca3565b6124a19190612ca3565b90506124e26040518060400160405280600a81526020017f7265776172643a20257300000000000000000000000000000000000000000000815250826129ed565b6010546040516370a0823160e01b81526001600160a01b03868116600483015260009216906370a0823190602401602060405180830381865afa15801561252d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125519190612c58565b11156125b2576005546004546125679083612c84565b6125719190612ca3565b90506125b26040518060400160405280601981526020017f72657761726420616674657220666f756e646572733a20257300000000000000815250826129ed565b6011546040516370a0823160e01b81526001600160a01b03868116600483015260009216906370a0823190602401602060405180830381865afa1580156125fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126219190612c58565b1115612719576011546040516370a0823160e01b81526001600160a01b03868116600483015260009216906370a0823190602401602060405180830381865afa158015612672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126969190612c58565b905060058111156126a5575060055b6007546006546126b59083612c84565b6007546126c29190612c06565b6126cc9084612c84565b6126d69190612ca3565b91506127176040518060400160405280601581526020017f726577617264206166746572206b4e46543a2025730000000000000000000000815250836129ed565b505b6000838152600d602052604090206007015460ff166001036127555761271061274482612774612c84565b61274e9190612ca3565b90506127b8565b6000838152600d602052604090206007015460ff16600203612780576127106127448261283c612c84565b6000838152600d602052604090206007015460ff166003036127b8576127106127ab82612a94612c84565b6127b59190612ca3565b90505b9392505050565b6127c76128d0565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b6127f16128d0565b600a55565b6001600160a01b0381166000908152600c602090815260409182902080548351818402810184019094528084526060939283018282801561285657602002820191906000526020600020905b815481526020019060010190808311612842575b50505050509050919050565b61286a6128d0565b600455565b6128776128d0565b600855565b6128846128d0565b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b6128ae6128d0565b601280546001600160a01b0319166001600160a01b0392909216919091179055565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015612921573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129459190612c19565b6001600160a01b0316336001600160a01b0316146129a55760405162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a45440000000000000000000000000000000000000000604482015260640161086a565b565b6129ea816040516024016129bb9190612d3a565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052612abc565b50565b612a328282604051602401612a03929190612d4d565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b179052612abc565b5050565b612a328282604051602401612a4c929190612d6f565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052612abc565b6129ea81604051602401612a9191815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663f82c50f160e01b1790525b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6001600160a01b03811681146129ea57600080fd5b60008060408385031215612b0557600080fd5b8235612b1081612add565b946020939093013593505050565b600060208284031215612b3057600080fd5b5035919050565b60008060408385031215612b4a57600080fd5b50508035926020909101359150565b60008060408385031215612b6c57600080fd5b82359150602083013560ff81168114612b8457600080fd5b809150509250929050565b600060208284031215612ba157600080fd5b81356127b881612add565b6020808252825182820181905260009190848201906040850190845b81811015612be457835183529284019291840191600101612bc8565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156119fb576119fb612bf0565b600060208284031215612c2b57600080fd5b81516127b881612add565b600060208284031215612c4857600080fd5b815180151581146127b857600080fd5b600060208284031215612c6a57600080fd5b5051919050565b818103818111156119fb576119fb612bf0565b6000816000190483118215151615612c9e57612c9e612bf0565b500290565b600082612cc057634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060018201612ced57612ced612bf0565b5060010190565b6000815180845260005b81811015612d1a57602081850181015186830182015201612cfe565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006127b86020830184612cf4565b604081526000612d606040830185612cf4565b90508260208301529392505050565b604081526000612d826040830185612cf4565b90506001600160a01b0383166020830152939250505056fe28282828626c6f636b2e74696d657374616d70202d20757365724465706f736974735b5f6465706f73697449645d2e74696d654f664c61737455706461746529202a20757365724465706f736974735b5f6465706f73697449645d2e6465706f736974656429202a2072657761726473506572486f757229202f203336303029202f2031305f3030305f3030303a2025737374616b6572735b5f7374616b65725d2e74696d654f664c6173745570646174653a202573a164736f6c6343000810000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2119,
        "contract": "contracts/Staking.sol:Staking",
        "label": "authority",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAuthority)2035"
      },
      {
        "astId": 297,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_depositIds",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)199_storage"
      },
      {
        "astId": 323,
        "contract": "contracts/Staking.sol:Staking",
        "label": "withdrawalFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 326,
        "contract": "contracts/Staking.sol:Staking",
        "label": "withdrawalFeeDivisor",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 329,
        "contract": "contracts/Staking.sol:Staking",
        "label": "foundersRewardBoost",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 332,
        "contract": "contracts/Staking.sol:Staking",
        "label": "foundersRewardBoostDivisor",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 335,
        "contract": "contracts/Staking.sol:Staking",
        "label": "kNFTRewardBoost",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 338,
        "contract": "contracts/Staking.sol:Staking",
        "label": "kNFTRewardBoostDivisor",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 341,
        "contract": "contracts/Staking.sol:Staking",
        "label": "rewardsPerHour",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 344,
        "contract": "contracts/Staking.sol:Staking",
        "label": "minStake",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 349,
        "contract": "contracts/Staking.sol:Staking",
        "label": "compoundFreq",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 353,
        "contract": "contracts/Staking.sol:Staking",
        "label": "name",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 358,
        "contract": "contracts/Staking.sol:Staking",
        "label": "userDepositsIds",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 363,
        "contract": "contracts/Staking.sol:Staking",
        "label": "userDeposits",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(Staker)314_storage)"
      },
      {
        "astId": 366,
        "contract": "contracts/Staking.sol:Staking",
        "label": "konduxERC20",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(IERC20)77"
      },
      {
        "astId": 369,
        "contract": "contracts/Staking.sol:Staking",
        "label": "helixERC20",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(IHelix)2073"
      },
      {
        "astId": 372,
        "contract": "contracts/Staking.sol:Staking",
        "label": "konduxERC721Founders",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(IERC721)193"
      },
      {
        "astId": 375,
        "contract": "contracts/Staking.sol:Staking",
        "label": "konduxERC721kNFT",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IERC721)193"
      },
      {
        "astId": 378,
        "contract": "contracts/Staking.sol:Staking",
        "label": "treasury",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(ITreasury)2107"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(IAuthority)2035": {
        "encoding": "inplace",
        "label": "contract IAuthority",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721)193": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_contract(IHelix)2073": {
        "encoding": "inplace",
        "label": "contract IHelix",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)2107": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Staker)314_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Staking.Staker)",
        "numberOfBytes": "32",
        "value": "t_struct(Staker)314_storage"
      },
      "t_struct(Counter)199_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 198,
            "contract": "contracts/Staking.sol:Staking",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Staker)314_storage": {
        "encoding": "inplace",
        "label": "struct Staking.Staker",
        "members": [
          {
            "astId": 299,
            "contract": "contracts/Staking.sol:Staking",
            "label": "staker",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 301,
            "contract": "contracts/Staking.sol:Staking",
            "label": "deposited",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 303,
            "contract": "contracts/Staking.sol:Staking",
            "label": "redeemed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 305,
            "contract": "contracts/Staking.sol:Staking",
            "label": "timeOfLastUpdate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 307,
            "contract": "contracts/Staking.sol:Staking",
            "label": "lastDepositTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 309,
            "contract": "contracts/Staking.sol:Staking",
            "label": "unclaimedRewards",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 311,
            "contract": "contracts/Staking.sol:Staking",
            "label": "timelock",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 313,
            "contract": "contracts/Staking.sol:Staking",
            "label": "timelockCategory",
            "offset": 0,
            "slot": "7",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}