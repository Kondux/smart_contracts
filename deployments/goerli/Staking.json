{
  "address": "0xa214932de89ec1c93e86ceB1937FD522b7E85Bc8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authority",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_konduxERC20",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Compound",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "calculateRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compoundFreq",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "compoundRewardsTimer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_timer",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getDepositInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_stake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "konduxERC20",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsPerHour",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_compoundFreq",
          "type": "uint256"
        }
      ],
      "name": "setCompFreq",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minStake",
          "type": "uint256"
        }
      ],
      "name": "setMinStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardsPerHour",
          "type": "uint256"
        }
      ],
      "name": "setRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9529e3228004d6810e8d3602f2f9f1a64b45a4149e4009800c84a3187067ad4f",
  "receipt": {
    "to": null,
    "from": "0x9f5Ea5Af0368E1d6F685F07978c8A22b2Df7c78D",
    "contractAddress": "0xa214932de89ec1c93e86ceB1937FD522b7E85Bc8",
    "transactionIndex": 76,
    "gasUsed": "1057055",
    "logsBloom": "0x
    "blockHash": "0x6e3868480aadc2077545c99458f781e26c24bd1e09eb64511f56d75b7e9c15b0",
    "transactionHash": "0x9529e3228004d6810e8d3602f2f9f1a64b45a4149e4009800c84a3187067ad4f",
    "logs": [
      {
        "transactionIndex": 76,
        "blockNumber": 7672210,
        "transactionHash": "0x9529e3228004d6810e8d3602f2f9f1a64b45a4149e4009800c84a3187067ad4f",
        "address": "0xa214932de89ec1c93e86ceB1937FD522b7E85Bc8",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad"
        ],
        "data": "0x000000000000000000000000130025903ef25390bee8cc1a8049cca40f3f3c96",
        "logIndex": 236,
        "blockHash": "0x6e3868480aadc2077545c99458f781e26c24bd1e09eb64511f56d75b7e9c15b0"
      }
    ],
    "blockNumber": 7672210,
    "cumulativeGasUsed": "29825475",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x130025903Ef25390bEE8cC1a8049Cca40f3F3c96",
    "0x5B652FEEa0F83ECaADE83949535fa2B937bADf57"
  ],
  "numDeployments": 1,
  "solcInputHash": "b665482165c7999b0f19290497a409b3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_konduxERC20\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Compound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundFreq\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"compoundRewardsTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_timer\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getDepositInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"konduxERC20\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPerHour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_compoundFreq\",\"type\":\"uint256\"}],\"name\":\"setCompFreq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"}],\"name\":\"setMinStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsPerHour\",\"type\":\"uint256\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./types/AccessControlled.sol\\\";\\r\\n\\r\\ncontract Staking is AccessControlled {\\r\\n    // Staker info\\r\\n    struct Staker {\\r\\n        // The deposited tokens of the Staker\\r\\n        uint256 deposited;\\r\\n        // Last time of details update for Deposit\\r\\n        uint256 timeOfLastUpdate;\\r\\n        // Calculated, but unclaimed rewards. These are calculated each time\\r\\n        // a user writes to the contract.\\r\\n        uint256 unclaimedRewards;\\r\\n    }\\r\\n\\r\\n    // Rewards per hour. A fraction calculated as x/10.000.000 to get the percentage\\r\\n    uint256 public rewardsPerHour = 285; // 0.00285%/h or 25% APR\\r\\n\\r\\n    // Minimum amount to stake\\r\\n    uint256 public minStake = 10_000_000; // 10,000,000 wei\\r\\n\\r\\n    // Compounding frequency limit in seconds\\r\\n    uint256 public compoundFreq = 60 * 60 * 24; // 24 hours\\r\\n\\r\\n    // Mapping of address to Staker info\\r\\n    mapping(address => Staker) internal stakers;\\r\\n\\r\\n    // KonduxERC20 Contract\\r\\n    IERC20 public konduxERC20;\\r\\n\\r\\n    // Events\\r\\n    event Withdraw(address indexed staker, uint256 amount);\\r\\n    event Compound(address indexed staker, uint256 amount);\\r\\n    event Stake(address indexed staker, uint256 amount);\\r\\n    event Unstake(address indexed staker, uint256 amount);\\r\\n    event Reward(address indexed staker, uint256 amount);\\r\\n\\r\\n\\r\\n    // Constructor function\\r\\n    constructor(address _authority, address _konduxERC20) \\r\\n        AccessControlled(IAuthority(_authority)) {        \\r\\n            require(_konduxERC20 != address(0), \\\"Kondux ERC20 address is not set\\\");\\r\\n            konduxERC20 = IERC20(_konduxERC20);\\r\\n    }\\r\\n\\r\\n    // If address has no Staker struct, initiate one. If address already was a stake,\\r\\n    // calculate the rewards and add them to unclaimedRewards, reset the last time of\\r\\n    // deposit and then add _amount to the already deposited amount.\\r\\n    // Transfers the amount staked.\\r\\n    function deposit(uint256 _amount) public {\\r\\n        require(_amount >= minStake, \\\"Amount smaller than minimimum deposit\\\");\\r\\n        require(konduxERC20.balanceOf(msg.sender) >= _amount, \\\"Can't stake more than you own\\\");\\r\\n        if (stakers[msg.sender].deposited == 0) {\\r\\n            stakers[msg.sender].deposited = _amount;\\r\\n            stakers[msg.sender].timeOfLastUpdate = block.timestamp;\\r\\n            stakers[msg.sender].unclaimedRewards = 0;\\r\\n        } else {\\r\\n            uint256 rewards = calculateRewards(msg.sender);\\r\\n            stakers[msg.sender].unclaimedRewards += rewards;\\r\\n            stakers[msg.sender].deposited += _amount;\\r\\n            stakers[msg.sender].timeOfLastUpdate = block.timestamp;\\r\\n        }\\r\\n        konduxERC20.transferFrom(msg.sender, authority.vault(), _amount);\\r\\n        emit Stake(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    // Compound the rewards and reset the last time of update for Deposit info\\r\\n    function stakeRewards() public {\\r\\n        require(stakers[msg.sender].deposited > 0, \\\"You have no deposit\\\");\\r\\n        require(compoundRewardsTimer(msg.sender) == 0, \\\"Tried to compound rewards too soon\\\");\\r\\n        uint256 rewards = calculateRewards(msg.sender) + stakers[msg.sender].unclaimedRewards;\\r\\n        stakers[msg.sender].unclaimedRewards = 0;\\r\\n        stakers[msg.sender].deposited += rewards;\\r\\n        stakers[msg.sender].timeOfLastUpdate = block.timestamp;\\r\\n        emit Compound(msg.sender, rewards);\\r\\n    }\\r\\n\\r\\n    // Transfer rewards to msg.sender\\r\\n    function claimRewards() public {\\r\\n        uint256 rewards = calculateRewards(msg.sender) + stakers[msg.sender].unclaimedRewards;\\r\\n        require(rewards > 0, \\\"You have no rewards\\\");\\r\\n        stakers[msg.sender].unclaimedRewards = 0;\\r\\n        stakers[msg.sender].timeOfLastUpdate = block.timestamp;\\r\\n        konduxERC20.transferFrom(authority.vault(), msg.sender, rewards);\\r\\n        emit Reward(msg.sender, rewards);\\r\\n    }\\r\\n\\r\\n    // Withdraw specified amount of staked tokens\\r\\n    function withdraw(uint256 _amount) public  {\\r\\n        require(stakers[msg.sender].deposited >= _amount, \\\"Can't withdraw more than you have\\\");\\r\\n        uint256 _rewards = calculateRewards(msg.sender);\\r\\n        stakers[msg.sender].deposited -= _amount;\\r\\n        stakers[msg.sender].timeOfLastUpdate = block.timestamp;\\r\\n        stakers[msg.sender].unclaimedRewards = _rewards;\\r\\n        konduxERC20.transferFrom(authority.vault(), msg.sender, _amount);\\r\\n        emit Withdraw(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    // Withdraw all stake and rewards and mints them to the msg.sender\\r\\n    function withdrawAll() public  {\\r\\n        require(stakers[msg.sender].deposited > 0, \\\"You have no deposit\\\");\\r\\n        uint256 _rewards = calculateRewards(msg.sender) + stakers[msg.sender].unclaimedRewards;\\r\\n        uint256 _deposit = stakers[msg.sender].deposited;\\r\\n        stakers[msg.sender].deposited = 0;\\r\\n        stakers[msg.sender].timeOfLastUpdate = 0;\\r\\n        uint256 _amount = _rewards + _deposit;\\r\\n        konduxERC20.transferFrom(authority.vault(), msg.sender, _amount);\\r\\n        emit Withdraw(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    // Function useful for fron-end that returns user stake and rewards by address\\r\\n    function getDepositInfo(address _user) public view returns (uint256 _stake, uint256 _rewards) {\\r\\n        _stake = stakers[_user].deposited;\\r\\n        _rewards = calculateRewards(_user) + stakers[msg.sender].unclaimedRewards;\\r\\n        return (_stake, _rewards);\\r\\n    }\\r\\n\\r\\n    // Utility function that returns the timer for restaking rewards\\r\\n    function compoundRewardsTimer(address _user) public view returns (uint256 _timer) {\\r\\n        if (stakers[_user].timeOfLastUpdate + compoundFreq <= block.timestamp) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return (stakers[_user].timeOfLastUpdate + compoundFreq) - block.timestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Calculate the rewards since the last update on Deposit info\\r\\n    function calculateRewards(address _staker) public view returns (uint256 rewards) {\\r\\n        return (((((block.timestamp - stakers[_staker].timeOfLastUpdate) * \\r\\n            stakers[_staker].deposited) * rewardsPerHour) / 3600) / 10000000); // blocks * staked * rewards/hour / 3600 / 10^7\\r\\n    }\\r\\n\\r\\n    // Functions for modifying  staking mechanism variables:\\r\\n\\r\\n    // Set rewards per hour as x/10.000.000 (Example: 100.000 = 1%)\\r\\n    function setRewards(uint256 _rewardsPerHour) public onlyGovernor {\\r\\n        rewardsPerHour = _rewardsPerHour;\\r\\n    }\\r\\n\\r\\n    // Set the minimum amount for staking in wei\\r\\n    function setMinStake(uint256 _minStake) public onlyGovernor {\\r\\n        minStake = _minStake;\\r\\n    }\\r\\n\\r\\n    // Set the minimum time that has to pass for a user to be able to restake rewards\\r\\n    function setCompFreq(uint256 _compoundFreq) public onlyGovernor {\\r\\n        compoundFreq = _compoundFreq;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x070aafef4b3d3c3785342f2335ff7dfb0f27492cdff2bb474455ad3d12b98e75\",\"license\":\"MIT\"},\"contracts/interfaces/IAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\ninterface IAuthority {\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event RolePushed(address indexed account, bytes32 _role);\\r\\n\\r\\n    event GovernorPulled(address indexed from, address indexed to);\\r\\n    event GuardianPulled(address indexed from, address indexed to);\\r\\n    event PolicyPulled(address indexed from, address indexed to);\\r\\n    event VaultPulled(address indexed from, address indexed to);\\r\\n\\r\\n    /* ========== VIEW ========== */\\r\\n\\r\\n    function governor() external view returns (address);\\r\\n\\r\\n    function guardian() external view returns (address);\\r\\n\\r\\n    function policy() external view returns (address);\\r\\n\\r\\n    function vault() external view returns (address);\\r\\n\\r\\n    function roles(address _addr) external view returns (bytes32);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x887a7eb2eeab95bba651b3d65b3d6a4695301acb16f27722524021afa1cf97d5\",\"license\":\"AGPL-3.0\"},\"contracts/types/AccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/IAuthority.sol\\\";\\r\\n\\r\\n/// @dev Reasoning for this contract = modifiers literaly copy code\\r\\n/// instead of pointing towards the logic to execute. Over many\\r\\n/// functions this bloats contract size unnecessarily.\\r\\n/// imho modifiers are a meme.\\r\\nabstract contract AccessControlled {\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event AuthorityUpdated(IAuthority authority);\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    IAuthority public authority;\\r\\n\\r\\n    /* ========== Constructor ========== */\\r\\n\\r\\n    constructor(IAuthority _authority) {\\r\\n        require(address(_authority) != address(0), \\\"Authority cannot be zero address\\\");\\r\\n        authority = _authority;\\r\\n        emit AuthorityUpdated(_authority);\\r\\n    }\\r\\n\\r\\n    /* ========== \\\"MODIFIERS\\\" ========== */\\r\\n\\r\\n    modifier onlyGovernor {\\r\\n        _onlyGovernor();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGuardian {\\r\\n        _onlyGuardian();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPolicy {\\r\\n        _onlyPolicy();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyVault {\\r\\n        _onlyVault();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyRole(bytes32 _role){\\r\\n        _onlyRole(_role);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========== GOV ONLY ========== */\\r\\n\\r\\n    function initializeAuthority(IAuthority _newAuthority) internal {\\r\\n        require(authority == IAuthority(address(0)), \\\"AUTHORITY_INITIALIZED\\\");\\r\\n        authority = _newAuthority;\\r\\n        emit AuthorityUpdated(_newAuthority);\\r\\n    }\\r\\n\\r\\n    function setAuthority(IAuthority _newAuthority) external {\\r\\n        _onlyGovernor();\\r\\n        authority = _newAuthority;\\r\\n        emit AuthorityUpdated(_newAuthority);\\r\\n    }\\r\\n\\r\\n    /* ========== INTERNAL CHECKS ========== */\\r\\n\\r\\n    function _onlyGovernor() internal view {\\r\\n        require(msg.sender == authority.governor(), \\\"UNAUTHORIZED\\\");\\r\\n    }\\r\\n\\r\\n    function _onlyGuardian() internal view {\\r\\n        require(msg.sender == authority.guardian(), \\\"UNAUTHORIZED\\\");\\r\\n    }\\r\\n\\r\\n    function _onlyPolicy() internal view {\\r\\n        require(msg.sender == authority.policy(), \\\"UNAUTHORIZED\\\");        \\r\\n    }\\r\\n\\r\\n    function _onlyVault() internal view {\\r\\n        require(msg.sender == authority.vault(), \\\"UNAUTHORIZED\\\");                \\r\\n    }\\r\\n\\r\\n    function _onlyRole(bytes32 _role) internal view {\\r\\n        require(authority.roles(msg.sender) == _role, \\\"UNAUTHORIZED\\\");\\r\\n    }\\r\\n\\r\\n  \\r\\n}\\r\\n\",\"keccak256\":\"0x69a30ff5614ccb42137005d86252f6a9009c36785ab7a3c25e2c49a24ba5af5e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405261011d600155629896806002556201518060035534801561002457600080fd5b506040516111cf3803806111cf83398101604081905261004391610189565b816001600160a01b03811661009f5760405162461bcd60e51b815260206004820181905260248201527f417574686f726974792063616e6e6f74206265207a65726f206164647265737360448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a1506001600160a01b0381166101475760405162461bcd60e51b815260206004820152601f60248201527f4b6f6e6475782045524332302061646472657373206973206e6f7420736574006044820152606401610096565b600580546001600160a01b0319166001600160a01b0392909216919091179055506101bc565b80516001600160a01b038116811461018457600080fd5b919050565b6000806040838503121561019c57600080fd5b6101a58361016d565b91506101b36020840161016d565b90509250929050565b611004806101cb6000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c80637a9e5e4b116100b2578063b6b55f2511610081578063c11479ab11610066578063c11479ab14610238578063c7a29c6f1461024b578063cf9d0b5f1461025e57600080fd5b8063b6b55f2514610212578063bf7e214f1461022557600080fd5b80637a9e5e4b146101db578063853828b6146101ee5780638c80fd90146101f65780638e7271fa1461020957600080fd5b8063372500ab116100ee578063372500ab1461018f578063375b3c0a146101975780635287ce12146101a057806364ab8675146101c857600080fd5b806312e0a053146101205780631a121d54146101465780632604b7041461014f5780632e1a7d4d1461017a575b600080fd5b61013361012e366004610ee5565b610266565b6040519081526020015b60405180910390f35b61013360035481565b600554610162906001600160a01b031681565b6040516001600160a01b03909116815260200161013d565b61018d610188366004610f09565b6102da565b005b61018d6104be565b61013360025481565b6101b36101ae366004610ee5565b61067c565b6040805192835260208301919091520161013d565b6101336101d6366004610ee5565b6106bd565b61018d6101e9366004610ee5565b61071e565b61018d610792565b61018d610204366004610f09565b61096f565b61013360015481565b61018d610220366004610f09565b61097c565b600054610162906001600160a01b031681565b61018d610246366004610f09565b610c7f565b61018d610259366004610f09565b610c8c565b61018d610c99565b6003546001600160a01b038216600090815260046020526040812060010154909142916102939190610f38565b116102a057506000919050565b6003546001600160a01b03831660009081526004602052604090206001015442916102ca91610f38565b6102d49190610f4b565b92915050565b336000908152600460205260409020548111156103485760405162461bcd60e51b815260206004820152602160248201527f43616e2774207769746864726177206d6f7265207468616e20796f75206861766044820152606560f81b60648201526084015b60405180910390fd5b6000610353336106bd565b33600090815260046020526040812080549293508492909190610377908490610f4b565b90915550503360009081526004602081815260408084204260018201556002018590556005549354815163fbfa77cf60e01b815291516001600160a01b03958616956323b872dd9592169363fbfa77cf9380840193919291908290030181865afa1580156103e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040d9190610f5e565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152336024820152604481018590526064016020604051808303816000875af1158015610460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104849190610f7b565b5060405182815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a25050565b3360008181526004602052604081206002015490916104dc906106bd565b6104e69190610f38565b9050600081116105385760405162461bcd60e51b815260206004820152601360248201527f596f752068617665206e6f207265776172647300000000000000000000000000604482015260640161033f565b33600090815260046020818152604080842060028101859055426001909101556005549354815163fbfa77cf60e01b815291516001600160a01b03958616956323b872dd9592169363fbfa77cf9380840193919291908290030181865afa1580156105a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cb9190610f5e565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152336024820152604481018490526064016020604051808303816000875af115801561061e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106429190610f7b565b5060405181815233907f619caafabdd75649b302ba8419e48cccf64f37f1983ac4727cfb38b57703ffc9906020015b60405180910390a250565b6001600160a01b03811660009081526004602052604080822054338352908220600201549091906106ac846106bd565b6106b69190610f38565b9050915091565b600180546001600160a01b0383166000908152600460205260408120805493015490926298968092610e10929091906106f69042610f4b565b6107009190610f9d565b61070a9190610f9d565b6107149190610fbc565b6102d49190610fbc565b610726610df6565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a150565b336000908152600460205260409020546107ee5760405162461bcd60e51b815260206004820152601360248201527f596f752068617665206e6f206465706f73697400000000000000000000000000604482015260640161033f565b33600081815260046020526040812060020154909161080c906106bd565b6108169190610f38565b3360009081526004602052604081208054828255600190910182905591925061083f8284610f38565b6005546000546040805163fbfa77cf60e01b815290519394506001600160a01b03928316936323b872dd939092169163fbfa77cf916004808201926020929091908290030181865afa158015610899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bd9190610f5e565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152336024820152604481018490526064016020604051808303816000875af1158015610910573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109349190610f7b565b5060405181815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a2505050565b610977610df6565b600255565b6002548110156109f45760405162461bcd60e51b815260206004820152602560248201527f416d6f756e7420736d616c6c6572207468616e206d696e696d696d756d20646560448201527f706f736974000000000000000000000000000000000000000000000000000000606482015260840161033f565b6005546040516370a0823160e01b815233600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa158015610a3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a609190610fde565b1015610aae5760405162461bcd60e51b815260206004820152601d60248201527f43616e2774207374616b65206d6f7265207468616e20796f75206f776e000000604482015260640161033f565b336000908152600460205260408120549003610ae55733600090815260046020526040812082815542600182015560020155610b58565b6000610af0336106bd565b33600090815260046020526040812060020180549293508392909190610b17908490610f38565b90915550503360009081526004602052604081208054849290610b3b908490610f38565b909155505033600090815260046020526040902042600190910155505b6005546000546040805163fbfa77cf60e01b815290516001600160a01b03938416936323b872dd93339391169163fbfa77cf916004808201926020929091908290030181865afa158015610bb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd49190610f5e565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018490526064016020604051808303816000875af1158015610c28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4c9190610f7b565b5060405181815233907febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a90602001610671565b610c87610df6565b600355565b610c94610df6565b600155565b33600090815260046020526040902054610cf55760405162461bcd60e51b815260206004820152601360248201527f596f752068617665206e6f206465706f73697400000000000000000000000000604482015260640161033f565b610cfe33610266565b15610d565760405162461bcd60e51b815260206004820152602260248201527f547269656420746f20636f6d706f756e64207265776172647320746f6f20736f60448201526137b760f11b606482015260840161033f565b336000818152600460205260408120600201549091610d74906106bd565b610d7e9190610f38565b3360009081526004602052604081206002810182905580549293508392909190610da9908490610f38565b9091555050336000818152600460205260409081902042600190910155517f169f1815ebdea059aac3bb00ec9a9594c7a5ffcb64a17e8392b5d84909a14556906106719084815260200190565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6b9190610f5e565b6001600160a01b0316336001600160a01b031614610ecb5760405162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a45440000000000000000000000000000000000000000604482015260640161033f565b565b6001600160a01b0381168114610ee257600080fd5b50565b600060208284031215610ef757600080fd5b8135610f0281610ecd565b9392505050565b600060208284031215610f1b57600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156102d4576102d4610f22565b818103818111156102d4576102d4610f22565b600060208284031215610f7057600080fd5b8151610f0281610ecd565b600060208284031215610f8d57600080fd5b81518015158114610f0257600080fd5b6000816000190483118215151615610fb757610fb7610f22565b500290565b600082610fd957634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610ff057600080fd5b505191905056fea164736f6c6343000810000a",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8697,
        "contract": "contracts/Staking.sol:Staking",
        "label": "authority",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAuthority)8266"
      },
      {
        "astId": 7232,
        "contract": "contracts/Staking.sol:Staking",
        "label": "rewardsPerHour",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7235,
        "contract": "contracts/Staking.sol:Staking",
        "label": "minStake",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 7242,
        "contract": "contracts/Staking.sol:Staking",
        "label": "compoundFreq",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7247,
        "contract": "contracts/Staking.sol:Staking",
        "label": "stakers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(Staker)7229_storage)"
      },
      {
        "astId": 7250,
        "contract": "contracts/Staking.sol:Staking",
        "label": "konduxERC20",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)2304"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IAuthority)8266": {
        "encoding": "inplace",
        "label": "contract IAuthority",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2304": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Staker)7229_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Staking.Staker)",
        "numberOfBytes": "32",
        "value": "t_struct(Staker)7229_storage"
      },
      "t_struct(Staker)7229_storage": {
        "encoding": "inplace",
        "label": "struct Staking.Staker",
        "members": [
          {
            "astId": 7224,
            "contract": "contracts/Staking.sol:Staking",
            "label": "deposited",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7226,
            "contract": "contracts/Staking.sol:Staking",
            "label": "timeOfLastUpdate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7228,
            "contract": "contracts/Staking.sol:Staking",
            "label": "unclaimedRewards",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}