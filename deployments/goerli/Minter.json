{
  "address": "0x4499976F83d476F4042D0be4D9636ca3f5613371",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authority",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_kondux",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kondux",
      "outputs": [
        {
          "internalType": "contract IKondux",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "root",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "setRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "contract ITreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unsafeMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "whitelistMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x90f5f6cf7f530a586a6e224767cf7690d38db92ea06c500ebd03800f8caeeebf",
  "receipt": {
    "to": null,
    "from": "0x9f5Ea5Af0368E1d6F685F07978c8A22b2Df7c78D",
    "contractAddress": "0x4499976F83d476F4042D0be4D9636ca3f5613371",
    "transactionIndex": 82,
    "gasUsed": "539927",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000",
    "blockHash": "0x1bfbf5bb10d0881a40f67397e05548e00224ea471a88fe2d71a54e25af706d1f",
    "transactionHash": "0x90f5f6cf7f530a586a6e224767cf7690d38db92ea06c500ebd03800f8caeeebf",
    "logs": [
      {
        "transactionIndex": 82,
        "blockNumber": 7672205,
        "transactionHash": "0x90f5f6cf7f530a586a6e224767cf7690d38db92ea06c500ebd03800f8caeeebf",
        "address": "0x4499976F83d476F4042D0be4D9636ca3f5613371",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad"
        ],
        "data": "0x000000000000000000000000130025903ef25390bee8cc1a8049cca40f3f3c96",
        "logIndex": 251,
        "blockHash": "0x1bfbf5bb10d0881a40f67397e05548e00224ea471a88fe2d71a54e25af706d1f"
      }
    ],
    "blockNumber": 7672205,
    "cumulativeGasUsed": "27404760",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x130025903Ef25390bEE8cC1a8049Cca40f3F3c96",
    "0x2Ed5208970be3169CfCbaBf104E362dfd3706BF7",
    "0x30E869cbA9636B649784a91345EE3D4c1EB08D2c"
  ],
  "numDeployments": 1,
  "solcInputHash": "b665482165c7999b0f19290497a409b3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_kondux\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kondux\",\"outputs\":[{\"internalType\":\"contract IKondux\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"setRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unsafeMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"whitelistMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Minter.sol\":\"Minter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Minter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport \\\"./interfaces/IKondux.sol\\\";\\r\\nimport \\\"./interfaces/ITreasury.sol\\\";\\r\\nimport \\\"./types/AccessControlled.sol\\\";\\r\\n\\r\\ncontract Minter is AccessControlled {\\r\\n\\r\\n    uint256 public price;\\r\\n    bytes32 public root;\\r\\n\\r\\n    IKondux public immutable kondux;\\r\\n    ITreasury public immutable treasury;\\r\\n\\r\\n    constructor(address _authority, address _kondux, address _vault) \\r\\n        AccessControlled(IAuthority(_authority)) {        \\r\\n            require(_kondux != address(0), \\\"Kondux address is not set\\\");\\r\\n            kondux = IKondux(_kondux);\\r\\n            treasury = ITreasury(_vault);\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        treasury.depositEther{ value: msg.value }();\\r\\n        _mint();\\r\\n    }\\r\\n\\r\\n    function unsafeMint() public returns (uint256) {\\r\\n        uint256 id = _unsafeMint();\\r\\n        return id;\\r\\n    }        \\r\\n\\r\\n    function setPrice(uint256 _price) public onlyGovernor {\\r\\n        price = _price;\\r\\n    }\\r\\n\\r\\n    function whitelistMint(bytes32[] calldata _merkleProof) public returns (uint256) {\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\\r\\n        require(MerkleProof.verify(_merkleProof, root, leaf), \\\"Incorrect proof\\\");\\r\\n        return _unsafeMint();\\r\\n    }\\r\\n\\r\\n    function setRoot(bytes32 _root) public onlyGovernor {\\r\\n        root = _root;\\r\\n    }\\r\\n\\r\\n    // ** INTERNAL FUNCTIONS **\\r\\n\\r\\n    function _mint() internal {\\r\\n        require(msg.value >= price, \\\"Not enought ether\\\");\\r\\n        //transfer ether to vault\\r\\n        // treasury.deposit(msg.value, address(0));\\r\\n        // treasury.depositEther(msg.value);\\r\\n        kondux.automaticMint(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _unsafeMint() internal returns (uint256) {\\r\\n        uint256 id = kondux.automaticMint(msg.sender);\\r\\n        return id;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x6cafffc85929add42052847dc0c017dcbe888f9b3c6d58546f4f0031d5a7e69b\",\"license\":\"MIT\"},\"contracts/interfaces/IAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\ninterface IAuthority {\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event RolePushed(address indexed account, bytes32 _role);\\r\\n\\r\\n    event GovernorPulled(address indexed from, address indexed to);\\r\\n    event GuardianPulled(address indexed from, address indexed to);\\r\\n    event PolicyPulled(address indexed from, address indexed to);\\r\\n    event VaultPulled(address indexed from, address indexed to);\\r\\n\\r\\n    /* ========== VIEW ========== */\\r\\n\\r\\n    function governor() external view returns (address);\\r\\n\\r\\n    function guardian() external view returns (address);\\r\\n\\r\\n    function policy() external view returns (address);\\r\\n\\r\\n    function vault() external view returns (address);\\r\\n\\r\\n    function roles(address _addr) external view returns (bytes32);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x887a7eb2eeab95bba651b3d65b3d6a4695301acb16f27722524021afa1cf97d5\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IKondux.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ninterface IKondux {\\r\\n\\r\\n    function changeDenominator(uint96 _denominator) external returns (uint96);\\r\\n\\r\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\\r\\n\\r\\n    function setTokenRoyalty(uint256 tokenId,address receiver,uint96 feeNumerator) external;\\r\\n\\r\\n    function setBaseURI(string memory _newURI) external returns (string memory);\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    function safeMint(address to, uint256 dna) external;\\r\\n\\r\\n    function setDna(uint256 _tokenID, uint256 _dna) external;\\r\\n\\r\\n    function setMinter(address _minter) external;\\r\\n\\r\\n    function automaticMint(address to) external returns (uint256);\\r\\n\\r\\n}\",\"keccak256\":\"0x5aa45c5529befc7187d6e0ffa6e3424165365657a1867441054d5511f1699b18\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\ninterface ITreasury {\\r\\n    function deposit(\\r\\n        uint256 _amount,\\r\\n        address _token\\r\\n    ) external;\\r\\n\\r\\n    function depositEther() external payable;\\r\\n\\r\\n    function withdraw(\\r\\n        uint256 _amount,\\r\\n        address _token\\r\\n    ) external;\\r\\n\\r\\n    function withdrawEther(\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n}\",\"keccak256\":\"0x8c67fa2207cb873b64e701fefb954747a180a8d7e6a98d229f77a2054ea5d062\",\"license\":\"MIT\"},\"contracts/types/AccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/IAuthority.sol\\\";\\r\\n\\r\\n/// @dev Reasoning for this contract = modifiers literaly copy code\\r\\n/// instead of pointing towards the logic to execute. Over many\\r\\n/// functions this bloats contract size unnecessarily.\\r\\n/// imho modifiers are a meme.\\r\\nabstract contract AccessControlled {\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event AuthorityUpdated(IAuthority authority);\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    IAuthority public authority;\\r\\n\\r\\n    /* ========== Constructor ========== */\\r\\n\\r\\n    constructor(IAuthority _authority) {\\r\\n        require(address(_authority) != address(0), \\\"Authority cannot be zero address\\\");\\r\\n        authority = _authority;\\r\\n        emit AuthorityUpdated(_authority);\\r\\n    }\\r\\n\\r\\n    /* ========== \\\"MODIFIERS\\\" ========== */\\r\\n\\r\\n    modifier onlyGovernor {\\r\\n        _onlyGovernor();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGuardian {\\r\\n        _onlyGuardian();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPolicy {\\r\\n        _onlyPolicy();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyVault {\\r\\n        _onlyVault();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyRole(bytes32 _role){\\r\\n        _onlyRole(_role);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========== GOV ONLY ========== */\\r\\n\\r\\n    function initializeAuthority(IAuthority _newAuthority) internal {\\r\\n        require(authority == IAuthority(address(0)), \\\"AUTHORITY_INITIALIZED\\\");\\r\\n        authority = _newAuthority;\\r\\n        emit AuthorityUpdated(_newAuthority);\\r\\n    }\\r\\n\\r\\n    function setAuthority(IAuthority _newAuthority) external {\\r\\n        _onlyGovernor();\\r\\n        authority = _newAuthority;\\r\\n        emit AuthorityUpdated(_newAuthority);\\r\\n    }\\r\\n\\r\\n    /* ========== INTERNAL CHECKS ========== */\\r\\n\\r\\n    function _onlyGovernor() internal view {\\r\\n        require(msg.sender == authority.governor(), \\\"UNAUTHORIZED\\\");\\r\\n    }\\r\\n\\r\\n    function _onlyGuardian() internal view {\\r\\n        require(msg.sender == authority.guardian(), \\\"UNAUTHORIZED\\\");\\r\\n    }\\r\\n\\r\\n    function _onlyPolicy() internal view {\\r\\n        require(msg.sender == authority.policy(), \\\"UNAUTHORIZED\\\");        \\r\\n    }\\r\\n\\r\\n    function _onlyVault() internal view {\\r\\n        require(msg.sender == authority.vault(), \\\"UNAUTHORIZED\\\");                \\r\\n    }\\r\\n\\r\\n    function _onlyRole(bytes32 _role) internal view {\\r\\n        require(authority.roles(msg.sender) == _role, \\\"UNAUTHORIZED\\\");\\r\\n    }\\r\\n\\r\\n  \\r\\n}\\r\\n\",\"keccak256\":\"0x69a30ff5614ccb42137005d86252f6a9009c36785ab7a3c25e2c49a24ba5af5e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610a2a380380610a2a83398101604081905261002f91610167565b826001600160a01b03811661008b5760405162461bcd60e51b815260206004820181905260248201527f417574686f726974792063616e6e6f74206265207a65726f206164647265737360448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a1506001600160a01b0382166101335760405162461bcd60e51b815260206004820152601960248201527f4b6f6e6475782061646472657373206973206e6f7420736574000000000000006044820152606401610082565b6001600160a01b039182166080521660a052506101aa565b80516001600160a01b038116811461016257600080fd5b919050565b60008060006060848603121561017c57600080fd5b6101858461014b565b92506101936020850161014b565b91506101a16040850161014b565b90509250925092565b60805160a0516108476101e36000396000818160bc01526101820152600081816101ce0152818161031d015261054401526108476000f3fe6080604052600436106100b55760003560e01c806391b7f5ed11610069578063bf7e214f1161004e578063bf7e214f1461025b578063dab5f3401461027b578063ebf0c7171461029b57600080fd5b806391b7f5ed14610225578063a035b1fe1461024557600080fd5b806369434b711161009a57806369434b71146101bc5780637a9e5e4b146101f057806388c91f121461021057600080fd5b8063372f657c1461013d57806361d027b31461017057600080fd5b36610138577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166398ea5fca346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561011557600080fd5b505af1158015610129573d6000803e3d6000fd5b50505050506101366102b1565b005b600080fd5b34801561014957600080fd5b5061015d610158366004610707565b610395565b6040519081526020015b60405180910390f35b34801561017c57600080fd5b506101a47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610167565b3480156101c857600080fd5b506101a47f000000000000000000000000000000000000000000000000000000000000000081565b3480156101fc57600080fd5b5061013661020b366004610791565b61046d565b34801561021c57600080fd5b5061015d6104e1565b34801561023157600080fd5b506101366102403660046107ae565b6104f2565b34801561025157600080fd5b5061015d60015481565b34801561026757600080fd5b506000546101a4906001600160a01b031681565b34801561028757600080fd5b506101366102963660046107ae565b6104ff565b3480156102a757600080fd5b5061015d60025481565b6001543410156103085760405162461bcd60e51b815260206004820152601160248201527f4e6f7420656e6f7567687420657468657200000000000000000000000000000060448201526064015b60405180910390fd5b604051631bfc324f60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906337f8649e906024016020604051808303816000875af115801561036e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039291906107c7565b50565b6040516bffffffffffffffffffffffff193360601b166020820152600090819060340160405160208183030381529060405280519060200120905061041184848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050600254915084905061050c565b61045d5760405162461bcd60e51b815260206004820152600f60248201527f496e636f72726563742070726f6f66000000000000000000000000000000000060448201526064016102ff565b610465610522565b949350505050565b6104756105b1565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a150565b6000806104ec610522565b92915050565b6104fa6105b1565b600155565b6105076105b1565b600255565b6000826105198584610688565b14949350505050565b604051631bfc324f60e11b815233600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906337f8649e906024016020604051808303816000875af115801561058d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ec91906107c7565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610602573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062691906107e0565b6001600160a01b0316336001600160a01b0316146106865760405162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064016102ff565b565b600081815b84518110156106cd576106b9828683815181106106ac576106ac6107fd565b60200260200101516106d5565b9150806106c581610813565b91505061068d565b509392505050565b60008183106106f1576000828152602084905260409020610700565b60008381526020839052604090205b9392505050565b6000806020838503121561071a57600080fd5b823567ffffffffffffffff8082111561073257600080fd5b818501915085601f83011261074657600080fd5b81358181111561075557600080fd5b8660208260051b850101111561076a57600080fd5b60209290920196919550909350505050565b6001600160a01b038116811461039257600080fd5b6000602082840312156107a357600080fd5b81356107008161077c565b6000602082840312156107c057600080fd5b5035919050565b6000602082840312156107d957600080fd5b5051919050565b6000602082840312156107f257600080fd5b81516107008161077c565b634e487b7160e01b600052603260045260246000fd5b60006001820161083357634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000810000a",
  "deployedBytecode": "0x6080604052600436106100b55760003560e01c806391b7f5ed11610069578063bf7e214f1161004e578063bf7e214f1461025b578063dab5f3401461027b578063ebf0c7171461029b57600080fd5b806391b7f5ed14610225578063a035b1fe1461024557600080fd5b806369434b711161009a57806369434b71146101bc5780637a9e5e4b146101f057806388c91f121461021057600080fd5b8063372f657c1461013d57806361d027b31461017057600080fd5b36610138577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166398ea5fca346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561011557600080fd5b505af1158015610129573d6000803e3d6000fd5b50505050506101366102b1565b005b600080fd5b34801561014957600080fd5b5061015d610158366004610707565b610395565b6040519081526020015b60405180910390f35b34801561017c57600080fd5b506101a47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610167565b3480156101c857600080fd5b506101a47f000000000000000000000000000000000000000000000000000000000000000081565b3480156101fc57600080fd5b5061013661020b366004610791565b61046d565b34801561021c57600080fd5b5061015d6104e1565b34801561023157600080fd5b506101366102403660046107ae565b6104f2565b34801561025157600080fd5b5061015d60015481565b34801561026757600080fd5b506000546101a4906001600160a01b031681565b34801561028757600080fd5b506101366102963660046107ae565b6104ff565b3480156102a757600080fd5b5061015d60025481565b6001543410156103085760405162461bcd60e51b815260206004820152601160248201527f4e6f7420656e6f7567687420657468657200000000000000000000000000000060448201526064015b60405180910390fd5b604051631bfc324f60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906337f8649e906024016020604051808303816000875af115801561036e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039291906107c7565b50565b6040516bffffffffffffffffffffffff193360601b166020820152600090819060340160405160208183030381529060405280519060200120905061041184848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050600254915084905061050c565b61045d5760405162461bcd60e51b815260206004820152600f60248201527f496e636f72726563742070726f6f66000000000000000000000000000000000060448201526064016102ff565b610465610522565b949350505050565b6104756105b1565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a150565b6000806104ec610522565b92915050565b6104fa6105b1565b600155565b6105076105b1565b600255565b6000826105198584610688565b14949350505050565b604051631bfc324f60e11b815233600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906337f8649e906024016020604051808303816000875af115801561058d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ec91906107c7565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610602573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062691906107e0565b6001600160a01b0316336001600160a01b0316146106865760405162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064016102ff565b565b600081815b84518110156106cd576106b9828683815181106106ac576106ac6107fd565b60200260200101516106d5565b9150806106c581610813565b91505061068d565b509392505050565b60008183106106f1576000828152602084905260409020610700565b60008381526020839052604090205b9392505050565b6000806020838503121561071a57600080fd5b823567ffffffffffffffff8082111561073257600080fd5b818501915085601f83011261074657600080fd5b81358181111561075557600080fd5b8660208260051b850101111561076a57600080fd5b60209290920196919550909350505050565b6001600160a01b038116811461039257600080fd5b6000602082840312156107a357600080fd5b81356107008161077c565b6000602082840312156107c057600080fd5b5035919050565b6000602082840312156107d957600080fd5b5051919050565b6000602082840312156107f257600080fd5b81516107008161077c565b634e487b7160e01b600052603260045260246000fd5b60006001820161083357634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000810000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8697,
        "contract": "contracts/Minter.sol:Minter",
        "label": "authority",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAuthority)8266"
      },
      {
        "astId": 6933,
        "contract": "contracts/Minter.sol:Minter",
        "label": "price",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6935,
        "contract": "contracts/Minter.sol:Minter",
        "label": "root",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAuthority)8266": {
        "encoding": "inplace",
        "label": "contract IAuthority",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}