{
  "address": "0xb0f81E49c3a80409138A76C6Ba746C09b99d6b07",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authority",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_kondux",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "UNAUTHORIZED",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kondux",
      "outputs": [
        {
          "internalType": "contract IKondux",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "root",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "setRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "contract ITreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unsafeMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "whitelistMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xcda463467ce4c10376214cacbea78f7faf3750cef1ea22d77adc29db30859c92",
  "receipt": {
    "to": null,
    "from": "0x9f5Ea5Af0368E1d6F685F07978c8A22b2Df7c78D",
    "contractAddress": "0xb0f81E49c3a80409138A76C6Ba746C09b99d6b07",
    "transactionIndex": 17,
    "gasUsed": "566283",
    "logsBloom": "0x
    "blockHash": "0x62ecbeaf1756817d3abf3b47f6956f7799ffd8f71b9f9887dcda89168408539a",
    "transactionHash": "0xcda463467ce4c10376214cacbea78f7faf3750cef1ea22d77adc29db30859c92",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 10824171,
        "transactionHash": "0xcda463467ce4c10376214cacbea78f7faf3750cef1ea22d77adc29db30859c92",
        "address": "0xb0f81E49c3a80409138A76C6Ba746C09b99d6b07",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad"
        ],
        "data": "0x0000000000000000000000005f0a0a346edf4e624f39f6ee49cac9cc59378de9",
        "logIndex": 26,
        "blockHash": "0x62ecbeaf1756817d3abf3b47f6956f7799ffd8f71b9f9887dcda89168408539a"
      }
    ],
    "blockNumber": 10824171,
    "cumulativeGasUsed": "2242724",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5F0a0a346edF4E624F39F6ee49cac9CC59378de9",
    "0x73f4a261197F0d4cBC2fc349e18f2583cCCC032a",
    "0x44061758CFEDd221A3aE326fE9D2F2B4244bCbC6"
  ],
  "numDeployments": 1,
  "solcInputHash": "5d0bd4a759ef2838978d7a83d64a42c0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_kondux\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"UNAUTHORIZED\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kondux\",\"outputs\":[{\"internalType\":\"contract IKondux\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"setRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unsafeMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"whitelistMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Minter.sol\":\"Minter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa504ac17eb0298dcdf5733ce24021b4914f035b97f4400b92827341d3facb3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Minter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport \\\"./interfaces/IKondux.sol\\\";\\r\\nimport \\\"./interfaces/ITreasury.sol\\\";\\r\\nimport \\\"./types/AccessControlled.sol\\\";\\r\\n\\r\\ncontract Minter is AccessControlled {\\r\\n\\r\\n    uint256 public price;\\r\\n    bytes32 public root;\\r\\n\\r\\n    IKondux public immutable kondux;\\r\\n    ITreasury public immutable treasury;\\r\\n\\r\\n    constructor(address _authority, address _kondux, address _vault) \\r\\n        AccessControlled(IAuthority(_authority)) {        \\r\\n            require(_kondux != address(0), \\\"Kondux address is not set\\\");\\r\\n            kondux = IKondux(_kondux);\\r\\n            treasury = ITreasury(_vault);\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        treasury.depositEther(msg.value);\\r\\n        _mint();\\r\\n    }\\r\\n\\r\\n    function unsafeMint() public returns (uint256) {\\r\\n        uint256 id = _unsafeMint();\\r\\n        return id;\\r\\n\\r\\n    }        \\r\\n\\r\\n    function setPrice(uint256 _price) public onlyGovernor {\\r\\n        price = _price;\\r\\n    }\\r\\n\\r\\n    function whitelistMint(bytes32[] calldata _merkleProof) public returns (uint256) {\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\\r\\n        require(MerkleProof.verify(_merkleProof, root, leaf), \\\"Incorrect proof\\\");\\r\\n        return _unsafeMint();\\r\\n    }\\r\\n\\r\\n    function setRoot(bytes32 _root) public onlyGovernor {\\r\\n        root = _root;\\r\\n    }\\r\\n\\r\\n    // ** INTERNAL FUNCTIONS **\\r\\n\\r\\n    function _mint() internal {\\r\\n        require(msg.value >= price, \\\"Not enought ether\\\");\\r\\n        //transfer ether to vault\\r\\n        treasury.deposit(msg.value, address(0));\\r\\n        kondux.automaticMint(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _unsafeMint() internal returns (uint256) {\\r\\n        uint256 id = kondux.automaticMint(msg.sender);\\r\\n        return id;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x1a46ba3493f539494377d087dd2f30532f62abc8b2859003cf5d0415ca601e22\",\"license\":\"MIT\"},\"contracts/interfaces/IAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\ninterface IAuthority {\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n\\r\\n    event GovernorPulled(address indexed from, address indexed to);\\r\\n    event GuardianPulled(address indexed from, address indexed to);\\r\\n    event PolicyPulled(address indexed from, address indexed to);\\r\\n    event VaultPulled(address indexed from, address indexed to);\\r\\n\\r\\n    /* ========== VIEW ========== */\\r\\n\\r\\n    function governor() external view returns (address);\\r\\n\\r\\n    function guardian() external view returns (address);\\r\\n\\r\\n    function policy() external view returns (address);\\r\\n\\r\\n    function vault() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x162ef81a6d172910d8817409df50dc7155f746bcd4173a9e6c844a24abd78fca\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IKondux.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ninterface IKondux {\\r\\n\\r\\n    function changeDenominator(uint96 _denominator) external returns (uint96);\\r\\n\\r\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\\r\\n\\r\\n    function setTokenRoyalty(uint256 tokenId,address receiver,uint96 feeNumerator) external;\\r\\n\\r\\n    function setBaseURI(string memory _newURI) external returns (string memory);\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    function safeMint(address to, uint256 dna) external;\\r\\n\\r\\n    function setDna(uint256 _tokenID, uint256 _dna) external;\\r\\n\\r\\n    function setMinter(address _minter) external;\\r\\n\\r\\n    function automaticMint(address to) external returns (uint256);\\r\\n\\r\\n}\",\"keccak256\":\"0x5aa45c5529befc7187d6e0ffa6e3424165365657a1867441054d5511f1699b18\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\ninterface ITreasury {\\r\\n    function deposit(\\r\\n        uint256 _amount,\\r\\n        address _token\\r\\n    ) external;\\r\\n\\r\\n    function depositEther(\\r\\n        uint256 _amount\\r\\n    ) external payable;\\r\\n\\r\\n    function withdraw(\\r\\n        uint256 _amount,\\r\\n        address _token\\r\\n    ) external;\\r\\n\\r\\n    function withdrawEther(\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n}\",\"keccak256\":\"0x864cf77cf01fb5be5287883ca866c45786d9e1e13219faed0c3a7f2220cb65aa\",\"license\":\"MIT\"},\"contracts/types/AccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/IAuthority.sol\\\";\\r\\n\\r\\nerror UNAUTHORIZED();\\r\\nerror AUTHORITY_INITIALIZED();\\r\\n\\r\\n/// @dev Reasoning for this contract = modifiers literaly copy code\\r\\n/// instead of pointing towards the logic to execute. Over many\\r\\n/// functions this bloats contract size unnecessarily.\\r\\n/// imho modifiers are a meme.\\r\\nabstract contract AccessControlled {\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event AuthorityUpdated(IAuthority authority);\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    IAuthority public authority;\\r\\n\\r\\n    /* ========== Constructor ========== */\\r\\n\\r\\n    constructor(IAuthority _authority) {\\r\\n        authority = _authority;\\r\\n        emit AuthorityUpdated(_authority);\\r\\n    }\\r\\n\\r\\n    /* ========== \\\"MODIFIERS\\\" ========== */\\r\\n\\r\\n    modifier onlyGovernor {\\r\\n\\t_onlyGovernor();\\r\\n\\t_;\\r\\n    }\\r\\n\\r\\n    modifier onlyGuardian {\\r\\n\\t_onlyGuardian();\\r\\n\\t_;\\r\\n    }\\r\\n\\r\\n    modifier onlyPolicy {\\r\\n\\t_onlyPolicy();\\r\\n\\t_;\\r\\n    }\\r\\n\\r\\n    modifier onlyVault {\\r\\n\\t_onlyVault();\\r\\n\\t_;\\r\\n    }\\r\\n\\r\\n    /* ========== GOV ONLY ========== */\\r\\n\\r\\n    function initializeAuthority(IAuthority _newAuthority) internal {\\r\\n        if (authority != IAuthority(address(0))) revert AUTHORITY_INITIALIZED();\\r\\n        authority = _newAuthority;\\r\\n        emit AuthorityUpdated(_newAuthority);\\r\\n    }\\r\\n\\r\\n    function setAuthority(IAuthority _newAuthority) external {\\r\\n        _onlyGovernor();\\r\\n        authority = _newAuthority;\\r\\n        emit AuthorityUpdated(_newAuthority);\\r\\n    }\\r\\n\\r\\n    /* ========== INTERNAL CHECKS ========== */\\r\\n\\r\\n    function _onlyGovernor() internal view {\\r\\n        if (msg.sender != authority.governor()) revert UNAUTHORIZED();\\r\\n    }\\r\\n\\r\\n    function _onlyGuardian() internal view {\\r\\n        if (msg.sender != authority.guardian()) revert UNAUTHORIZED();\\r\\n    }\\r\\n\\r\\n    function _onlyPolicy() internal view {\\r\\n        if (msg.sender != authority.policy()) revert UNAUTHORIZED();\\r\\n    }\\r\\n\\r\\n    function _onlyVault() internal view {\\r\\n        if (msg.sender != authority.vault()) revert UNAUTHORIZED();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbe21d3fcdfb682f395f50ff9b6916912ab6a806c70f460e5c16ed30baeb7374a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610a5c380380610a5c83398101604081905261002f91610111565b600080546001600160a01b0319166001600160a01b03851690811790915560405190815283907f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a1506001600160a01b0382166100dd5760405162461bcd60e51b815260206004820152601960248201527f4b6f6e6475782061646472657373206973206e6f742073657400000000000000604482015260640160405180910390fd5b6001600160a01b039182166080521660a05250610154565b80516001600160a01b038116811461010c57600080fd5b919050565b60008060006060848603121561012657600080fd5b61012f846100f5565b925061013d602085016100f5565b915061014b604085016100f5565b90509250925092565b60805160a0516108c86101946000396000818160cf0152818161018701526103290152600081816101d3015281816103a001526105d801526108c86000f3fe6080604052600436106100b55760003560e01c806391b7f5ed11610069578063bf7e214f1161004e578063bf7e214f14610260578063dab5f34014610280578063ebf0c717146102a057600080fd5b806391b7f5ed1461022a578063a035b1fe1461024a57600080fd5b806369434b711161009a57806369434b71146101c15780637a9e5e4b146101f557806388c91f121461021557600080fd5b8063372f657c1461014257806361d027b31461017557600080fd5b3661013d576040516326839f1760e01b81523460048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906326839f1790602401600060405180830381600087803b15801561011b57600080fd5b505af115801561012f573d6000803e3d6000fd5b5050505061013b6102b6565b005b600080fd5b34801561014e57600080fd5b5061016261015d36600461077f565b610429565b6040519081526020015b60405180910390f35b34801561018157600080fd5b506101a97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161016c565b3480156101cd57600080fd5b506101a97f000000000000000000000000000000000000000000000000000000000000000081565b34801561020157600080fd5b5061013b610210366004610809565b610501565b34801561022157600080fd5b50610162610575565b34801561023657600080fd5b5061013b61024536600461082d565b610586565b34801561025657600080fd5b5061016260015481565b34801561026c57600080fd5b506000546101a9906001600160a01b031681565b34801561028c57600080fd5b5061013b61029b36600461082d565b610593565b3480156102ac57600080fd5b5061016260025481565b60015434101561030d5760405162461bcd60e51b815260206004820152601160248201527f4e6f7420656e6f7567687420657468657200000000000000000000000000000060448201526064015b60405180910390fd5b604051636e553f6560e01b8152346004820152600060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636e553f6590604401600060405180830381600087803b15801561037557600080fd5b505af1158015610389573d6000803e3d6000fd5b5050604051631bfc324f60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692506337f8649e9150602401602060405180830381600087803b1580156103ee57600080fd5b505af1158015610402573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104269190610846565b50565b6040516bffffffffffffffffffffffff193360601b16602082015260009081906034016040516020818303038152906040528051906020012090506104a58484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060025491508490506105a0565b6104f15760405162461bcd60e51b815260206004820152600f60248201527f496e636f72726563742070726f6f6600000000000000000000000000000000006044820152606401610304565b6104f96105b6565b949350505050565b610509610654565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a150565b6000806105806105b6565b92915050565b61058e610654565b600155565b61059b610654565b600255565b6000826105ad858461070b565b14949350505050565b604051631bfc324f60e11b815233600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906337f8649e90602401602060405180830381600087803b15801561061c57600080fd5b505af1158015610630573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105809190610846565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156106a057600080fd5b505afa1580156106b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d8919061085f565b6001600160a01b0316336001600160a01b0316146107095760405163075fd2b160e01b815260040160405180910390fd5b565b600081815b845181101561077757600085828151811061072d5761072d61087c565b602002602001015190508083116107535760008381526020829052604090209250610764565b600081815260208490526040902092505b508061076f81610892565b915050610710565b509392505050565b6000806020838503121561079257600080fd5b823567ffffffffffffffff808211156107aa57600080fd5b818501915085601f8301126107be57600080fd5b8135818111156107cd57600080fd5b8660208260051b85010111156107e257600080fd5b60209290920196919550909350505050565b6001600160a01b038116811461042657600080fd5b60006020828403121561081b57600080fd5b8135610826816107f4565b9392505050565b60006020828403121561083f57600080fd5b5035919050565b60006020828403121561085857600080fd5b5051919050565b60006020828403121561087157600080fd5b8151610826816107f4565b634e487b7160e01b600052603260045260246000fd5b60006000198214156108b457634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000809000a",
  "deployedBytecode": "0x6080604052600436106100b55760003560e01c806391b7f5ed11610069578063bf7e214f1161004e578063bf7e214f14610260578063dab5f34014610280578063ebf0c717146102a057600080fd5b806391b7f5ed1461022a578063a035b1fe1461024a57600080fd5b806369434b711161009a57806369434b71146101c15780637a9e5e4b146101f557806388c91f121461021557600080fd5b8063372f657c1461014257806361d027b31461017557600080fd5b3661013d576040516326839f1760e01b81523460048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906326839f1790602401600060405180830381600087803b15801561011b57600080fd5b505af115801561012f573d6000803e3d6000fd5b5050505061013b6102b6565b005b600080fd5b34801561014e57600080fd5b5061016261015d36600461077f565b610429565b6040519081526020015b60405180910390f35b34801561018157600080fd5b506101a97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161016c565b3480156101cd57600080fd5b506101a97f000000000000000000000000000000000000000000000000000000000000000081565b34801561020157600080fd5b5061013b610210366004610809565b610501565b34801561022157600080fd5b50610162610575565b34801561023657600080fd5b5061013b61024536600461082d565b610586565b34801561025657600080fd5b5061016260015481565b34801561026c57600080fd5b506000546101a9906001600160a01b031681565b34801561028c57600080fd5b5061013b61029b36600461082d565b610593565b3480156102ac57600080fd5b5061016260025481565b60015434101561030d5760405162461bcd60e51b815260206004820152601160248201527f4e6f7420656e6f7567687420657468657200000000000000000000000000000060448201526064015b60405180910390fd5b604051636e553f6560e01b8152346004820152600060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636e553f6590604401600060405180830381600087803b15801561037557600080fd5b505af1158015610389573d6000803e3d6000fd5b5050604051631bfc324f60e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692506337f8649e9150602401602060405180830381600087803b1580156103ee57600080fd5b505af1158015610402573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104269190610846565b50565b6040516bffffffffffffffffffffffff193360601b16602082015260009081906034016040516020818303038152906040528051906020012090506104a58484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060025491508490506105a0565b6104f15760405162461bcd60e51b815260206004820152600f60248201527f496e636f72726563742070726f6f6600000000000000000000000000000000006044820152606401610304565b6104f96105b6565b949350505050565b610509610654565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a150565b6000806105806105b6565b92915050565b61058e610654565b600155565b61059b610654565b600255565b6000826105ad858461070b565b14949350505050565b604051631bfc324f60e11b815233600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906337f8649e90602401602060405180830381600087803b15801561061c57600080fd5b505af1158015610630573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105809190610846565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156106a057600080fd5b505afa1580156106b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d8919061085f565b6001600160a01b0316336001600160a01b0316146107095760405163075fd2b160e01b815260040160405180910390fd5b565b600081815b845181101561077757600085828151811061072d5761072d61087c565b602002602001015190508083116107535760008381526020829052604090209250610764565b600081815260208490526040902092505b508061076f81610892565b915050610710565b509392505050565b6000806020838503121561079257600080fd5b823567ffffffffffffffff808211156107aa57600080fd5b818501915085601f8301126107be57600080fd5b8135818111156107cd57600080fd5b8660208260051b85010111156107e257600080fd5b60209290920196919550909350505050565b6001600160a01b038116811461042657600080fd5b60006020828403121561081b57600080fd5b8135610826816107f4565b9392505050565b60006020828403121561083f57600080fd5b5035919050565b60006020828403121561085857600080fd5b5051919050565b60006020828403121561087157600080fd5b8151610826816107f4565b634e487b7160e01b600052603260045260246000fd5b60006000198214156108b457634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000809000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8128,
        "contract": "contracts/Minter.sol:Minter",
        "label": "authority",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAuthority)7691"
      },
      {
        "astId": 6350,
        "contract": "contracts/Minter.sol:Minter",
        "label": "price",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6352,
        "contract": "contracts/Minter.sol:Minter",
        "label": "root",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAuthority)7691": {
        "encoding": "inplace",
        "label": "contract IAuthority",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}