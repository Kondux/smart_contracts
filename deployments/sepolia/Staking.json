{
  "address": "0xd2D27a4a84C8B88aDA584c430aF6C77af3716e11",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authority",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_konduxERC20",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_konduxERC721Founders",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_konduxERC721kNFT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_helixERC20",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Compound",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "NewAPR",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        }
      ],
      "name": "NewAuthorizedERC20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "NewCompoundFreq",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "NewDivisorERC20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "NewFoundersRewardBoost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "helixERC20",
          "type": "address"
        }
      ],
      "name": "NewHelixERC20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "NewKNFTRewardBoost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "konduxERC721Founders",
          "type": "address"
        }
      ],
      "name": "NewKonduxERC721Founders",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "konduxERC721kNFT",
          "type": "address"
        }
      ],
      "name": "NewKonduxERC721kNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "NewMinStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "NewRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "NewTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "NewWithdrawalFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawAll",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_apr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_compoundFreq",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawalFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_foundersRewardBoost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_kNFTRewardBoost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ratio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minStake",
          "type": "uint256"
        }
      ],
      "name": "addNewStakingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "aprERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorizedERC20",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "calculateRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "compoundFreqERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "compoundRewardsTimer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "remainingTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_timelock",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "divisorERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "earlyWithdrawalPenalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "foundersRewardBoostERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenId",
          "type": "address"
        }
      ],
      "name": "getAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_rewardsPerHour",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getDepositIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "getDepositInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_stake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unclaimedRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "getDepositTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_depositTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getDivisorERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getEarlyWithdrawalPenalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenId",
          "type": "address"
        }
      ],
      "name": "getFoundersRewardBoost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_foundersRewardBoost",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenId",
          "type": "address"
        }
      ],
      "name": "getMinStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_minStake",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "getStakedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_deposited",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "getTimeOfLastUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_timeOfLastUpdate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "getTimelock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_timelock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "getTimelockCategory",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "_timelockCategory",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_category",
          "type": "uint256"
        }
      ],
      "name": "getTimelockCategoryBoost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getTotalRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getTotalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalStaked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getTotalWithdrawalFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalWithdrawalFees",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getUserTotalRewardsByCoin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getUserTotalStakedByCoin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalStaked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenId",
          "type": "address"
        }
      ],
      "name": "getWithdrawalFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawalFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenId",
          "type": "address"
        }
      ],
      "name": "getkNFTRewardBoost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_kNFTRewardBoost",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "helixERC20",
      "outputs": [
        {
          "internalType": "contract IHelix",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "kNFTRewardBoostERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "konduxERC721Founders",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "konduxERC721kNFT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minStakeERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ratioERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_apr",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenId",
          "type": "address"
        }
      ],
      "name": "setAPR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_authorized",
          "type": "bool"
        }
      ],
      "name": "setAuthorizedERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_compoundFreq",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenId",
          "type": "address"
        }
      ],
      "name": "setCompoundFreq",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_divisor",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenId",
          "type": "address"
        }
      ],
      "name": "setDivisorERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "penaltyPercentage",
          "type": "uint256"
        }
      ],
      "name": "setEarlyWithdrawalPenalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_foundersRewardBoost",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenId",
          "type": "address"
        }
      ],
      "name": "setFoundersRewardBoost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_helix",
          "type": "address"
        }
      ],
      "name": "setHelixERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_konduxERC721Founders",
          "type": "address"
        }
      ],
      "name": "setKonduxERC721Founders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_konduxERC721kNFT",
          "type": "address"
        }
      ],
      "name": "setKonduxERC721kNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minStake",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenId",
          "type": "address"
        }
      ],
      "name": "setMinStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ratio",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenId",
          "type": "address"
        }
      ],
      "name": "setRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_category",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_boost",
          "type": "uint256"
        }
      ],
      "name": "setTimelockCategoryBoost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawalFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenId",
          "type": "address"
        }
      ],
      "name": "setWithdrawalFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_kNFTRewardBoost",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenId",
          "type": "address"
        }
      ],
      "name": "setkNFTRewardBoost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "stakeRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "timelockCategoryBoost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalRewarded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalWithdrawalFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "contract ITreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userDeposits",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deposited",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redeemed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeOfLastUpdate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastDepositTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unclaimedRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timelock",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "timelockCategory",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userDepositsIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userTotalRewardedByCoin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userTotalStakedByCoin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "withdrawAndClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "withdrawBeforeTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawalFeeERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa0b2b81203d30de81f12350cd04a4564fc2ddec7686e9bcf9ce03aac71840d1c",
  "receipt": {
    "to": null,
    "from": "0x9767a2B120614F526e923DAAF89843EC7C2292d7",
    "contractAddress": "0xd2D27a4a84C8B88aDA584c430aF6C77af3716e11",
    "transactionIndex": 5,
    "gasUsed": "4524919",
    "logsBloom": "0x000000000800000003000000204000001000001000000000000000000000000004200040000000000000400000000000000144000040008000000000000c00000000000000000008000000000000000000001000000c8040000000000000000000000000001000000000000028000000100000000000020000000000000000000000002200100000000002000000000008000010000040001000000000040000000000000000000000010000000200020000800000000000000000000010000000000000000000000100100200000084100000008000000000000000000040002800000010000000800008001000020000000000000000008000008000000000",
    "blockHash": "0x32d39c694a05afe7f13fe5033afa4b3820ed7259e35504963cc74c91071fb31c",
    "transactionHash": "0xa0b2b81203d30de81f12350cd04a4564fc2ddec7686e9bcf9ce03aac71840d1c",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 3368120,
        "transactionHash": "0xa0b2b81203d30de81f12350cd04a4564fc2ddec7686e9bcf9ce03aac71840d1c",
        "address": "0xd2D27a4a84C8B88aDA584c430aF6C77af3716e11",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad"
        ],
        "data": "0x000000000000000000000000685a13093ca561f531c93185b942a3f33385e14e",
        "logIndex": 2,
        "blockHash": "0x32d39c694a05afe7f13fe5033afa4b3820ed7259e35504963cc74c91071fb31c"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 3368120,
        "transactionHash": "0xa0b2b81203d30de81f12350cd04a4564fc2ddec7686e9bcf9ce03aac71840d1c",
        "address": "0xd2D27a4a84C8B88aDA584c430aF6C77af3716e11",
        "topics": [
          "0x6a437d814668577dce2f82ae56ed67161e12e20b59b9464687859d6a2ce0faa5",
          "0x0000000000000000000000000000000000000000000000000000000000002710",
          "0x0000000000000000000000009e05f4e1925de5d7c9c361cbe2d96360e788b355"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x32d39c694a05afe7f13fe5033afa4b3820ed7259e35504963cc74c91071fb31c"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 3368120,
        "transactionHash": "0xa0b2b81203d30de81f12350cd04a4564fc2ddec7686e9bcf9ce03aac71840d1c",
        "address": "0xd2D27a4a84C8B88aDA584c430aF6C77af3716e11",
        "topics": [
          "0x5d5169bb1fbf418e612b1934f181b6ce300a1aad27fdb0e6f6aadbd96f50bb8f",
          "0x0000000000000000000000000000000000000000000000000000000000000064",
          "0x0000000000000000000000009e05f4e1925de5d7c9c361cbe2d96360e788b355"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x32d39c694a05afe7f13fe5033afa4b3820ed7259e35504963cc74c91071fb31c"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 3368120,
        "transactionHash": "0xa0b2b81203d30de81f12350cd04a4564fc2ddec7686e9bcf9ce03aac71840d1c",
        "address": "0xd2D27a4a84C8B88aDA584c430aF6C77af3716e11",
        "topics": [
          "0x1677c34b69a09796446af7a4c75943a1bb36202c16eb82199ef7d37d0ee4b288",
          "0x00000000000000000000000000000000000000000000000000000000000003e8",
          "0x0000000000000000000000009e05f4e1925de5d7c9c361cbe2d96360e788b355"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x32d39c694a05afe7f13fe5033afa4b3820ed7259e35504963cc74c91071fb31c"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 3368120,
        "transactionHash": "0xa0b2b81203d30de81f12350cd04a4564fc2ddec7686e9bcf9ce03aac71840d1c",
        "address": "0xd2D27a4a84C8B88aDA584c430aF6C77af3716e11",
        "topics": [
          "0x11ef1060a695a1277b08edcbb2c364d43d4eb52f1060daaabf0df445cb6cdfdf",
          "0x00000000000000000000000000000000000000000000000000000000000001f4",
          "0x0000000000000000000000009e05f4e1925de5d7c9c361cbe2d96360e788b355"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x32d39c694a05afe7f13fe5033afa4b3820ed7259e35504963cc74c91071fb31c"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 3368120,
        "transactionHash": "0xa0b2b81203d30de81f12350cd04a4564fc2ddec7686e9bcf9ce03aac71840d1c",
        "address": "0xd2D27a4a84C8B88aDA584c430aF6C77af3716e11",
        "topics": [
          "0xef3cb734d88702dbb1c3bc381c52176876be95e70b66d3970d16653ee992a6c2",
          "0x0000000000000000000000000000000000000000000000000000000000989680",
          "0x0000000000000000000000009e05f4e1925de5d7c9c361cbe2d96360e788b355"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x32d39c694a05afe7f13fe5033afa4b3820ed7259e35504963cc74c91071fb31c"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 3368120,
        "transactionHash": "0xa0b2b81203d30de81f12350cd04a4564fc2ddec7686e9bcf9ce03aac71840d1c",
        "address": "0xd2D27a4a84C8B88aDA584c430aF6C77af3716e11",
        "topics": [
          "0xef97689adaec5b60041d413c3baef6876d5d01bb6c17b60cc980e2e244ef8517",
          "0x0000000000000000000000000000000000000000000000000000000000000019",
          "0x0000000000000000000000009e05f4e1925de5d7c9c361cbe2d96360e788b355"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x32d39c694a05afe7f13fe5033afa4b3820ed7259e35504963cc74c91071fb31c"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 3368120,
        "transactionHash": "0xa0b2b81203d30de81f12350cd04a4564fc2ddec7686e9bcf9ce03aac71840d1c",
        "address": "0xd2D27a4a84C8B88aDA584c430aF6C77af3716e11",
        "topics": [
          "0xd0d3d840363c3a773f4578f92d7914f6b37985570c79ee2889d69d7d8f12c295",
          "0x0000000000000000000000000000000000000000000000000000000000015180",
          "0x0000000000000000000000009e05f4e1925de5d7c9c361cbe2d96360e788b355"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x32d39c694a05afe7f13fe5033afa4b3820ed7259e35504963cc74c91071fb31c"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 3368120,
        "transactionHash": "0xa0b2b81203d30de81f12350cd04a4564fc2ddec7686e9bcf9ce03aac71840d1c",
        "address": "0xd2D27a4a84C8B88aDA584c430aF6C77af3716e11",
        "topics": [
          "0x62b574cc62ed3db0ae736cb4349346a234832cc8b215c6423fd67505addc2ffa",
          "0x0000000000000000000000000000000000000000000000000000000000002710",
          "0x0000000000000000000000009e05f4e1925de5d7c9c361cbe2d96360e788b355"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x32d39c694a05afe7f13fe5033afa4b3820ed7259e35504963cc74c91071fb31c"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 3368120,
        "transactionHash": "0xa0b2b81203d30de81f12350cd04a4564fc2ddec7686e9bcf9ce03aac71840d1c",
        "address": "0xd2D27a4a84C8B88aDA584c430aF6C77af3716e11",
        "topics": [
          "0x59261974a183535ca20bb33ae77db42c679a079844739a2e10f0b6ecb847379a",
          "0x0000000000000000000000009e05f4e1925de5d7c9c361cbe2d96360e788b355",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x32d39c694a05afe7f13fe5033afa4b3820ed7259e35504963cc74c91071fb31c"
      }
    ],
    "blockNumber": 3368120,
    "cumulativeGasUsed": "4898981",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x685a13093cA561F531c93185B942a3f33385e14E",
    "0x9e05f4e1925De5D7C9C361CbE2D96360E788b355",
    "0x9A047eACE5BBd63443E164cB74CEf20952A62cDa",
    "0x434fD7FEEc752c4BfA4a59d0272c503ffD313499",
    "0x443525E4D78Dc29544CD30F097809d0Abe68DF32",
    "0x002a4F0aA6D2Ae840Ba2B9FfC0288F6FceCE0bFc"
  ],
  "numDeployments": 12,
  "solcInputHash": "fb8923f9c704302ae3788bc50a1bcbf4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_konduxERC20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_konduxERC721Founders\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_konduxERC721kNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_helixERC20\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Compound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"NewAPR\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"NewAuthorizedERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"NewCompoundFreq\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"NewDivisorERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"NewFoundersRewardBoost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"helixERC20\",\"type\":\"address\"}],\"name\":\"NewHelixERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"NewKNFTRewardBoost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"konduxERC721Founders\",\"type\":\"address\"}],\"name\":\"NewKonduxERC721Founders\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"konduxERC721kNFT\",\"type\":\"address\"}],\"name\":\"NewKonduxERC721kNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"NewMinStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"NewRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"NewTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"NewWithdrawalFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAll\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_compoundFreq\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_foundersRewardBoost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_kNFTRewardBoost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"}],\"name\":\"addNewStakingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aprERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compoundFreqERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"compoundRewardsTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remainingTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_timelock\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"divisorERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"earlyWithdrawalPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"foundersRewardBoostERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenId\",\"type\":\"address\"}],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsPerHour\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getDepositIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"getDepositInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unclaimedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"getDepositTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getDivisorERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getEarlyWithdrawalPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenId\",\"type\":\"address\"}],\"name\":\"getFoundersRewardBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_foundersRewardBoost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenId\",\"type\":\"address\"}],\"name\":\"getMinStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"getStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_deposited\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"getTimeOfLastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeOfLastUpdate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"getTimelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_timelock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"getTimelockCategory\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"_timelockCategory\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_category\",\"type\":\"uint256\"}],\"name\":\"getTimelockCategoryBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTotalWithdrawalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalWithdrawalFees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getUserTotalRewardsByCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getUserTotalStakedByCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenId\",\"type\":\"address\"}],\"name\":\"getWithdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenId\",\"type\":\"address\"}],\"name\":\"getkNFTRewardBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_kNFTRewardBoost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"helixERC20\",\"outputs\":[{\"internalType\":\"contract IHelix\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"kNFTRewardBoostERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"konduxERC721Founders\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"konduxERC721kNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minStakeERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ratioERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_apr\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenId\",\"type\":\"address\"}],\"name\":\"setAPR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_authorized\",\"type\":\"bool\"}],\"name\":\"setAuthorizedERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_compoundFreq\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenId\",\"type\":\"address\"}],\"name\":\"setCompoundFreq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_divisor\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenId\",\"type\":\"address\"}],\"name\":\"setDivisorERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"penaltyPercentage\",\"type\":\"uint256\"}],\"name\":\"setEarlyWithdrawalPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_foundersRewardBoost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenId\",\"type\":\"address\"}],\"name\":\"setFoundersRewardBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_helix\",\"type\":\"address\"}],\"name\":\"setHelixERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_konduxERC721Founders\",\"type\":\"address\"}],\"name\":\"setKonduxERC721Founders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_konduxERC721kNFT\",\"type\":\"address\"}],\"name\":\"setKonduxERC721kNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenId\",\"type\":\"address\"}],\"name\":\"setMinStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenId\",\"type\":\"address\"}],\"name\":\"setRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_category\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_boost\",\"type\":\"uint256\"}],\"name\":\"setTimelockCategoryBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenId\",\"type\":\"address\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_kNFTRewardBoost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenId\",\"type\":\"address\"}],\"name\":\"setkNFTRewardBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"stakeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timelockCategoryBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalRewarded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalWithdrawalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userDeposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeOfLastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unclaimedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"timelockCategory\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userDepositsIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTotalRewardedByCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTotalStakedByCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"withdrawAndClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"withdrawBeforeTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawalFeeERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addNewStakingToken(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"This function adds a new staking token with its parameters. Emits various events based on the setter functions called during token addition. Emits a {NewAuthorizedERC20} event at the end.\",\"params\":{\"_apr\":\"The rewards per hour for the new staking token.\",\"_compoundFreq\":\"The compound frequency for the new staking token.\",\"_foundersRewardBoost\":\"The founders reward boost for the new staking token.\",\"_kNFTRewardBoost\":\"The kNFT reward boost for the new staking token.\",\"_minStake\":\"The minimum stake for the new staking token.\",\"_ratio\":\"The ratio for the new staking token.\",\"_token\":\"The address of the new staking token.\",\"_withdrawalFee\":\"The withdrawal fee for the new staking token.\"}},\"calculateRewards(address,uint256)\":{\"details\":\"This function calculates the rewards for a specified staker and deposit ID. The rewards calculation      considers the deposit's elapsed time, staked amount, and a 25% APY compounded hourly.      If the provided staker is not the owner of the deposit, the function returns 0.\",\"params\":{\"_depositId\":\"The ID of the deposit for which to calculate the rewards.\",\"_staker\":\"The address of the staker for which to calculate the rewards.\"},\"returns\":{\"rewards\":\"The calculated rewards for the specified staker and deposit ID.\"}},\"claimRewards(uint256)\":{\"details\":\"This function allows the owner of a deposit to claim their earned rewards.      It verifies that the caller is the deposit owner and that the timelock has passed.      The function calculates the rewards, resets the unclaimed rewards to zero, and updates the deposit record.      The reward tokens are burned, and the earned rewards are transferred to the user from the vault.      The function emits a Reward event upon successful execution.\",\"params\":{\"_depositId\":\"The ID of the deposit whose rewards are to be claimed.\"}},\"compoundRewardsTimer(uint256)\":{\"details\":\"This function returns the remaining time until the next allowed compounding action for a given deposit ID.      It calculates the remaining time based on the compound frequency for the deposited token.      If the timer has already passed, it returns 0.\",\"params\":{\"_depositId\":\"The ID of the deposit for which to return the compound timer.\"},\"returns\":{\"remainingTime\":\"The remaining time until the next allowed compounding action in seconds.\"}},\"constructor\":{\"details\":\"Initializes the staking contract with the provided parameters.\",\"params\":{\"_authority\":\"The address of the authority contract.\",\"_helixERC20\":\"The address of the Helix ERC20 token contract. The constructor sets up the initial state of the staking contract by initializing contract variables, setting up default staking token parameters, and authorizing the Kondux ERC20 token for staking.\",\"_konduxERC20\":\"The address of the Kondux ERC20 token contract.\",\"_konduxERC721Founders\":\"The address of the Kondux ERC721 Founders token contract.\",\"_konduxERC721kNFT\":\"The address of the Kondux ERC721 kNFT token contract.\",\"_treasury\":\"The address of the treasury contract.\"}},\"deposit(uint256,uint8,address)\":{\"details\":\"This function allows a user to deposit a specified amount of an authorized token with a selected timelock period.      The function checks the user's token balance, allowance, and the timelock value before proceeding.      It then creates a new deposit record, sets the timelock based on the selected category, and updates the user's      deposit list and total staked amount. The specified amount of tokens is transferred from the user to the vault,      and an equivalent amount of reward tokens is minted for the user.\",\"params\":{\"_amount\":\"The amount of tokens to deposit.\",\"_timelock\":\"The timelock category, represented as an integer (0-4).\",\"_token\":\"The address of the token contract.\"},\"returns\":{\"_0\":\"_id The deposit ID assigned to this deposit.\"}},\"getAPR(address)\":{\"details\":\"This function returns the APR for the specified token.\",\"params\":{\"_tokenId\":\"The address of the token for which the rewards per hour are requested.\"},\"returns\":{\"_rewardsPerHour\":\"The rewards per hour for the specified token.\"}},\"getDepositIds(address)\":{\"details\":\"This function returns the deposit IDs for the specified user.\",\"params\":{\"_user\":\"The address of the user for which the deposit IDs are requested.\"},\"returns\":{\"_0\":\"An array of deposit IDs for the specified user.\"}},\"getDepositInfo(uint256)\":{\"details\":\"This function retrieves the deposit information for a given deposit ID. It returns the staked amount      and the earned rewards (including unclaimed rewards) for the specified deposit.\",\"params\":{\"_depositId\":\"The ID of the deposit for which to retrieve the information.\"},\"returns\":{\"_stake\":\"The staked amount for the specified deposit.\",\"_unclaimedRewards\":\"The earned rewards (including unclaimed rewards) for the specified deposit.\"}},\"getDepositTimestamp(uint256)\":{\"details\":\"This function returns the timestamp of the deposit with the specified ID.\",\"params\":{\"_depositId\":\"The id of the deposit for which the timestamp is requested.\"},\"returns\":{\"_depositTimestamp\":\"The timestamp of the deposit\"}},\"getDivisorERC20(address)\":{\"details\":\"This function returns the divisor for the specified token.\",\"params\":{\"_token\":\"The address of the token for which the divisor is requested.\"},\"returns\":{\"_0\":\"The divisor for the specified token.\"}},\"getEarlyWithdrawalPenalty(address)\":{\"details\":\"This function returns the penalty for early withdrawal for the specified token in basis points. (X% = X * 100)\",\"params\":{\"token\":\"The address of the token for which the penalty is requested.\"},\"returns\":{\"_0\":\"The penalty for early withdrawal for the specified token in basis points.\"}},\"getFoundersRewardBoost(address)\":{\"details\":\"This function returns the Founder's reward boost for the specified token.\",\"params\":{\"_tokenId\":\"The address of the token for which the Founder's reward boost is requested.\"},\"returns\":{\"_foundersRewardBoost\":\"The Founder's reward boost for the specified token.\"}},\"getMinStake(address)\":{\"details\":\"This function returns the minimum stake for the specified token.\",\"params\":{\"_tokenId\":\"The address of the token for which the minimum stake is requested.\"},\"returns\":{\"_minStake\":\"The minimum stake for the specified token.\"}},\"getStakedAmount(uint256)\":{\"details\":\"This function returns the staked amount for the specified deposit ID.\",\"params\":{\"_depositId\":\"The ID of the deposit for which the staked amount is requested.\"},\"returns\":{\"_deposited\":\"The staked amount for the specified deposit ID.\"}},\"getTimeOfLastUpdate(uint256)\":{\"details\":\"This function returns the time of the last update for the specified deposit ID.\",\"params\":{\"_depositId\":\"The ID of the deposit for which the time of the last update is requested.\"},\"returns\":{\"_timeOfLastUpdate\":\"The time of the last update for the specified deposit ID.\"}},\"getTimelock(uint256)\":{\"details\":\"This function returns the timelock for the specified deposit ID.\",\"params\":{\"_depositId\":\"The ID of the deposit for which the timelock is requested.\"},\"returns\":{\"_timelock\":\"The timelock for the specified deposit ID.\"}},\"getTimelockCategory(uint256)\":{\"details\":\"This function returns the timelock category for the specified deposit ID.\",\"params\":{\"_depositId\":\"The ID of the deposit for which the timelock category is requested.\"},\"returns\":{\"_timelockCategory\":\"The timelock category for the specified deposit ID.\"}},\"getTimelockCategoryBoost(uint256)\":{\"details\":\"This function returns the timelock category boost for the specified category.\",\"params\":{\"_category\":\"The category for which the timelock category boost is requested.\"},\"returns\":{\"_0\":\"The timelock category boost for the specified category.\"}},\"getTotalRewards(address)\":{\"details\":\"This function returns the total rewards earned for a specific token.\",\"params\":{\"_token\":\"The address of the token contract.\"},\"returns\":{\"_totalRewards\":\"The total rewards earned for the given token.\"}},\"getTotalStaked(address)\":{\"details\":\"This function returns the total amount staked for a specific token.\",\"params\":{\"_token\":\"The address of the token contract.\"},\"returns\":{\"_totalStaked\":\"The total amount staked for the given token.\"}},\"getTotalWithdrawalFees(address)\":{\"details\":\"This function returns the total withdrawal fees for a specific token.\",\"params\":{\"_token\":\"The address of the token contract.\"},\"returns\":{\"_totalWithdrawalFees\":\"The total withdrawal fees for the given token.\"}},\"getUserTotalRewardsByCoin(address,address)\":{\"details\":\"This function returns the total rewards earned by a specific user for a specific token.\",\"params\":{\"_token\":\"The address of the token contract.\",\"_user\":\"The address of the user.\"},\"returns\":{\"_totalRewards\":\"The total rewards earned by the user for the given token.\"}},\"getUserTotalStakedByCoin(address,address)\":{\"details\":\"This function returns the total amount staked by a specific user for a specific token.\",\"params\":{\"_token\":\"The address of the token contract.\",\"_user\":\"The address of the user.\"},\"returns\":{\"_totalStaked\":\"The total amount staked by the user for the given token.\"}},\"getWithdrawalFee(address)\":{\"details\":\"This function returns the withdrawal fee for the specified token.\",\"params\":{\"_tokenId\":\"The address of the token for which the withdrawal fee is requested.\"},\"returns\":{\"_withdrawalFee\":\"The withdrawal fee for the specified token.\"}},\"getkNFTRewardBoost(address)\":{\"details\":\"This function returns the kNFT reward boost for the specified token.\",\"params\":{\"_tokenId\":\"The address of the token for which the kNFT reward boost is requested.\"},\"returns\":{\"_kNFTRewardBoost\":\"The kNFT reward boost for the specified token.\"}},\"setAPR(uint256,address)\":{\"details\":\"This function sets the APR for a specified token.\",\"params\":{\"_apr\":\"The rewards per hour value to be set, as x% APR. (e.g. 25 = 25%)\",\"_tokenId\":\"The address of the token for which to set the rewards per hour.\"}},\"setAuthorizedERC20(address,bool)\":{\"details\":\"This function sets whether an ERC20 token is authorized as a staking currency. Emits a {NewAuthorizedERC20} event.\",\"params\":{\"_authorized\":\"True to authorize the token, false to deauthorize.\",\"_token\":\"The address of the token to be authorized or deauthorized.\"}},\"setCompoundFreq(uint256,address)\":{\"details\":\"This function sets the compound frequency for a specified token.\",\"params\":{\"_compoundFreq\":\"The compound frequency value to be set.\",\"_tokenId\":\"The address of the token for which to set the compound frequency.\"}},\"setDivisorERC20(uint256,address)\":{\"details\":\"This function sets the divisor for a specified token.\",\"params\":{\"_divisor\":\"The divisor value to be set.\",\"_tokenId\":\"The address of the token for which to set the divisor.\"}},\"setEarlyWithdrawalPenalty(address,uint256)\":{\"details\":\"This function sets the penalty percentage for early withdrawal of a specified token.\",\"params\":{\"penaltyPercentage\":\"The penalty percentage value to be set. Must be between 0 and 100. \",\"token\":\"The address of the token for which to set the penalty percentage.\"}},\"setFoundersRewardBoost(uint256,address)\":{\"details\":\"This function sets the founders reward boost for a specified token.\",\"params\":{\"_foundersRewardBoost\":\"The founders reward boost value to be set.\",\"_tokenId\":\"The address of the token for which to set the founders reward boost.\"}},\"setHelixERC20(address)\":{\"details\":\"This function sets the address of the Helix ERC20 contract.\",\"params\":{\"_helix\":\"The address of the Helix ERC20 contract.\"}},\"setKonduxERC721Founders(address)\":{\"details\":\"This function sets the address of the konduxERC721Founders contract.\",\"params\":{\"_konduxERC721Founders\":\"The address of the konduxERC721Founders contract.\"}},\"setKonduxERC721kNFT(address)\":{\"details\":\"This function sets the address of the konduxERC721kNFT contract.\",\"params\":{\"_konduxERC721kNFT\":\"The address of the konduxERC721kNFT contract.\"}},\"setMinStake(uint256,address)\":{\"details\":\"This function sets the minimum staking amount for a specified token.\",\"params\":{\"_minStake\":\"The minimum staking amount to be set, in wei.\",\"_tokenId\":\"The address of the token for which to set the minimum staking amount.\"}},\"setRatio(uint256,address)\":{\"details\":\"This function sets the ratio for a specified ERC20 token.\",\"params\":{\"_ratio\":\"The ratio value to be set.\",\"_tokenId\":\"The address of the token for which to set the ratio.\"}},\"setTimelockCategoryBoost(uint256,uint256)\":{\"details\":\"This function sets the timelock category boost for a specified category.\",\"params\":{\"_boost\":\"The boost value to be set.\",\"_category\":\"The category for which to set the boost.\"}},\"setTreasury(address)\":{\"details\":\"This function sets the address of the Treasury contract.\",\"params\":{\"_treasury\":\"The address of the Treasury contract.\"}},\"setWithdrawalFee(uint256,address)\":{\"details\":\"This function sets the withdrawal fee for a specified token.\",\"params\":{\"_tokenId\":\"The address of the token for which to set the withdrawal fee.\",\"_withdrawalFee\":\"The withdrawal fee value to be set.\"}},\"setkNFTRewardBoost(uint256,address)\":{\"details\":\"This function sets the kNFT reward boost for a specified token.\",\"params\":{\"_kNFTRewardBoost\":\"The kNFT reward boost value to be set.\",\"_tokenId\":\"The address of the token for which to set the kNFT reward boost.\"}},\"stakeRewards(uint256)\":{\"details\":\"This function allows the owner of a deposit to stake their earned rewards.      It verifies that the caller is the deposit owner and that the compounding is not happening too soon.      The function calculates the rewards, resets the unclaimed rewards to zero, and updates the deposit record.      The total staked amount is updated, and an equivalent amount of reward tokens is minted for the user.\",\"params\":{\"_depositId\":\"The ID of the deposit whose rewards are to be staked.\"}},\"withdraw(uint256,uint256)\":{\"details\":\"This function allows the owner of a deposit to withdraw a specified amount of their deposited tokens.      It verifies that the timelock has passed, the caller is the deposit owner, and the withdrawal amount      is within the available limits. The function calculates the rewards, updates the deposit record, and      transfers the liquid amount to the user after applying the withdrawal fee. The collateral tokens are burned.      The function emits a Withdraw event upon successful execution.\",\"params\":{\"_amount\":\"The amount of tokens to withdraw.\",\"_depositId\":\"The ID of the deposit from which to withdraw the tokens.\"}},\"withdrawAndClaim(uint256,uint256)\":{\"details\":\"This function allows the owner of a deposit to withdraw a specified amount of their deposited tokens      and claim their earned rewards in a single transaction. It calls the withdraw and claimRewards functions.\",\"params\":{\"_amount\":\"The amount of tokens to withdraw.\",\"_depositId\":\"The ID of the deposit from which to withdraw the tokens and claim the rewards.\"}},\"withdrawBeforeTimelock(uint256,uint256)\":{\"details\":\"This function allows the owner of a deposit to withdraw a specified amount of their deposited tokens      before the timelock has passed. The user is punished by not receiving any reward boosts and paying an extra      fee proportional to the time left until the lock (the closer to the end of the locking time, the smaller the fee,      starting at 10%).      It verifies that the caller is the deposit owner, and the withdrawal amount is within the available limits.      The function calculates the rewards, updates the deposit record, and transfers the liquid amount to the user      after applying the extra fee and withdrawal fee. The collateral tokens are burned.      The function emits a Withdraw event upon successful execution.\",\"params\":{\"_amount\":\"The amount of tokens to withdraw.\",\"_depositId\":\"The ID of the deposit from which to withdraw the tokens.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"./interfaces/ITreasury.sol\\\";\\r\\nimport \\\"./interfaces/IHelix.sol\\\";\\r\\nimport \\\"./interfaces/IKondux.sol\\\";\\r\\nimport \\\"./types/AccessControlled.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract Staking is AccessControlled {\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    Counters.Counter private _depositIds;\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a staker's information.\\r\\n     */\\r\\n    struct Staker {\\r\\n        // The address of the staked token\\r\\n        address token;\\r\\n        // The address of the staker\\r\\n        address staker;\\r\\n        // The total amount of tokens deposited by the staker\\r\\n        uint256 deposited;\\r\\n        // The total amount of tokens redeemed by the staker\\r\\n        uint256 redeemed;\\r\\n        // The timestamp of the last update for this staker's deposit\\r\\n        uint256 timeOfLastUpdate;\\r\\n        // The timestamp of the staker's last deposit\\r\\n        uint256 lastDepositTime;\\r\\n        // The accumulated, but unclaimed rewards for the staker. These are calculated\\r\\n        // each time a user writes to the contract\\r\\n        uint256 unclaimedRewards;\\r\\n        // The duration of the timelock applied to the staker's deposit\\r\\n        uint256 timelock;\\r\\n        // The category of the timelock applied to the staker's deposit\\r\\n        uint8 timelockCategory;\\r\\n    }\\r\\n\\r\\n    enum LockingTimes {        \\r\\n        OneMonth, // 0\\r\\n        ThreeMonths, // 1\\r\\n        SixMonths, // 2\\r\\n        OneYear, // 3\\r\\n        Test, // 4\\r\\n        Test24h, // 5\\r\\n        Test48h // 6\\r\\n    }\\r\\n\\r\\n    // The deposit IDs associated with a user's address\\r\\n    mapping(address => uint[]) public userDepositsIds;\\r\\n\\r\\n    // The Staker struct information associated with a deposit ID\\r\\n    mapping(uint => Staker) public userDeposits;\\r\\n\\r\\n    // Indicates whether a specific ERC20 token is authorized for staking\\r\\n    mapping (address => bool) public authorizedERC20;\\r\\n\\r\\n    // The minimum amount required to stake for a specific ERC20 token\\r\\n    mapping (address => uint256) public minStakeERC20;\\r\\n\\r\\n    // The compound frequency for a specific ERC20 token\\r\\n    mapping (address => uint256) public compoundFreqERC20;\\r\\n\\r\\n    // The rewards per hour for a specific ERC20 token\\r\\n    mapping (address => uint256) public aprERC20;\\r\\n\\r\\n    // The withdrawal fee for a specific ERC20 token\\r\\n    mapping (address => uint256) public withdrawalFeeERC20;\\r\\n\\r\\n    // The founders reward boost for a specific ERC20 token\\r\\n    mapping (address => uint256) public foundersRewardBoostERC20;\\r\\n\\r\\n    // The kNFT reward boost for a specific ERC20 token\\r\\n    mapping (address => uint256) public kNFTRewardBoostERC20;\\r\\n\\r\\n    // The ratio for a specific ERC20 token\\r\\n    mapping (address => uint256) public ratioERC20;\\r\\n\\r\\n    // The total amount staked for a specific ERC20 token\\r\\n    mapping (address => uint256) public totalStaked;\\r\\n\\r\\n    // The total amount staked by a user for a specific ERC20 token\\r\\n    mapping (address => mapping (address => uint256)) public userTotalStakedByCoin;\\r\\n\\r\\n    // The total amount rewarded for a specific ERC20 token\\r\\n    mapping (address => uint256) public totalRewarded;\\r\\n\\r\\n    // The total amount rewarded by a user for a specific ERC20 token\\r\\n    mapping (address => mapping (address => uint256)) public userTotalRewardedByCoin;\\r\\n\\r\\n    // The total amount paid as a withdrawal fee for a specific ERC20 token\\r\\n    mapping (address => uint256) public totalWithdrawalFees;\\r\\n\\r\\n    // The penalty for withdrawing early for a specific ERC20 token\\r\\n    mapping (address => uint256) public earlyWithdrawalPenalty;\\r\\n\\r\\n    // The boost for a specific timelock category\\r\\n    mapping(uint => uint256) public timelockCategoryBoost;\\r\\n\\r\\n    // The divisor for a specific token\\r\\n    mapping (address => uint256) public divisorERC20;\\r\\n\\r\\n\\r\\n    IHelix public helixERC20; // Helix ERC20 Token\\r\\n    IERC721 public konduxERC721Founders; // Kondux ERC721 Founders Token\\r\\n    address public konduxERC721kNFT; // Kondux ERC721 kNFT Token\\r\\n    ITreasury public treasury; // Treasury Contract\\r\\n\\r\\n    // Events\\r\\n    // Emitted when a staker withdraws their rewards\\r\\n    event Withdraw(address indexed staker, uint256 amount);\\r\\n\\r\\n    // Emitted when a staker withdraws all their rewards\\r\\n    event WithdrawAll(address indexed staker, uint256 amount);\\r\\n\\r\\n    // Emitted when a staker compounds their rewards\\r\\n    event Compound(address indexed staker, uint256 amount);\\r\\n\\r\\n    // Emitted when a staker stakes their tokens\\r\\n    event Stake(uint indexed id, address indexed staker, address token, uint256 amount);\\r\\n\\r\\n    // Emitted when a staker unstakes their tokens\\r\\n    event Unstake(address indexed staker, uint256 amount);\\r\\n\\r\\n    // Emitted when a staker receives a reward\\r\\n    event Reward(address indexed staker, uint256 amount);\\r\\n\\r\\n    // Emitted when the rewards per hour is updated for a token\\r\\n    event NewAPR(uint256 indexed amount, address indexed token);\\r\\n\\r\\n    // Emitted when the minimum stake is updated for a token\\r\\n    event NewMinStake(uint256 indexed amount, address indexed token);\\r\\n\\r\\n    // Emitted when the compound frequency is updated for a token\\r\\n    event NewCompoundFreq(uint256 indexed amount, address indexed token);\\r\\n\\r\\n    // Emitted when the Helix ERC20 token is updated\\r\\n    event NewHelixERC20(address indexed helixERC20);\\r\\n\\r\\n    // Emitted when the Kondux ERC721 Founders token is updated\\r\\n    event NewKonduxERC721Founders(address indexed konduxERC721Founders);\\r\\n\\r\\n    // Emitted when the Kondux ERC721 kNFT token is updated\\r\\n    event NewKonduxERC721kNFT(address indexed konduxERC721kNFT);\\r\\n\\r\\n    // Emitted when the treasury address is updated\\r\\n    event NewTreasury(address indexed treasury);\\r\\n\\r\\n    // Emitted when the withdrawal fee is updated for a token\\r\\n    event NewWithdrawalFee(uint256 indexed amount, address indexed token);\\r\\n\\r\\n    // Emitted when the founders reward boost is updated for a token\\r\\n    event NewFoundersRewardBoost(uint256 indexed amount, address indexed token);\\r\\n\\r\\n    // Emitted when the kNFT reward boost is updated for a token\\r\\n    event NewKNFTRewardBoost(uint256 indexed amount, address indexed token);\\r\\n\\r\\n    // Emitted when a token is authorized or deauthorized for staking\\r\\n    event NewAuthorizedERC20(address indexed token, bool indexed authorized);\\r\\n\\r\\n    // Emitted when the ratio is updated for a token\\r\\n    event NewRatio(uint256 indexed amount, address indexed token);\\r\\n\\r\\n    // Emitted when a new divisor is set for a token\\r\\n    event NewDivisorERC20(uint256 indexed amount, address indexed token);\\r\\n \\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the staking contract with the provided parameters.\\r\\n     *\\r\\n     * @param _authority The address of the authority contract.\\r\\n     * @param _konduxERC20 The address of the Kondux ERC20 token contract.\\r\\n     * @param _treasury The address of the treasury contract.\\r\\n     * @param _konduxERC721Founders The address of the Kondux ERC721 Founders token contract.\\r\\n     * @param _konduxERC721kNFT The address of the Kondux ERC721 kNFT token contract.\\r\\n     * @param _helixERC20 The address of the Helix ERC20 token contract.\\r\\n     *\\r\\n     * The constructor sets up the initial state of the staking contract by initializing contract variables,\\r\\n     * setting up default staking token parameters, and authorizing the Kondux ERC20 token for staking.\\r\\n     */\\r\\n    constructor(\\r\\n        address _authority,\\r\\n        address _konduxERC20,\\r\\n        address _treasury,\\r\\n        address _konduxERC721Founders,\\r\\n        address _konduxERC721kNFT,\\r\\n        address _helixERC20\\r\\n    ) AccessControlled(IAuthority(_authority)) {\\r\\n        // Ensure the provided addresses are valid\\r\\n        require(_konduxERC20 != address(0), \\\"Kondux ERC20 address is not set\\\");\\r\\n        require(_treasury != address(0), \\\"Treasury address is not set\\\");\\r\\n        require(_konduxERC721Founders != address(0), \\\"Kondux ERC721 Founders address is not set\\\");\\r\\n        require(_konduxERC721kNFT != address(0), \\\"Kondux ERC721 kNFT address is not set\\\");\\r\\n        require(_helixERC20 != address(0), \\\"Helix ERC20 address is not set\\\");\\r\\n\\r\\n        // Initialize contract variables\\r\\n        konduxERC721Founders = IERC721(_konduxERC721Founders);\\r\\n        konduxERC721kNFT = _konduxERC721kNFT;\\r\\n        helixERC20 = IHelix(_helixERC20);\\r\\n        treasury = ITreasury(_treasury);\\r\\n\\r\\n        // Set up default staking token parameters\\r\\n        setDivisorERC20(10_000, _konduxERC20); // 10,000 basis points\\r\\n        setWithdrawalFee(100, _konduxERC20); // 1% fee on withdrawal or 100 / 10_000\\r\\n        setFoundersRewardBoost(1_000, _konduxERC20); // 10% boost (=110%) on rewards or 1,000,000/10,000,000\\r\\n        setkNFTRewardBoost(500, _konduxERC20); // 5% boost on rewards or 500 / \\r\\n        setMinStake(10_000_000, _konduxERC20); // 10,000,000 wei\\r\\n        setAPR(25, _konduxERC20); // 0.00285%/h or 25% APR\\r\\n        setCompoundFreq(60 * 60 * 24, _konduxERC20); // 24 hours\\r\\n        setRatio(10_000, _konduxERC20); // 10,000:1 ratio\\r\\n        setEarlyWithdrawalPenalty(_konduxERC20, 10); // 10% penalty\\r\\n        setTimelockCategoryBoost(1, 100); // 1% boost for 90 days timelock\\r\\n        setTimelockCategoryBoost(2, 300); // 3% boost for 180 days timelock \\r\\n        setTimelockCategoryBoost(3, 900); // 9% boost for 365 days timelock\\r\\n\\r\\n        //testing 24 and 48h timelocks\\r\\n        setTimelockCategoryBoost(5, 5000); // 50% boost for 1 day timelock\\r\\n        setTimelockCategoryBoost(6, 10000); // 100% boost for 2 days timelock\\r\\n\\r\\n        _setAuthorizedERC20(_konduxERC20, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function allows a user to deposit a specified amount of an authorized token with a selected timelock period.\\r\\n     *      The function checks the user's token balance, allowance, and the timelock value before proceeding.\\r\\n     *      It then creates a new deposit record, sets the timelock based on the selected category, and updates the user's\\r\\n     *      deposit list and total staked amount. The specified amount of tokens is transferred from the user to the vault,\\r\\n     *      and an equivalent amount of reward tokens is minted for the user.\\r\\n     * @param _amount The amount of tokens to deposit.\\r\\n     * @param _timelock The timelock category, represented as an integer (0-4).\\r\\n     * @param _token The address of the token contract.\\r\\n     * @return _id The deposit ID assigned to this deposit.\\r\\n     */\\r\\n    function deposit(uint256 _amount, uint8 _timelock, address _token) public returns (uint) {\\r\\n        // Check if the token is authorized for staking\\r\\n        require(authorizedERC20[_token], \\\"Token not authorized\\\");\\r\\n        // Check if the deposit amount is greater than or equal to the minimum required stake\\r\\n        require(_amount >= minStakeERC20[_token], \\\"Amount smaller than minimimum deposit\\\");\\r\\n        IERC20 konduxERC20 = IERC20(_token);\\r\\n        // Check if the user has enough balance to stake the specified amount\\r\\n        require(konduxERC20.balanceOf(msg.sender) >= _amount, \\\"Can't stake more than you own\\\");\\r\\n        // Check if the user has approved the staking contract to spend the specified amount\\r\\n        require(konduxERC20.allowance(msg.sender, address(this)) >= _amount, \\\"Allowance not set\\\");\\r\\n        // Check if the selected timelock category is valid (between 0 and 4)\\r\\n        require(_timelock >= 0 && _timelock <= 4, \\\"Invalid timelock\\\");\\r\\n\\r\\n        // Get the current deposit ID\\r\\n        uint _id = _depositIds.current();\\r\\n\\r\\n        // Create a new deposit record for the user\\r\\n        userDeposits[_id] = Staker({\\r\\n            token: _token,\\r\\n            staker: msg.sender,\\r\\n            deposited: _amount,\\r\\n            unclaimedRewards: 0,\\r\\n            timelock: 0,\\r\\n            timelockCategory: _timelock,\\r\\n            timeOfLastUpdate: block.timestamp,\\r\\n            lastDepositTime: block.timestamp,\\r\\n            redeemed: 0\\r\\n        });\\r\\n\\r\\n        // Set the timelock period based on the selected category\\r\\n        if (_timelock == uint8(LockingTimes.OneMonth)) {\\r\\n            userDeposits[_id].timelock = block.timestamp + 30 days; // 1 month\\r\\n        } else if (_timelock == uint8(LockingTimes.ThreeMonths)) {\\r\\n            userDeposits[_id].timelock = block.timestamp + 90 days; // 3 months\\r\\n        } else if (_timelock == uint8(LockingTimes.SixMonths)) {\\r\\n            userDeposits[_id].timelock = block.timestamp + 180 days; // 6 months\\r\\n        } else if (_timelock == uint8(LockingTimes.OneYear)) {\\r\\n            userDeposits[_id].timelock = block.timestamp + 365 days; // 1 year \\r\\n        } else if (_timelock == uint8(LockingTimes.Test)) {\\r\\n            userDeposits[_id].timelock = block.timestamp + 2 minutes; // 2 minutes // TEST\\r\\n        }\\r\\n\\r\\n        // Add the deposit ID to the user's deposit list\\r\\n        userDepositsIds[msg.sender].push(_id);\\r\\n\\r\\n        // Update the user's total staked amount\\r\\n        _addTotalStakedAmount(_amount, _token, msg.sender);\\r\\n\\r\\n        // Transfer the deposited tokens from the user to the vault\\r\\n        konduxERC20.transferFrom(msg.sender, authority.vault(), _amount);\\r\\n        // Mint an equivalent amount of reward tokens for the user\\r\\n        helixERC20.mint(msg.sender, _amount * ratioERC20[_token]);\\r\\n\\r\\n        // Increment the deposit ID counter\\r\\n        _depositIds.increment();\\r\\n\\r\\n        // Emit a Stake event\\r\\n        emit Stake(_id, msg.sender, _token, _amount);\\r\\n\\r\\n        return _id;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev This function allows the owner of a deposit to stake their earned rewards.\\r\\n     *      It verifies that the caller is the deposit owner and that the compounding is not happening too soon.\\r\\n     *      The function calculates the rewards, resets the unclaimed rewards to zero, and updates the deposit record.\\r\\n     *      The total staked amount is updated, and an equivalent amount of reward tokens is minted for the user.\\r\\n     * @param _depositId The ID of the deposit whose rewards are to be staked.\\r\\n     */\\r\\n    function stakeRewards(uint _depositId) public {\\r\\n        // Verify that the caller is the owner of the deposit\\r\\n        require(msg.sender == userDeposits[_depositId].staker, \\\"You are not the owner of this deposit\\\");\\r\\n        // Verify that the user is not trying to compound rewards too soon\\r\\n        require(compoundRewardsTimer(_depositId) == 0, \\\"Tried to compound rewards too soon\\\");\\r\\n\\r\\n        // Calculate the rewards and add any unclaimed rewards\\r\\n        uint256 rewards = calculateRewards(msg.sender, _depositId) + userDeposits[_depositId].unclaimedRewards;\\r\\n        // Reset the unclaimed rewards to zero\\r\\n        userDeposits[_depositId].unclaimedRewards = 0;\\r\\n        // Update the deposited amount with the compounded rewards\\r\\n        userDeposits[_depositId].deposited += rewards;\\r\\n        // Update the time of the last update\\r\\n        userDeposits[_depositId].timeOfLastUpdate = block.timestamp;\\r\\n\\r\\n        // Update the user's total staked amount\\r\\n        _addTotalStakedAmount(rewards, userDeposits[_depositId].token, userDeposits[_depositId].staker);\\r\\n\\r\\n        // Mint an equivalent amount of reward tokens for the user\\r\\n        helixERC20.mint(msg.sender, rewards * ratioERC20[userDeposits[_depositId].token]);\\r\\n\\r\\n        // Emit a Compound event\\r\\n        emit Compound(msg.sender, rewards);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function allows the owner of a deposit to claim their earned rewards.\\r\\n     *      It verifies that the caller is the deposit owner and that the timelock has passed.\\r\\n     *      The function calculates the rewards, resets the unclaimed rewards to zero, and updates the deposit record.\\r\\n     *      The reward tokens are burned, and the earned rewards are transferred to the user from the vault.\\r\\n     *      The function emits a Reward event upon successful execution.\\r\\n     * @param _depositId The ID of the deposit whose rewards are to be claimed.\\r\\n     */\\r\\n    function claimRewards(uint _depositId) public {\\r\\n        require(msg.sender == userDeposits[_depositId].staker, \\\"You are not the owner of this deposit\\\");\\r\\n        require(block.timestamp >= userDeposits[_depositId].timelock, \\\"Timelock not passed\\\");\\r\\n\\r\\n        uint256 rewards = calculateRewards(msg.sender, _depositId) + userDeposits[_depositId].unclaimedRewards;\\r\\n\\r\\n        require(rewards > 0, \\\"You have no rewards\\\");\\r\\n\\r\\n        userDeposits[_depositId].unclaimedRewards = 0;\\r\\n        userDeposits[_depositId].timeOfLastUpdate = block.timestamp;\\r\\n\\r\\n        IERC20 konduxERC20 = IERC20(userDeposits[_depositId].token);\\r\\n\\r\\n        uint256 netRewards = (rewards * (10_000 - withdrawalFeeERC20[userDeposits[_depositId].token])) / divisorERC20[userDeposits[_depositId].token];\\r\\n\\r\\n        konduxERC20.transferFrom(authority.vault(), msg.sender, netRewards); \\r\\n\\r\\n        _addTotalRewardedAmount(netRewards, userDeposits[_depositId].token, userDeposits[_depositId].staker);\\r\\n        _addTotalWithdrawalFees(rewards - netRewards, userDeposits[_depositId].token);\\r\\n\\r\\n        emit Reward(msg.sender, netRewards);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev This function allows the owner of a deposit to withdraw a specified amount of their deposited tokens.\\r\\n     *      It verifies that the timelock has passed, the caller is the deposit owner, and the withdrawal amount\\r\\n     *      is within the available limits. The function calculates the rewards, updates the deposit record, and\\r\\n     *      transfers the liquid amount to the user after applying the withdrawal fee. The collateral tokens are burned.\\r\\n     *      The function emits a Withdraw event upon successful execution.\\r\\n     * @param _amount The amount of tokens to withdraw.\\r\\n     * @param _depositId The ID of the deposit from which to withdraw the tokens.\\r\\n     */\\r\\n    function withdraw(uint256 _amount, uint _depositId) public {\\r\\n        // Verify that the timelock has passed\\r\\n        require(block.timestamp >= userDeposits[_depositId].timelock, \\\"Timelock not passed\\\");\\r\\n        // Verify that the caller is the owner of the deposit\\r\\n        require(msg.sender == userDeposits[_depositId].staker, \\\"You are not the owner of this deposit\\\");\\r\\n        // Verify that the withdrawal amount is within the available limits\\r\\n        require(userDeposits[_depositId].deposited >= _amount, \\\"Can't withdraw more than you have\\\");\\r\\n        // Verify that the withdrawal amount is less than or equal to the collateral tokens the user has\\r\\n        require(_amount * ratioERC20[userDeposits[_depositId].token] <= helixERC20.balanceOf(msg.sender), \\\"Can't withdraw more tokens than the collateral you have\\\");\\r\\n\\r\\n        // Calculate the rewards\\r\\n        uint256 _rewards = calculateRewards(msg.sender, _depositId);\\r\\n        // Update the deposit record\\r\\n        userDeposits[_depositId].deposited -= _amount;\\r\\n        userDeposits[_depositId].timeOfLastUpdate = block.timestamp;\\r\\n        userDeposits[_depositId].unclaimedRewards += _rewards;\\r\\n\\r\\n        // Calculate the liquid amount to transfer after applying the withdrawal fee\\r\\n        uint256 _liquid = (_amount * (divisorERC20[userDeposits[_depositId].token] - withdrawalFeeERC20[userDeposits[_depositId].token])) / divisorERC20[userDeposits[_depositId].token];\\r\\n\\r\\n        // Get the token contract\\r\\n        IERC20 konduxERC20 = IERC20(userDeposits[_depositId].token);\\r\\n\\r\\n        // Check if the treasury contract has approved the staking contract to withdraw the tokens\\r\\n        require(konduxERC20.allowance(authority.vault(), address(this)) >= _liquid, \\\"Treasury Contract need to approve Staking Contract to withdraw your tokens -- please call an Admin\\\");\\r\\n\\r\\n        // Subtract the staked amount\\r\\n        _subtractStakedAmount(_amount, userDeposits[_depositId].token, userDeposits[_depositId].staker);\\r\\n\\r\\n        // Burn the equivalent amount of collateral tokens\\r\\n        helixERC20.burn(msg.sender, _amount * ratioERC20[userDeposits[_depositId].token]);\\r\\n        \\r\\n        // Transfer the liquid amount to the user\\r\\n        konduxERC20.transferFrom(authority.vault(), msg.sender, _liquid);\\r\\n\\r\\n        // Update the user's total rewarded amount + total rewarded amount for the token\\r\\n        _addTotalRewardedAmount(_liquid, userDeposits[_depositId].token, userDeposits[_depositId].staker); \\r\\n        _addTotalWithdrawalFees(_amount - _liquid, userDeposits[_depositId].token); \\r\\n\\r\\n        // Emit a Withdraw event\\r\\n        emit Withdraw(msg.sender, _liquid);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function allows the owner of a deposit to withdraw a specified amount of their deposited tokens\\r\\n     *      before the timelock has passed. The user is punished by not receiving any reward boosts and paying an extra\\r\\n     *      fee proportional to the time left until the lock (the closer to the end of the locking time, the smaller the fee,\\r\\n     *      starting at 10%).\\r\\n     *      It verifies that the caller is the deposit owner, and the withdrawal amount is within the available limits.\\r\\n     *      The function calculates the rewards, updates the deposit record, and transfers the liquid amount to the user\\r\\n     *      after applying the extra fee and withdrawal fee. The collateral tokens are burned.\\r\\n     *      The function emits a Withdraw event upon successful execution.\\r\\n     * @param _amount The amount of tokens to withdraw.\\r\\n     * @param _depositId The ID of the deposit from which to withdraw the tokens.\\r\\n     */\\r\\n    function withdrawBeforeTimelock(uint256 _amount, uint _depositId) public {\\r\\n        // Verify that the caller is the owner of the deposit\\r\\n        require(msg.sender == userDeposits[_depositId].staker, \\\"You are not the owner of this deposit\\\");\\r\\n        // Verify that the withdrawal amount is within the available limits\\r\\n        require(userDeposits[_depositId].deposited >= _amount, \\\"Can't withdraw more than you have\\\");\\r\\n        // Verify that the withdrawal amount is less than or equal to the collateral tokens the user has\\r\\n        require(_amount * ratioERC20[userDeposits[_depositId].token] <= helixERC20.balanceOf(msg.sender), \\\"Can't withdraw more tokens than the collateral you have\\\");\\r\\n        // Verify if the timelock has passed\\r\\n        require(block.timestamp < userDeposits[_depositId].timelock, \\\"Timelock has passed\\\");\\r\\n\\r\\n        // Calculate the extra fee proportional to the time left until the lock (the closer to the end of the locking time, the smaller the fee)\\r\\n        uint256 timeLeft = userDeposits[_depositId].timelock - block.timestamp;\\r\\n        uint256 lockDuration = userDeposits[_depositId].timelock - userDeposits[_depositId].lastDepositTime;\\r\\n        uint256 extraFee = (_amount * earlyWithdrawalPenalty[userDeposits[_depositId].token] * timeLeft) / (lockDuration * 100);\\r\\n\\r\\n        // If extra fee is more than the amount, set it to the amount\\r\\n        if (extraFee > _amount) {\\r\\n            extraFee = _amount;\\r\\n        }\\r\\n\\r\\n        // If extra fee is zero, apply 1% fee\\r\\n        if (extraFee == 0) {\\r\\n            extraFee = (_amount * 1) / 100;\\r\\n        }\\r\\n\\r\\n        // Calculate the total fee percentage\\r\\n        uint256 totalFeePercentage = extraFee + withdrawalFeeERC20[userDeposits[_depositId].token];\\r\\n\\r\\n        console.log(\\\"extraFee: %s\\\", extraFee);\\r\\n        console.log(\\\"totalFeePercentage: %s\\\", totalFeePercentage);\\r\\n\\r\\n        // Calculate the liquid amount to transfer after applying the total fee\\r\\n        uint256 _liquid = (_amount * (divisorERC20[userDeposits[_depositId].token] - totalFeePercentage)) / divisorERC20[userDeposits[_depositId].token];\\r\\n\\r\\n        // Update the deposit record\\r\\n        userDeposits[_depositId].deposited -= _amount;\\r\\n        userDeposits[_depositId].timeOfLastUpdate = block.timestamp;\\r\\n\\r\\n        // Get the token contract\\r\\n        IERC20 konduxERC20 = IERC20(userDeposits[_depositId].token);\\r\\n\\r\\n        // Check if the treasury contract has approved the staking contract to withdraw the tokens\\r\\n        require(konduxERC20.allowance(authority.vault(), address(this)) >= _liquid, \\\"Treasury Contract need to approve Staking Contract to withdraw your tokens -- please call an Admin\\\");\\r\\n\\r\\n        // Subtract the staked amount\\r\\n        _subtractStakedAmount(_amount, userDeposits[_depositId].token, userDeposits[_depositId].staker);\\r\\n\\r\\n        // Burn the equivalent amount of collateral tokens\\r\\n        helixERC20.burn(msg.sender, _amount * ratioERC20[userDeposits[_depositId].token]);\\r\\n        \\r\\n        // Transfer the liquid amount to the user\\r\\n        konduxERC20.transferFrom(authority.vault(), msg.sender, _liquid);\\r\\n\\r\\n        // Update the user's total rewarded amount + total rewarded amount for the token\\r\\n        _addTotalRewardedAmount(_liquid, userDeposits[_depositId].token, userDeposits[_depositId].staker); \\r\\n        _addTotalWithdrawalFees(_amount - _liquid, userDeposits[_depositId].token); \\r\\n\\r\\n        // Emit a Withdraw event\\r\\n        emit Withdraw(msg.sender, _liquid);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function allows the owner of a deposit to withdraw a specified amount of their deposited tokens\\r\\n     *      and claim their earned rewards in a single transaction. It calls the withdraw and claimRewards functions.\\r\\n     * @param _amount The amount of tokens to withdraw.\\r\\n     * @param _depositId The ID of the deposit from which to withdraw the tokens and claim the rewards.\\r\\n     */\\r\\n    function withdrawAndClaim(uint256 _amount, uint _depositId) public {\\r\\n        withdraw(_amount, _depositId);\\r\\n        claimRewards(_depositId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function retrieves the deposit information for a given deposit ID. It returns the staked amount\\r\\n     *      and the earned rewards (including unclaimed rewards) for the specified deposit.\\r\\n     * @param _depositId The ID of the deposit for which to retrieve the information.\\r\\n     * @return _stake The staked amount for the specified deposit.\\r\\n     * @return _unclaimedRewards The earned rewards (including unclaimed rewards) for the specified deposit.\\r\\n     */\\r\\n    function getDepositInfo(uint _depositId) public view returns (uint256 _stake, uint256 _unclaimedRewards) {\\r\\n        _stake = userDeposits[_depositId].deposited;  \\r\\n        _unclaimedRewards = calculateRewards(msg.sender, _depositId) + userDeposits[_depositId].unclaimedRewards;\\r\\n        return (_stake, _unclaimedRewards);  \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function returns the remaining time until the next allowed compounding action for a given deposit ID.\\r\\n     *      It calculates the remaining time based on the compound frequency for the deposited token.\\r\\n     *      If the timer has already passed, it returns 0.\\r\\n     * @param _depositId The ID of the deposit for which to return the compound timer.\\r\\n     * @return remainingTime The remaining time until the next allowed compounding action in seconds.\\r\\n     */\\r\\n    function compoundRewardsTimer(uint _depositId) public view returns (uint256 remainingTime) {\\r\\n        uint256 lastUpdateTime = userDeposits[_depositId].timeOfLastUpdate;\\r\\n        uint256 compoundFrequency = compoundFreqERC20[userDeposits[_depositId].token];\\r\\n\\r\\n        if (block.timestamp >= lastUpdateTime + compoundFrequency) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        remainingTime = (lastUpdateTime + compoundFrequency) - block.timestamp;\\r\\n        return remainingTime;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function calculates the rewards for a specified staker and deposit ID. The rewards calculation\\r\\n     *      considers the deposit's elapsed time, staked amount, and a 25% APY compounded hourly.\\r\\n     *      If the provided staker is not the owner of the deposit, the function returns 0.\\r\\n     * @param _staker The address of the staker for which to calculate the rewards.\\r\\n     * @param _depositId The ID of the deposit for which to calculate the rewards.\\r\\n     * @return rewards The calculated rewards for the specified staker and deposit ID.\\r\\n     */\\r\\n    function calculateRewards(address _staker, uint _depositId) public view returns (uint256 rewards) {\\r\\n        Staker memory deposit_ = userDeposits[_depositId];  \\r\\n\\r\\n        // Check if _staker has _depositId, if not, return 0;\\r\\n        if (deposit_.staker != _staker) {\\r\\n            return 0;\\r\\n        } \\r\\n\\r\\n        uint256 elapsedTime = block.timestamp - deposit_.timeOfLastUpdate; \\r\\n        uint256 depositedAmount = deposit_.deposited;\\r\\n\\r\\n        // Calculate 25% APR, avoiding truncating to zero\\r\\n        uint256 tokenApr = aprERC20[deposit_.token];\\r\\n        uint256 rewardPerSecond = (depositedAmount * tokenApr * 1e18) / (365 * 24 * 3600 * 100);\\r\\n        uint256 _reward = elapsedTime * rewardPerSecond / 1e18;\\r\\n\\r\\n        uint256 boostPercentage = divisorERC20[deposit_.token];\\r\\n        console.log(\\\"boostPercentage 1:\\\", boostPercentage); \\r\\n\\r\\n        if (IERC721(konduxERC721Founders).balanceOf(_staker) > 0) {\\r\\n            boostPercentage += foundersRewardBoostERC20[deposit_.token];\\r\\n        }\\r\\n        console.log(\\\"boostPercentage 2:\\\", boostPercentage); \\r\\n\\r\\n        if (IERC721(konduxERC721kNFT).balanceOf(_staker) > 0) {\\r\\n            uint256 kNFTBalance = IERC721(konduxERC721kNFT).balanceOf(_staker);\\r\\n            for (uint256 i = 0; i < kNFTBalance; i++) {\\r\\n                uint256 tokenId = IERC721Enumerable(konduxERC721kNFT).tokenOfOwnerByIndex(_staker, i);\\r\\n\\r\\n                int256 dnaVersion = IKondux(konduxERC721kNFT).readGen(tokenId, 0, 1);                \\r\\n                if (dnaVersion != 1) {\\r\\n                    continue;\\r\\n                }            \\r\\n\\r\\n                int256 dnaBoost = IKondux(konduxERC721kNFT).readGen(tokenId, 1, 2);\\r\\n                if (dnaBoost < 0) {\\r\\n                    dnaBoost = 0;\\r\\n                } else if (dnaBoost > 100) {\\r\\n                    dnaBoost = 100;\\r\\n                } // prevent overflow\\r\\n\\r\\n                boostPercentage += uint256(dnaBoost) * 100; \\r\\n                console.log(\\\"boostPercentage 3:\\\", boostPercentage); \\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (deposit_.timelockCategory > 0) {\\r\\n            boostPercentage += timelockCategoryBoost[deposit_.timelockCategory];\\r\\n        }\\r\\n        console.log(\\\"boostPercentage 4:\\\", boostPercentage); \\r\\n\\r\\n        console.log(\\\"reward pre-boost:\\\", _reward);\\r\\n\\r\\n        _reward = (_reward * boostPercentage) / divisorERC20[deposit_.token]; \\r\\n\\r\\n        console.log(\\\"reward post-boost:\\\", _reward);\\r\\n\\r\\n        return _reward;\\r\\n    }\\r\\n\\r\\n\\r\\n    // Internal functions:\\r\\n\\r\\n    /**\\r\\n     * @dev This internal function calculates the compounded rewards for a given deposited amount and number of elapsed periods.\\r\\n     *      The function assumes a fixed 25% APR and 8760 periods per year (hourly compounding). It uses exponentiation to calculate\\r\\n     *      the compounded rewards using the formula A = P * (1 + r/n)^(nt), where:\\r\\n     *          A: final amount after compounding\\r\\n     *          P: initial deposited amount\\r\\n     *          r: annual interest rate (25%)\\r\\n     *          n: number of periods in a year (8760)\\r\\n     *          t: number of elapsed periods\\r\\n     * @param _depositedAmount The initial deposited amount.\\r\\n     * @param _periodsElapsed The number of elapsed periods (hours) since the deposit.\\r\\n     * @return compound The calculated compounded rewards for the given deposited amount and elapsed periods.\\r\\n     */\\r\\n    function _calculateCompound(uint256 _depositedAmount, uint256 _periodsElapsed) internal pure returns (uint256 compound) {\\r\\n        uint256 periodsInYear = 8760; // 24 hours * 365 days\\r\\n        uint256 compoundFactor = 1 + (25 * 1e1 / periodsInYear);\\r\\n\\r\\n        //Calculate compounded rewards using exponentiation (A = P * (1 + r/n)^(nt))\\r\\n        compound = _depositedAmount * (compoundFactor ** _periodsElapsed) / (1e1 ** _periodsElapsed);\\r\\n\\r\\n        return compound;        \\r\\n    }\\r\\n        \\r\\n        \\r\\n    // Functions for modifying  staking mechanism variables:\\r\\n    /**\\r\\n     * @dev This internal function is used to update the total rewarded amount and the total rewarded amount\\r\\n     *      for a specific user and token. It is called when rewards are distributed or staked.\\r\\n     * @param _amount The amount of tokens to add to the total rewarded and user's total rewarded.\\r\\n     * @param _token The address of the token contract.\\r\\n     * @param _user The address of the user receiving the rewards.\\r\\n     */\\r\\n    function _addTotalRewardedAmount(uint256 _amount, address _token, address _user) internal {\\r\\n        totalRewarded[_token] += _amount;\\r\\n        userTotalRewardedByCoin[_token][_user] += _amount;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev This internal function adds the given amount to the total staked amount for a specified token\\r\\n     *      and increases the staked amount for the user by the same amount.\\r\\n     * @param _amount The amount to add to the total staked amount and user's staked amount.\\r\\n     * @param _token The address of the token for which to update the staked amount.\\r\\n     * @param _user The address of the user whose staked amount should be increased.\\r\\n     */\\r\\n    function _addTotalStakedAmount(uint256 _amount, address _token, address _user) internal {\\r\\n        totalStaked[_token] += _amount;\\r\\n        userTotalStakedByCoin[_token][_user] += _amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This internal function subtracts the given amount from the total staked amount for a specified token\\r\\n     *      and decreases the staked amount for the user by the same amount.\\r\\n     * @param _amount The amount to subtract from the total staked amount and user's staked amount.\\r\\n     * @param _token The address of the token for which to update the staked amount.\\r\\n     * @param _user The address of the user whose staked amount should be decreased.\\r\\n     */\\r\\n    function _subtractStakedAmount(uint256 _amount,  address _token, address _user) internal {\\r\\n        // do a underflow check\\r\\n        require(totalStaked[_token] >= _amount, \\\"Staking: Not enough staked (Contract)\\\");\\r\\n        require(userTotalStakedByCoin[_token][_user] >= _amount, \\\"Staking: Not enough staked (User)\\\");\\r\\n        totalStaked[_token] -= _amount;\\r\\n        userTotalStakedByCoin[_token][_user] -= _amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This internal function adds the given amount to the total withdrawal fees for a specified token.\\r\\n     * @param _amount The amount to add to the total withdrawal fees.\\r\\n     * @param _token The address of the token for which to update the withdrawal fees.\\r\\n     */\\r\\n    function _addTotalWithdrawalFees(uint256 _amount, address _token) internal {\\r\\n        totalWithdrawalFees[_token] += _amount;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev This function sets the APR for a specified token.\\r\\n     * @param _apr The rewards per hour value to be set, as x% APR. (e.g. 25 = 25%)\\r\\n     * @param _tokenId The address of the token for which to set the rewards per hour.\\r\\n     */\\r\\n    function setAPR(uint256 _apr, address _tokenId) public onlyGovernor {\\r\\n        aprERC20[_tokenId] = _apr; \\r\\n        emit NewAPR(_apr, _tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function sets the minimum staking amount for a specified token.\\r\\n     * @param _minStake The minimum staking amount to be set, in wei.\\r\\n     * @param _tokenId The address of the token for which to set the minimum staking amount.\\r\\n     */\\r\\n    function setMinStake(uint256 _minStake, address _tokenId) public onlyGovernor {\\r\\n        minStakeERC20[_tokenId] = _minStake;\\r\\n        emit NewMinStake(_minStake, _tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function sets the ratio for a specified ERC20 token.\\r\\n     * @param _ratio The ratio value to be set.\\r\\n     * @param _tokenId The address of the token for which to set the ratio.\\r\\n     */\\r\\n    function setRatio(uint256 _ratio, address _tokenId) public onlyGovernor {\\r\\n        ratioERC20[_tokenId] = _ratio;\\r\\n        emit NewRatio(_ratio, _tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function sets the address of the Helix ERC20 contract.\\r\\n     * @param _helix The address of the Helix ERC20 contract.\\r\\n     */\\r\\n    function setHelixERC20(address _helix) public onlyGovernor {\\r\\n        require(_helix != address(0), \\\"Helix address cannot be 0x0\\\");\\r\\n        helixERC20 = IHelix(_helix);\\r\\n        emit NewHelixERC20(_helix);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function sets the address of the konduxERC721Founders contract.\\r\\n     * @param _konduxERC721Founders The address of the konduxERC721Founders contract.\\r\\n     */\\r\\n    function setKonduxERC721Founders(address _konduxERC721Founders) public onlyGovernor {\\r\\n        require(_konduxERC721Founders != address(0), \\\"Founders address cannot be 0x0\\\");\\r\\n        konduxERC721Founders = IERC721(_konduxERC721Founders);\\r\\n        emit NewKonduxERC721Founders(_konduxERC721Founders);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function sets the address of the konduxERC721kNFT contract.\\r\\n     * @param _konduxERC721kNFT The address of the konduxERC721kNFT contract.\\r\\n     */\\r\\n    function setKonduxERC721kNFT(address _konduxERC721kNFT) public onlyGovernor {\\r\\n        require(_konduxERC721kNFT != address(0), \\\"kNFT address cannot be 0x0\\\");\\r\\n        konduxERC721kNFT = _konduxERC721kNFT;\\r\\n        emit NewKonduxERC721kNFT(_konduxERC721kNFT);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function sets the address of the Treasury contract.\\r\\n     * @param _treasury The address of the Treasury contract.\\r\\n     */\\r\\n    function setTreasury(address _treasury) public onlyGovernor {\\r\\n        require(_treasury != address(0), \\\"Treasury address cannot be 0x0\\\");\\r\\n        treasury = ITreasury(_treasury);\\r\\n        emit NewTreasury(_treasury);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function sets the withdrawal fee for a specified token.\\r\\n     * @param _withdrawalFee The withdrawal fee value to be set.\\r\\n     * @param _tokenId The address of the token for which to set the withdrawal fee.\\r\\n     */\\r\\n    function setWithdrawalFee(uint256 _withdrawalFee, address _tokenId) public onlyGovernor {\\r\\n        require(_withdrawalFee <= divisorERC20[_tokenId], \\\"Withdrawal fee cannot be more than 100%\\\");\\r\\n        withdrawalFeeERC20[_tokenId] = _withdrawalFee;\\r\\n        emit NewWithdrawalFee(_withdrawalFee, _tokenId); \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function sets the founders reward boost for a specified token.\\r\\n     * @param _foundersRewardBoost The founders reward boost value to be set.\\r\\n     * @param _tokenId The address of the token for which to set the founders reward boost.\\r\\n     */\\r\\n    function setFoundersRewardBoost(uint256 _foundersRewardBoost, address _tokenId) public onlyGovernor {\\r\\n        foundersRewardBoostERC20[_tokenId] = _foundersRewardBoost;\\r\\n        emit NewFoundersRewardBoost(_foundersRewardBoost, _tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function sets the kNFT reward boost for a specified token.\\r\\n     * @param _kNFTRewardBoost The kNFT reward boost value to be set.\\r\\n     * @param _tokenId The address of the token for which to set the kNFT reward boost.\\r\\n     */\\r\\n    function setkNFTRewardBoost(uint256 _kNFTRewardBoost, address _tokenId) public onlyGovernor {\\r\\n        kNFTRewardBoostERC20[_tokenId] = _kNFTRewardBoost;\\r\\n        emit NewKNFTRewardBoost(_kNFTRewardBoost, _tokenId); \\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev This function sets the compound frequency for a specified token.\\r\\n    * @param _compoundFreq The compound frequency value to be set.\\r\\n    * @param _tokenId The address of the token for which to set the compound frequency.\\r\\n    */\\r\\n    function setCompoundFreq(uint256 _compoundFreq, address _tokenId) public onlyGovernor {\\r\\n        compoundFreqERC20[_tokenId] = _compoundFreq;\\r\\n        emit NewCompoundFreq(_compoundFreq, _tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function sets the penalty percentage for early withdrawal of a specified token.\\r\\n     * @param token The address of the token for which to set the penalty percentage.\\r\\n     * @param penaltyPercentage The penalty percentage value to be set. Must be between 0 and 100. \\r\\n     */\\r\\n    function setEarlyWithdrawalPenalty(address token, uint256 penaltyPercentage) public onlyGovernor {\\r\\n        require(penaltyPercentage <= 100, \\\"Penalty percentage must be between 0 and 100\\\");\\r\\n        earlyWithdrawalPenalty[token] = penaltyPercentage;\\r\\n    } \\r\\n\\r\\n    /**\\r\\n     * @dev This function sets the timelock category boost for a specified category.\\r\\n     * @param _category The category for which to set the boost.\\r\\n     * @param _boost The boost value to be set.\\r\\n     */\\r\\n    function setTimelockCategoryBoost(uint _category, uint256 _boost) public onlyGovernor {\\r\\n        timelockCategoryBoost[_category] = _boost;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function sets the divisor for a specified token.\\r\\n     * @param _divisor The divisor value to be set.\\r\\n     * @param _tokenId The address of the token for which to set the divisor.\\r\\n     */\\r\\n    function setDivisorERC20(uint256 _divisor, address _tokenId) public onlyGovernor {\\r\\n        divisorERC20[_tokenId] = _divisor;\\r\\n        emit NewDivisorERC20(_divisor, _tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This internal function sets whether an ERC20 token is authorized as a staking currency.\\r\\n     * Emits a {NewAuthorizedERC20} event.\\r\\n     * @param _token The address of the token to be authorized or deauthorized.\\r\\n     * @param _authorized True to authorize the token, false to deauthorize.\\r\\n     */\\r\\n    function _setAuthorizedERC20(address _token, bool _authorized) internal {\\r\\n        require(_token != address(0), \\\"Token address cannot be 0x0\\\");\\r\\n        if (_authorized == true) {\\r\\n            require(aprERC20[_token] > 0, \\\"Rewards per hour must be greater than 0\\\");\\r\\n            require(compoundFreqERC20[_token] > 0, \\\"Compound frequency must be greater than 0\\\");\\r\\n            require(withdrawalFeeERC20[_token] > 0, \\\"Withdrawal fee must be greater than 0\\\");\\r\\n            require(foundersRewardBoostERC20[_token] > 0, \\\"Founders reward boost must be greater than 0\\\");\\r\\n            require(kNFTRewardBoostERC20[_token] > 0, \\\"kNFT reward boost must be greater than 0\\\");\\r\\n            require(ratioERC20[_token] > 0, \\\"Ratio must be greater than 0\\\");\\r\\n            require(minStakeERC20[_token] > 0, \\\"Minimum stake must be greater than 0\\\");\\r\\n            require(divisorERC20[_token] > 0, \\\"Divisor must be greater than 0\\\");\\r\\n            require(IERC20(_token).totalSupply() > 0, \\\"Token total supply must be greater than 0\\\");\\r\\n        }\\r\\n        authorizedERC20[_token] = _authorized;\\r\\n        emit NewAuthorizedERC20(_token, _authorized);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function sets whether an ERC20 token is authorized as a staking currency.\\r\\n     * Emits a {NewAuthorizedERC20} event.\\r\\n     * @param _token The address of the token to be authorized or deauthorized.\\r\\n     * @param _authorized True to authorize the token, false to deauthorize.\\r\\n     */\\r\\n    function setAuthorizedERC20(address _token, bool _authorized) public onlyGovernor {\\r\\n        _setAuthorizedERC20(_token, _authorized);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function adds a new staking token with its parameters.\\r\\n     * Emits various events based on the setter functions called during token addition.\\r\\n     * Emits a {NewAuthorizedERC20} event at the end.\\r\\n     * @param _token The address of the new staking token.\\r\\n     * @param _apr The rewards per hour for the new staking token.\\r\\n     * @param _compoundFreq The compound frequency for the new staking token.\\r\\n     * @param _withdrawalFee The withdrawal fee for the new staking token.\\r\\n     * @param _foundersRewardBoost The founders reward boost for the new staking token.\\r\\n     * @param _kNFTRewardBoost The kNFT reward boost for the new staking token.\\r\\n     * @param _ratio The ratio for the new staking token.\\r\\n     * @param _minStake The minimum stake for the new staking token.\\r\\n     */ \\r\\n    function addNewStakingToken(address _token, uint256 _apr, uint256 _compoundFreq, uint256 _withdrawalFee, uint256 _foundersRewardBoost, uint256 _kNFTRewardBoost, uint256 _ratio, uint256 _minStake) public onlyGovernor {\\r\\n        require(_token != address(0), \\\"Token address cannot be 0x0\\\");\\r\\n        require(_apr > 0, \\\"Rewards per hour must be greater than 0\\\"); \\r\\n        require(_compoundFreq > 0, \\\"Compound frequency must be greater than 0\\\");\\r\\n        require(_withdrawalFee > 0, \\\"Withdrawal fee must be greater than 0\\\");\\r\\n        require(_foundersRewardBoost > 0, \\\"Founders reward boost must be greater than 0\\\");\\r\\n        require(_kNFTRewardBoost > 0, \\\"kNFT reward boost must be greater than 0\\\");\\r\\n        require(_ratio > 0, \\\"Ratio must be greater than 0\\\");\\r\\n        require(_minStake > 0, \\\"Minimum stake must be greater than 0\\\");\\r\\n        require(IERC20(_token).totalSupply() > 0, \\\"Token total supply must be greater than 0\\\");\\r\\n\\r\\n        setDivisorERC20(10_000, _token);\\r\\n        setFoundersRewardBoost(_foundersRewardBoost, _token);\\r\\n        setkNFTRewardBoost(_kNFTRewardBoost, _token);\\r\\n        setAPR(_apr, _token); \\r\\n        setRatio(_ratio, _token);\\r\\n        setWithdrawalFee(_withdrawalFee, _token);\\r\\n        setCompoundFreq(_compoundFreq, _token);\\r\\n        setMinStake(_minStake, _token);\\r\\n\\r\\n        _setAuthorizedERC20(_token, true); \\r\\n    }\\r\\n\\r\\n\\r\\n    // Functions for getting staking mechanism variables:\\r\\n\\r\\n    /**\\r\\n     * @dev This function returns the time of the last update for the specified deposit ID.\\r\\n     * @param _depositId The ID of the deposit for which the time of the last update is requested.\\r\\n     * @return _timeOfLastUpdate The time of the last update for the specified deposit ID.\\r\\n     */\\r\\n    function getTimeOfLastUpdate(uint _depositId) public view returns (uint256 _timeOfLastUpdate) {\\r\\n        return userDeposits[_depositId].timeOfLastUpdate;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function returns the staked amount for the specified deposit ID.\\r\\n     * @param _depositId The ID of the deposit for which the staked amount is requested.\\r\\n     * @return _deposited The staked amount for the specified deposit ID.\\r\\n     */\\r\\n    function getStakedAmount(uint _depositId) public view returns (uint256 _deposited) {\\r\\n        return userDeposits[_depositId].deposited;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function returns the APR for the specified token.\\r\\n     * @param _tokenId The address of the token for which the rewards per hour are requested.\\r\\n     * @return _rewardsPerHour The rewards per hour for the specified token.\\r\\n     */\\r\\n    function getAPR(address _tokenId) public view returns (uint256 _rewardsPerHour) {\\r\\n        return aprERC20[_tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function returns the Founder's reward boost for the specified token.\\r\\n     * @param _tokenId The address of the token for which the Founder's reward boost is requested.\\r\\n     * @return _foundersRewardBoost The Founder's reward boost for the specified token.\\r\\n     */\\r\\n    function getFoundersRewardBoost(address _tokenId) public view returns (uint256 _foundersRewardBoost) {\\r\\n        return foundersRewardBoostERC20[_tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function returns the kNFT reward boost for the specified token.\\r\\n     * @param _tokenId The address of the token for which the kNFT reward boost is requested.\\r\\n     * @return _kNFTRewardBoost The kNFT reward boost for the specified token.\\r\\n     */\\r\\n    function getkNFTRewardBoost(address _tokenId) public view returns (uint256 _kNFTRewardBoost) {\\r\\n        return kNFTRewardBoostERC20[_tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function returns the minimum stake for the specified token.\\r\\n     * @param _tokenId The address of the token for which the minimum stake is requested.\\r\\n     * @return _minStake The minimum stake for the specified token.\\r\\n     */\\r\\n    function getMinStake(address _tokenId) public view returns (uint256 _minStake) {\\r\\n        return minStakeERC20[_tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function returns the timelock category for the specified deposit ID.\\r\\n     * @param _depositId The ID of the deposit for which the timelock category is requested.\\r\\n     * @return _timelockCategory The timelock category for the specified deposit ID.\\r\\n     */\\r\\n    function getTimelockCategory(uint _depositId) public view returns (uint8 _timelockCategory) {\\r\\n        return userDeposits[_depositId].timelockCategory;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function returns the timelock for the specified deposit ID.\\r\\n     * @param _depositId The ID of the deposit for which the timelock is requested.\\r\\n     * @return _timelock The timelock for the specified deposit ID.\\r\\n     */\\r\\n    function getTimelock(uint _depositId) public view returns (uint256 _timelock) {\\r\\n        return userDeposits[_depositId].timelock;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function returns the deposit IDs for the specified user.\\r\\n     * @param _user The address of the user for which the deposit IDs are requested.\\r\\n     * @return An array of deposit IDs for the specified user.\\r\\n     */\\r\\n    function getDepositIds(address _user) public view returns (uint256[] memory) {\\r\\n        return userDepositsIds[_user];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function returns the withdrawal fee for the specified token.\\r\\n     * @param _tokenId The address of the token for which the withdrawal fee is requested.\\r\\n     * @return _withdrawalFee The withdrawal fee for the specified token.\\r\\n     */\\r\\n    function getWithdrawalFee(address _tokenId) public view returns (uint256 _withdrawalFee) {\\r\\n        return withdrawalFeeERC20[_tokenId]; \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function returns the total amount staked for a specific token.\\r\\n     * @param _token The address of the token contract.\\r\\n     * @return _totalStaked The total amount staked for the given token.\\r\\n     */\\r\\n    function getTotalStaked(address _token) public view returns (uint256 _totalStaked) {\\r\\n        return totalStaked[_token];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function returns the total amount staked by a specific user for a specific token.\\r\\n     * @param _user The address of the user.\\r\\n     * @param _token The address of the token contract.\\r\\n     * @return _totalStaked The total amount staked by the user for the given token.\\r\\n     */\\r\\n    function getUserTotalStakedByCoin(address _user, address _token) public view returns (uint256 _totalStaked) {\\r\\n        return userTotalStakedByCoin[_token][_user];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function returns the total rewards earned for a specific token.\\r\\n     * @param _token The address of the token contract.\\r\\n     * @return _totalRewards The total rewards earned for the given token.\\r\\n     */\\r\\n    function getTotalRewards(address _token) public view returns (uint256 _totalRewards) {\\r\\n        return totalRewarded[_token];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function returns the total rewards earned by a specific user for a specific token.\\r\\n     * @param _user The address of the user.\\r\\n     * @param _token The address of the token contract.\\r\\n     * @return _totalRewards The total rewards earned by the user for the given token.\\r\\n     */\\r\\n    function getUserTotalRewardsByCoin(address _user, address _token) public view returns (uint256 _totalRewards) {\\r\\n        return userTotalRewardedByCoin[_token][_user]; \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function returns the total withdrawal fees for a specific token.\\r\\n     * @param _token The address of the token contract.\\r\\n     * @return _totalWithdrawalFees The total withdrawal fees for the given token.\\r\\n     */\\r\\n    function getTotalWithdrawalFees(address _token) public view returns (uint256 _totalWithdrawalFees) {\\r\\n        return totalWithdrawalFees[_token];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function returns the timestamp of the deposit with the specified ID.\\r\\n     * @param _depositId The id of the deposit for which the timestamp is requested.\\r\\n     * @return _depositTimestamp The timestamp of the deposit\\r\\n     */\\r\\n    function getDepositTimestamp(uint _depositId) public view returns (uint256 _depositTimestamp) {\\r\\n        return userDeposits[_depositId].lastDepositTime; \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function returns the penalty for early withdrawal for the specified token in basis points. (X% = X * 100)\\r\\n     * @param token The address of the token for which the penalty is requested.\\r\\n     * @return The penalty for early withdrawal for the specified token in basis points.\\r\\n     */\\r\\n    function getEarlyWithdrawalPenalty(address token) public view returns (uint256) {\\r\\n        return earlyWithdrawalPenalty[token];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function returns the timelock category boost for the specified category.\\r\\n     * @param _category The category for which the timelock category boost is requested.\\r\\n     * @return The timelock category boost for the specified category.\\r\\n     */\\r\\n    function getTimelockCategoryBoost(uint _category) public view returns (uint256) {\\r\\n        return timelockCategoryBoost[_category];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function returns the divisor for the specified token.\\r\\n     * @param _token The address of the token for which the divisor is requested.\\r\\n     * @return The divisor for the specified token.\\r\\n     */\\r\\n    function getDivisorERC20(address _token) public view returns (uint256) {\\r\\n        return divisorERC20[_token];\\r\\n    }\\r\\n}\",\"keccak256\":\"0xa85f77e79384a290aa3e2de0dd9ea4be160351474157d2ba1a07229fd16ead4c\",\"license\":\"MIT\"},\"contracts/interfaces/IAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\ninterface IAuthority {\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event RolePushed(address indexed account, bytes32 _role);\\r\\n\\r\\n    event GovernorPulled(address indexed from, address indexed to);\\r\\n    event GuardianPulled(address indexed from, address indexed to);\\r\\n    event PolicyPulled(address indexed from, address indexed to);\\r\\n    event VaultPulled(address indexed from, address indexed to);\\r\\n\\r\\n    /* ========== VIEW ========== */\\r\\n\\r\\n    function governor() external view returns (address);\\r\\n\\r\\n    function guardian() external view returns (address);\\r\\n\\r\\n    function policy() external view returns (address);\\r\\n\\r\\n    function vault() external view returns (address);\\r\\n\\r\\n    function roles(address _addr) external view returns (bytes32);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x887a7eb2eeab95bba651b3d65b3d6a4695301acb16f27722524021afa1cf97d5\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IHelix.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IHelix is IERC20 {\\r\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\r\\n    function burn(address _to, uint256 _amount) external;\\r\\n    function mint(address _to, uint256 _amount) external;\\r\\n}\",\"keccak256\":\"0xe84d0c27c30de7ed7dec020efc3fcccaa55f3d54ebaaabb3ace6354d7cd00f84\",\"license\":\"MIT\"},\"contracts/interfaces/IKondux.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\r\\n\\r\\ninterface IKondux {\\r\\n    function changeDenominator(uint96 _denominator) external returns (uint96);\\r\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\\r\\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external;\\r\\n    function setBaseURI(string memory _newURI) external returns (string memory);\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n    function pause() external;\\r\\n    function unpause() external;\\r\\n    function safeMint(address to, uint256 dna) external returns (uint256);\\r\\n    function setDna(uint256 _tokenID, uint256 _dna) external;\\r\\n    function getDna(uint256 _tokenID) external view returns (uint256);\\r\\n    function readGen(uint256 _tokenID, uint8 startIndex, uint8 endIndex) external view returns (int256);\\r\\n    function writeGen(uint256 _tokenID, uint256 inputValue, uint8 startIndex, uint8 endIndex) external;\\r\\n}\",\"keccak256\":\"0xfb119598efa90986eb299c38ed5e4cb465eff34fc97813148083008aae2078d8\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\ninterface ITreasury {\\r\\n    function deposit(\\r\\n        uint256 _amount,\\r\\n        address _token\\r\\n    ) external;\\r\\n\\r\\n    function depositEther() external payable;\\r\\n\\r\\n    function withdraw(\\r\\n        uint256 _amount,\\r\\n        address _token\\r\\n    ) external;\\r\\n\\r\\n    function withdrawTo(\\r\\n        uint256 _amount,\\r\\n        address _token,\\r\\n        address _to\\r\\n    ) external;\\r\\n\\r\\n    function withdrawEther(\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n}\",\"keccak256\":\"0xf49bf308cba46e3ffe330f85fa0842c23ed5424eeda9055fa7cc6153f52ec10c\",\"license\":\"MIT\"},\"contracts/types/AccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/IAuthority.sol\\\";\\r\\n\\r\\n/// @dev Reasoning for this contract = modifiers literaly copy code\\r\\n/// instead of pointing towards the logic to execute. Over many\\r\\n/// functions this bloats contract size unnecessarily.\\r\\n/// imho modifiers are a meme.\\r\\nabstract contract AccessControlled {\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event AuthorityUpdated(IAuthority authority);\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    IAuthority public authority;\\r\\n\\r\\n    /* ========== Constructor ========== */\\r\\n\\r\\n    constructor(IAuthority _authority) {\\r\\n        require(address(_authority) != address(0), \\\"Authority cannot be zero address\\\");\\r\\n        authority = _authority;\\r\\n        emit AuthorityUpdated(_authority);\\r\\n    }\\r\\n\\r\\n    /* ========== \\\"MODIFIERS\\\" ========== */\\r\\n\\r\\n    modifier onlyGovernor {\\r\\n        _onlyGovernor();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGuardian {\\r\\n        _onlyGuardian();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPolicy {\\r\\n        _onlyPolicy();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyVault {\\r\\n        _onlyVault();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGlobalRole(bytes32 _role){\\r\\n        _onlyRole(_role);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========== GOV ONLY ========== */\\r\\n\\r\\n    function initializeAuthority(IAuthority _newAuthority) internal {\\r\\n        require(authority == IAuthority(address(0)), \\\"AUTHORITY_INITIALIZED\\\");\\r\\n        authority = _newAuthority;\\r\\n        emit AuthorityUpdated(_newAuthority);\\r\\n    }\\r\\n\\r\\n    function setAuthority(IAuthority _newAuthority) external {\\r\\n        _onlyGovernor();\\r\\n        authority = _newAuthority;\\r\\n        emit AuthorityUpdated(_newAuthority);\\r\\n    }\\r\\n\\r\\n    /* ========== INTERNAL CHECKS ========== */\\r\\n\\r\\n    function _onlyGovernor() internal view {\\r\\n        require(msg.sender == authority.governor(), \\\"UNAUTHORIZED\\\");\\r\\n    }\\r\\n\\r\\n    function _onlyGuardian() internal view {\\r\\n        require(msg.sender == authority.guardian(), \\\"UNAUTHORIZED\\\");\\r\\n    }\\r\\n\\r\\n    function _onlyPolicy() internal view {\\r\\n        require(msg.sender == authority.policy(), \\\"UNAUTHORIZED\\\");        \\r\\n    }\\r\\n\\r\\n    function _onlyVault() internal view {\\r\\n        require(msg.sender == authority.vault(), \\\"UNAUTHORIZED\\\");                \\r\\n    }\\r\\n\\r\\n    function _onlyRole(bytes32 _role) internal view {\\r\\n        require(authority.roles(msg.sender) == _role, \\\"UNAUTHORIZED\\\");\\r\\n    }\\r\\n  \\r\\n}\\r\\n\",\"keccak256\":\"0x88528167ce46740166e5c11429138f10c80c5c340032584876c01736f5c056f3\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addNewStakingToken(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "This function adds a new staking token with its parameters. Emits various events based on the setter functions called during token addition. Emits a {NewAuthorizedERC20} event at the end.",
        "params": {
          "_apr": "The rewards per hour for the new staking token.",
          "_compoundFreq": "The compound frequency for the new staking token.",
          "_foundersRewardBoost": "The founders reward boost for the new staking token.",
          "_kNFTRewardBoost": "The kNFT reward boost for the new staking token.",
          "_minStake": "The minimum stake for the new staking token.",
          "_ratio": "The ratio for the new staking token.",
          "_token": "The address of the new staking token.",
          "_withdrawalFee": "The withdrawal fee for the new staking token."
        }
      },
      "calculateRewards(address,uint256)": {
        "details": "This function calculates the rewards for a specified staker and deposit ID. The rewards calculation      considers the deposit's elapsed time, staked amount, and a 25% APY compounded hourly.      If the provided staker is not the owner of the deposit, the function returns 0.",
        "params": {
          "_depositId": "The ID of the deposit for which to calculate the rewards.",
          "_staker": "The address of the staker for which to calculate the rewards."
        },
        "returns": {
          "rewards": "The calculated rewards for the specified staker and deposit ID."
        }
      },
      "claimRewards(uint256)": {
        "details": "This function allows the owner of a deposit to claim their earned rewards.      It verifies that the caller is the deposit owner and that the timelock has passed.      The function calculates the rewards, resets the unclaimed rewards to zero, and updates the deposit record.      The reward tokens are burned, and the earned rewards are transferred to the user from the vault.      The function emits a Reward event upon successful execution.",
        "params": {
          "_depositId": "The ID of the deposit whose rewards are to be claimed."
        }
      },
      "compoundRewardsTimer(uint256)": {
        "details": "This function returns the remaining time until the next allowed compounding action for a given deposit ID.      It calculates the remaining time based on the compound frequency for the deposited token.      If the timer has already passed, it returns 0.",
        "params": {
          "_depositId": "The ID of the deposit for which to return the compound timer."
        },
        "returns": {
          "remainingTime": "The remaining time until the next allowed compounding action in seconds."
        }
      },
      "constructor": {
        "details": "Initializes the staking contract with the provided parameters.",
        "params": {
          "_authority": "The address of the authority contract.",
          "_helixERC20": "The address of the Helix ERC20 token contract. The constructor sets up the initial state of the staking contract by initializing contract variables, setting up default staking token parameters, and authorizing the Kondux ERC20 token for staking.",
          "_konduxERC20": "The address of the Kondux ERC20 token contract.",
          "_konduxERC721Founders": "The address of the Kondux ERC721 Founders token contract.",
          "_konduxERC721kNFT": "The address of the Kondux ERC721 kNFT token contract.",
          "_treasury": "The address of the treasury contract."
        }
      },
      "deposit(uint256,uint8,address)": {
        "details": "This function allows a user to deposit a specified amount of an authorized token with a selected timelock period.      The function checks the user's token balance, allowance, and the timelock value before proceeding.      It then creates a new deposit record, sets the timelock based on the selected category, and updates the user's      deposit list and total staked amount. The specified amount of tokens is transferred from the user to the vault,      and an equivalent amount of reward tokens is minted for the user.",
        "params": {
          "_amount": "The amount of tokens to deposit.",
          "_timelock": "The timelock category, represented as an integer (0-4).",
          "_token": "The address of the token contract."
        },
        "returns": {
          "_0": "_id The deposit ID assigned to this deposit."
        }
      },
      "getAPR(address)": {
        "details": "This function returns the APR for the specified token.",
        "params": {
          "_tokenId": "The address of the token for which the rewards per hour are requested."
        },
        "returns": {
          "_rewardsPerHour": "The rewards per hour for the specified token."
        }
      },
      "getDepositIds(address)": {
        "details": "This function returns the deposit IDs for the specified user.",
        "params": {
          "_user": "The address of the user for which the deposit IDs are requested."
        },
        "returns": {
          "_0": "An array of deposit IDs for the specified user."
        }
      },
      "getDepositInfo(uint256)": {
        "details": "This function retrieves the deposit information for a given deposit ID. It returns the staked amount      and the earned rewards (including unclaimed rewards) for the specified deposit.",
        "params": {
          "_depositId": "The ID of the deposit for which to retrieve the information."
        },
        "returns": {
          "_stake": "The staked amount for the specified deposit.",
          "_unclaimedRewards": "The earned rewards (including unclaimed rewards) for the specified deposit."
        }
      },
      "getDepositTimestamp(uint256)": {
        "details": "This function returns the timestamp of the deposit with the specified ID.",
        "params": {
          "_depositId": "The id of the deposit for which the timestamp is requested."
        },
        "returns": {
          "_depositTimestamp": "The timestamp of the deposit"
        }
      },
      "getDivisorERC20(address)": {
        "details": "This function returns the divisor for the specified token.",
        "params": {
          "_token": "The address of the token for which the divisor is requested."
        },
        "returns": {
          "_0": "The divisor for the specified token."
        }
      },
      "getEarlyWithdrawalPenalty(address)": {
        "details": "This function returns the penalty for early withdrawal for the specified token in basis points. (X% = X * 100)",
        "params": {
          "token": "The address of the token for which the penalty is requested."
        },
        "returns": {
          "_0": "The penalty for early withdrawal for the specified token in basis points."
        }
      },
      "getFoundersRewardBoost(address)": {
        "details": "This function returns the Founder's reward boost for the specified token.",
        "params": {
          "_tokenId": "The address of the token for which the Founder's reward boost is requested."
        },
        "returns": {
          "_foundersRewardBoost": "The Founder's reward boost for the specified token."
        }
      },
      "getMinStake(address)": {
        "details": "This function returns the minimum stake for the specified token.",
        "params": {
          "_tokenId": "The address of the token for which the minimum stake is requested."
        },
        "returns": {
          "_minStake": "The minimum stake for the specified token."
        }
      },
      "getStakedAmount(uint256)": {
        "details": "This function returns the staked amount for the specified deposit ID.",
        "params": {
          "_depositId": "The ID of the deposit for which the staked amount is requested."
        },
        "returns": {
          "_deposited": "The staked amount for the specified deposit ID."
        }
      },
      "getTimeOfLastUpdate(uint256)": {
        "details": "This function returns the time of the last update for the specified deposit ID.",
        "params": {
          "_depositId": "The ID of the deposit for which the time of the last update is requested."
        },
        "returns": {
          "_timeOfLastUpdate": "The time of the last update for the specified deposit ID."
        }
      },
      "getTimelock(uint256)": {
        "details": "This function returns the timelock for the specified deposit ID.",
        "params": {
          "_depositId": "The ID of the deposit for which the timelock is requested."
        },
        "returns": {
          "_timelock": "The timelock for the specified deposit ID."
        }
      },
      "getTimelockCategory(uint256)": {
        "details": "This function returns the timelock category for the specified deposit ID.",
        "params": {
          "_depositId": "The ID of the deposit for which the timelock category is requested."
        },
        "returns": {
          "_timelockCategory": "The timelock category for the specified deposit ID."
        }
      },
      "getTimelockCategoryBoost(uint256)": {
        "details": "This function returns the timelock category boost for the specified category.",
        "params": {
          "_category": "The category for which the timelock category boost is requested."
        },
        "returns": {
          "_0": "The timelock category boost for the specified category."
        }
      },
      "getTotalRewards(address)": {
        "details": "This function returns the total rewards earned for a specific token.",
        "params": {
          "_token": "The address of the token contract."
        },
        "returns": {
          "_totalRewards": "The total rewards earned for the given token."
        }
      },
      "getTotalStaked(address)": {
        "details": "This function returns the total amount staked for a specific token.",
        "params": {
          "_token": "The address of the token contract."
        },
        "returns": {
          "_totalStaked": "The total amount staked for the given token."
        }
      },
      "getTotalWithdrawalFees(address)": {
        "details": "This function returns the total withdrawal fees for a specific token.",
        "params": {
          "_token": "The address of the token contract."
        },
        "returns": {
          "_totalWithdrawalFees": "The total withdrawal fees for the given token."
        }
      },
      "getUserTotalRewardsByCoin(address,address)": {
        "details": "This function returns the total rewards earned by a specific user for a specific token.",
        "params": {
          "_token": "The address of the token contract.",
          "_user": "The address of the user."
        },
        "returns": {
          "_totalRewards": "The total rewards earned by the user for the given token."
        }
      },
      "getUserTotalStakedByCoin(address,address)": {
        "details": "This function returns the total amount staked by a specific user for a specific token.",
        "params": {
          "_token": "The address of the token contract.",
          "_user": "The address of the user."
        },
        "returns": {
          "_totalStaked": "The total amount staked by the user for the given token."
        }
      },
      "getWithdrawalFee(address)": {
        "details": "This function returns the withdrawal fee for the specified token.",
        "params": {
          "_tokenId": "The address of the token for which the withdrawal fee is requested."
        },
        "returns": {
          "_withdrawalFee": "The withdrawal fee for the specified token."
        }
      },
      "getkNFTRewardBoost(address)": {
        "details": "This function returns the kNFT reward boost for the specified token.",
        "params": {
          "_tokenId": "The address of the token for which the kNFT reward boost is requested."
        },
        "returns": {
          "_kNFTRewardBoost": "The kNFT reward boost for the specified token."
        }
      },
      "setAPR(uint256,address)": {
        "details": "This function sets the APR for a specified token.",
        "params": {
          "_apr": "The rewards per hour value to be set, as x% APR. (e.g. 25 = 25%)",
          "_tokenId": "The address of the token for which to set the rewards per hour."
        }
      },
      "setAuthorizedERC20(address,bool)": {
        "details": "This function sets whether an ERC20 token is authorized as a staking currency. Emits a {NewAuthorizedERC20} event.",
        "params": {
          "_authorized": "True to authorize the token, false to deauthorize.",
          "_token": "The address of the token to be authorized or deauthorized."
        }
      },
      "setCompoundFreq(uint256,address)": {
        "details": "This function sets the compound frequency for a specified token.",
        "params": {
          "_compoundFreq": "The compound frequency value to be set.",
          "_tokenId": "The address of the token for which to set the compound frequency."
        }
      },
      "setDivisorERC20(uint256,address)": {
        "details": "This function sets the divisor for a specified token.",
        "params": {
          "_divisor": "The divisor value to be set.",
          "_tokenId": "The address of the token for which to set the divisor."
        }
      },
      "setEarlyWithdrawalPenalty(address,uint256)": {
        "details": "This function sets the penalty percentage for early withdrawal of a specified token.",
        "params": {
          "penaltyPercentage": "The penalty percentage value to be set. Must be between 0 and 100. ",
          "token": "The address of the token for which to set the penalty percentage."
        }
      },
      "setFoundersRewardBoost(uint256,address)": {
        "details": "This function sets the founders reward boost for a specified token.",
        "params": {
          "_foundersRewardBoost": "The founders reward boost value to be set.",
          "_tokenId": "The address of the token for which to set the founders reward boost."
        }
      },
      "setHelixERC20(address)": {
        "details": "This function sets the address of the Helix ERC20 contract.",
        "params": {
          "_helix": "The address of the Helix ERC20 contract."
        }
      },
      "setKonduxERC721Founders(address)": {
        "details": "This function sets the address of the konduxERC721Founders contract.",
        "params": {
          "_konduxERC721Founders": "The address of the konduxERC721Founders contract."
        }
      },
      "setKonduxERC721kNFT(address)": {
        "details": "This function sets the address of the konduxERC721kNFT contract.",
        "params": {
          "_konduxERC721kNFT": "The address of the konduxERC721kNFT contract."
        }
      },
      "setMinStake(uint256,address)": {
        "details": "This function sets the minimum staking amount for a specified token.",
        "params": {
          "_minStake": "The minimum staking amount to be set, in wei.",
          "_tokenId": "The address of the token for which to set the minimum staking amount."
        }
      },
      "setRatio(uint256,address)": {
        "details": "This function sets the ratio for a specified ERC20 token.",
        "params": {
          "_ratio": "The ratio value to be set.",
          "_tokenId": "The address of the token for which to set the ratio."
        }
      },
      "setTimelockCategoryBoost(uint256,uint256)": {
        "details": "This function sets the timelock category boost for a specified category.",
        "params": {
          "_boost": "The boost value to be set.",
          "_category": "The category for which to set the boost."
        }
      },
      "setTreasury(address)": {
        "details": "This function sets the address of the Treasury contract.",
        "params": {
          "_treasury": "The address of the Treasury contract."
        }
      },
      "setWithdrawalFee(uint256,address)": {
        "details": "This function sets the withdrawal fee for a specified token.",
        "params": {
          "_tokenId": "The address of the token for which to set the withdrawal fee.",
          "_withdrawalFee": "The withdrawal fee value to be set."
        }
      },
      "setkNFTRewardBoost(uint256,address)": {
        "details": "This function sets the kNFT reward boost for a specified token.",
        "params": {
          "_kNFTRewardBoost": "The kNFT reward boost value to be set.",
          "_tokenId": "The address of the token for which to set the kNFT reward boost."
        }
      },
      "stakeRewards(uint256)": {
        "details": "This function allows the owner of a deposit to stake their earned rewards.      It verifies that the caller is the deposit owner and that the compounding is not happening too soon.      The function calculates the rewards, resets the unclaimed rewards to zero, and updates the deposit record.      The total staked amount is updated, and an equivalent amount of reward tokens is minted for the user.",
        "params": {
          "_depositId": "The ID of the deposit whose rewards are to be staked."
        }
      },
      "withdraw(uint256,uint256)": {
        "details": "This function allows the owner of a deposit to withdraw a specified amount of their deposited tokens.      It verifies that the timelock has passed, the caller is the deposit owner, and the withdrawal amount      is within the available limits. The function calculates the rewards, updates the deposit record, and      transfers the liquid amount to the user after applying the withdrawal fee. The collateral tokens are burned.      The function emits a Withdraw event upon successful execution.",
        "params": {
          "_amount": "The amount of tokens to withdraw.",
          "_depositId": "The ID of the deposit from which to withdraw the tokens."
        }
      },
      "withdrawAndClaim(uint256,uint256)": {
        "details": "This function allows the owner of a deposit to withdraw a specified amount of their deposited tokens      and claim their earned rewards in a single transaction. It calls the withdraw and claimRewards functions.",
        "params": {
          "_amount": "The amount of tokens to withdraw.",
          "_depositId": "The ID of the deposit from which to withdraw the tokens and claim the rewards."
        }
      },
      "withdrawBeforeTimelock(uint256,uint256)": {
        "details": "This function allows the owner of a deposit to withdraw a specified amount of their deposited tokens      before the timelock has passed. The user is punished by not receiving any reward boosts and paying an extra      fee proportional to the time left until the lock (the closer to the end of the locking time, the smaller the fee,      starting at 10%).      It verifies that the caller is the deposit owner, and the withdrawal amount is within the available limits.      The function calculates the rewards, updates the deposit record, and transfers the liquid amount to the user      after applying the extra fee and withdrawal fee. The collateral tokens are burned.      The function emits a Withdraw event upon successful execution.",
        "params": {
          "_amount": "The amount of tokens to withdraw.",
          "_depositId": "The ID of the deposit from which to withdraw the tokens."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3346,
        "contract": "contracts/Staking.sol:Staking",
        "label": "authority",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAuthority)3169"
      },
      {
        "astId": 330,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_depositIds",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)230_storage"
      },
      {
        "astId": 362,
        "contract": "contracts/Staking.sol:Staking",
        "label": "userDepositsIds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 367,
        "contract": "contracts/Staking.sol:Staking",
        "label": "userDeposits",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Staker)349_storage)"
      },
      {
        "astId": 371,
        "contract": "contracts/Staking.sol:Staking",
        "label": "authorizedERC20",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 375,
        "contract": "contracts/Staking.sol:Staking",
        "label": "minStakeERC20",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 379,
        "contract": "contracts/Staking.sol:Staking",
        "label": "compoundFreqERC20",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 383,
        "contract": "contracts/Staking.sol:Staking",
        "label": "aprERC20",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 387,
        "contract": "contracts/Staking.sol:Staking",
        "label": "withdrawalFeeERC20",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 391,
        "contract": "contracts/Staking.sol:Staking",
        "label": "foundersRewardBoostERC20",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 395,
        "contract": "contracts/Staking.sol:Staking",
        "label": "kNFTRewardBoostERC20",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 399,
        "contract": "contracts/Staking.sol:Staking",
        "label": "ratioERC20",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 403,
        "contract": "contracts/Staking.sol:Staking",
        "label": "totalStaked",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 409,
        "contract": "contracts/Staking.sol:Staking",
        "label": "userTotalStakedByCoin",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 413,
        "contract": "contracts/Staking.sol:Staking",
        "label": "totalRewarded",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 419,
        "contract": "contracts/Staking.sol:Staking",
        "label": "userTotalRewardedByCoin",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 423,
        "contract": "contracts/Staking.sol:Staking",
        "label": "totalWithdrawalFees",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 427,
        "contract": "contracts/Staking.sol:Staking",
        "label": "earlyWithdrawalPenalty",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 431,
        "contract": "contracts/Staking.sol:Staking",
        "label": "timelockCategoryBoost",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 435,
        "contract": "contracts/Staking.sol:Staking",
        "label": "divisorERC20",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 438,
        "contract": "contracts/Staking.sol:Staking",
        "label": "helixERC20",
        "offset": 0,
        "slot": "20",
        "type": "t_contract(IHelix)3207"
      },
      {
        "astId": 441,
        "contract": "contracts/Staking.sol:Staking",
        "label": "konduxERC721Founders",
        "offset": 0,
        "slot": "21",
        "type": "t_contract(IERC721)193"
      },
      {
        "astId": 443,
        "contract": "contracts/Staking.sol:Staking",
        "label": "konduxERC721kNFT",
        "offset": 0,
        "slot": "22",
        "type": "t_address"
      },
      {
        "astId": 446,
        "contract": "contracts/Staking.sol:Staking",
        "label": "treasury",
        "offset": 0,
        "slot": "23",
        "type": "t_contract(ITreasury)3334"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAuthority)3169": {
        "encoding": "inplace",
        "label": "contract IAuthority",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721)193": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_contract(IHelix)3207": {
        "encoding": "inplace",
        "label": "contract IHelix",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)3334": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Staker)349_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Staking.Staker)",
        "numberOfBytes": "32",
        "value": "t_struct(Staker)349_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Counter)230_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 229,
            "contract": "contracts/Staking.sol:Staking",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Staker)349_storage": {
        "encoding": "inplace",
        "label": "struct Staking.Staker",
        "members": [
          {
            "astId": 332,
            "contract": "contracts/Staking.sol:Staking",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 334,
            "contract": "contracts/Staking.sol:Staking",
            "label": "staker",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 336,
            "contract": "contracts/Staking.sol:Staking",
            "label": "deposited",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 338,
            "contract": "contracts/Staking.sol:Staking",
            "label": "redeemed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 340,
            "contract": "contracts/Staking.sol:Staking",
            "label": "timeOfLastUpdate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 342,
            "contract": "contracts/Staking.sol:Staking",
            "label": "lastDepositTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 344,
            "contract": "contracts/Staking.sol:Staking",
            "label": "unclaimedRewards",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 346,
            "contract": "contracts/Staking.sol:Staking",
            "label": "timelock",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 348,
            "contract": "contracts/Staking.sol:Staking",
            "label": "timelockCategory",
            "offset": 0,
            "slot": "8",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}