{
  "language": "Solidity",
  "sources": {
    "contracts/KNDX_ERC20.sol": {
      "content": "//SPDX-License-Identifier: MIT \r\npragma solidity 0.8.17;\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction decimals() external view returns (uint8);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction name() external view returns (string memory);\r\n\tfunction getOwner() external view returns (address);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction allowance(address _owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n\taddress internal owner;\r\n\tconstructor(address _owner) { owner = _owner; }\r\n\tmodifier onlyOwner() { require(msg.sender == owner, \"Only contract owner can call this function\"); _; }\r\n\tfunction transferOwnership(address payable newOwner) external onlyOwner { owner = newOwner; emit OwnershipTransferred(newOwner); }\r\n\tevent OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IUniswapV2Factory { function createPair(address tokenA, address tokenB) external returns (address pair); }\r\ninterface IUniswapV2Router02 {\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n\tfunction WETH() external pure returns (address);\r\n\tfunction factory() external pure returns (address);\r\n\tfunction addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract KNDX is IERC20, Auth {\r\n\tstring constant _name = \"Kondux\";\r\n\tstring constant _symbol = \"KNDX\";\r\n\tuint8 constant _decimals = 9;\r\n\tuint256 constant _totalSupply = 1_000_000_000 * 10**_decimals;\r\n\tmapping (address => uint256) _balances;\r\n\tmapping (address => mapping (address => uint256)) _allowances;\r\n\tmapping (address => bool) public excludedFromFees;\r\n\tbool public tradingOpen;\r\n\tuint256 public taxSwapMin; uint256 public taxSwapMax;\r\n\tmapping (address => bool) private _isLiqPool;\r\n\tuint8 constant _maxTaxRate = 5; \r\n\tuint8 public taxRateBuy; uint8 public taxRateSell;\r\n\r\n\tbool public antiBotEnabled;\r\n\tmapping (address => bool) public excludedFromAntiBot;\r\n\tmapping (address => uint256) private _lastSwapBlock;\r\n\r\n\taddress payable private taxWallet = payable(0x79BD02b5936FFdC5915cB7Cd58156E3169F4F569);\r\n\r\n\tbool private _inTaxSwap = false;\r\n\taddress private constant _uniswapV2RouterAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\tIUniswapV2Router02 private _uniswapV2Router;\r\n\tmodifier lockTaxSwap { _inTaxSwap = true; _; _inTaxSwap = false; }\r\n\r\n\tevent TokensAirdropped(uint256 totalWallets, uint256 totalTokens);\r\n\tevent TokensBurned(address indexed burnedByWallet, uint256 tokenAmount);\r\n\tevent TaxWalletChanged(address newTaxWallet);\r\n\tevent TaxRateChanged(uint8 newBuyTax, uint8 newSellTax);\r\n\r\n\tconstructor () Auth(msg.sender) {      \r\n\t\ttaxSwapMin = _totalSupply * 10 / 10000;\r\n\t\ttaxSwapMax = _totalSupply * 50 / 10000;\r\n\t\t_uniswapV2Router = IUniswapV2Router02(_uniswapV2RouterAddress);\r\n\t\texcludedFromFees[_uniswapV2RouterAddress] = true;\r\n\r\n\t\texcludedFromAntiBot[owner] = true;\r\n\t\texcludedFromAntiBot[address(this)] = true;\r\n\r\n\t\texcludedFromFees[owner] = true;\r\n\t\texcludedFromFees[address(this)] = true;\r\n\t\texcludedFromFees[taxWallet] = true;\r\n\t}\r\n\r\n\treceive() external payable {}\r\n\t\r\n\tfunction totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n\tfunction decimals() external pure override returns (uint8) { return _decimals; }\r\n\tfunction symbol() external pure override returns (string memory) { return _symbol; }\r\n\tfunction name() external pure override returns (string memory) { return _name; }\r\n\tfunction getOwner() external view override returns (address) { return owner; }\r\n\tfunction balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n\tfunction allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n\t\t_allowances[msg.sender][spender] = amount;\r\n\t\temit Approval(msg.sender, spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) external override returns (bool) {\r\n\t\trequire(_checkTradingOpen(), \"Trading not open\");\r\n\t\treturn _transferFrom(msg.sender, recipient, amount);\r\n\t}\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n\t\trequire(_checkTradingOpen(), \"Trading not open\");\r\n\t\tif (_allowances[sender][msg.sender] != type(uint256).max){\r\n\t\t\t_allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n\t\t}\r\n\t\treturn _transferFrom(sender, recipient, amount);\r\n\t}\r\n\r\n\tfunction _distributeInitialBalances() internal {\r\n\t\t//holder airdrops 27.965%, 1556 wallets\r\n\t\tuint256 airdropTokensAmount = 279_646_010 * 10**_decimals;\r\n\t\t_balances[owner] = airdropTokensAmount;\r\n\t\temit Transfer(address(0), owner, airdropTokensAmount ); \r\n\r\n\t\t// Treasury 25%: 0x1D0A105F0cED39b207AE444957cc70483c04C767\r\n\t\tuint256 treasuryAmount = 250_000_000 * 10**_decimals;\r\n\t\t_balances[address(0x1D0A105F0cED39b207AE444957cc70483c04C767)] = treasuryAmount;\r\n\t\temit Transfer(address(0), address(0x1D0A105F0cED39b207AE444957cc70483c04C767), treasuryAmount );\r\n\r\n\t\t// Dev Fund 19.462% : 0xac5c6FDd4F32977eec56C48978bAe86CE08968e0 \r\n\t\tuint256 devFundAmount = 194_620_743 * 10**_decimals;\r\n\t\t_balances[address(0xac5c6FDd4F32977eec56C48978bAe86CE08968e0)] = devFundAmount;\r\n\t\temit Transfer(address(0), address(0xac5c6FDd4F32977eec56C48978bAe86CE08968e0), devFundAmount );\r\n\r\n\t\t// Rewards pool 15%: 0x94baCbCceE5c16520Ab8545c35e89eCE7017a34D \r\n\t\tuint256 rewardsPoolAmount = 150_000_000 * 10**_decimals;\r\n\t\t_balances[address(0x94baCbCceE5c16520Ab8545c35e89eCE7017a34D)] = rewardsPoolAmount;\r\n\t\temit Transfer(address(0), address(0x94baCbCceE5c16520Ab8545c35e89eCE7017a34D), rewardsPoolAmount );\r\n\r\n\t\t// Marketing 44076978.428271124 : 0xCbE59E5967B80Ad18764d49c9184E6249aFe2D28 \r\n\t\tuint256 marketingAmount = 44_076_978 * 10**_decimals;\r\n\t\t_balances[address(0xCbE59E5967B80Ad18764d49c9184E6249aFe2D28)] = marketingAmount;\r\n\t\temit Transfer(address(0), address(0xCbE59E5967B80Ad18764d49c9184E6249aFe2D28), marketingAmount );\r\n\r\n\t\t//liquidity pool is 2.507%\r\n\t\tuint256 liquidityPoolAmount = 25_066_478 * 10**_decimals; \r\n\t\t_balances[address(this)] = liquidityPoolAmount;\r\n\t\temit Transfer(address(0), address(this), liquidityPoolAmount );\r\n\r\n\t\t// Burn amount (diff between total supply and the above, ~ 5.659%\r\n\t\tuint256 burnAmount = _totalSupply - (airdropTokensAmount+treasuryAmount+devFundAmount+rewardsPoolAmount+marketingAmount+liquidityPoolAmount);\r\n\t\t_balances[address(0)] = burnAmount;\r\n\t\temit Transfer(address(0), address(0), burnAmount );\r\n\t\temit TokensBurned(address(0), burnAmount);\r\n\t}\r\n\r\n\tfunction initLP() external onlyOwner {\r\n\t\trequire(!tradingOpen, \"trading already open\");\r\n\r\n\t\t_distributeInitialBalances();\r\n\r\n\t\tuint256 _contractETHBalance = address(this).balance;\r\n\t\trequire(_contractETHBalance > 0, \"no eth in contract\");\r\n\t\tuint256 _contractTokenBalance = balanceOf(address(this));\r\n\t\trequire(_contractTokenBalance > 0, \"no tokens\");\r\n\t\taddress _uniLpAddr = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n\t\t_isLiqPool[_uniLpAddr] = true;\r\n\r\n\t\t_approveRouter(_contractTokenBalance);\r\n\t\t_addLiquidity(_contractTokenBalance, _contractETHBalance, false);\r\n\r\n\t\t// _openTrading(); //trading will be open manually through enableTrading() function\r\n\t}\r\n\r\n\tfunction _approveRouter(uint256 _tokenAmount) internal {\r\n\t\tif ( _allowances[address(this)][_uniswapV2RouterAddress] < _tokenAmount ) {\r\n\t\t\t_allowances[address(this)][_uniswapV2RouterAddress] = type(uint256).max;\r\n\t\t\temit Approval(address(this), _uniswapV2RouterAddress, type(uint256).max);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _addLiquidity(uint256 _tokenAmount, uint256 _ethAmountWei, bool autoburn) internal {\r\n\t\taddress lpTokenRecipient = address(0);\r\n\t\tif ( !autoburn ) { lpTokenRecipient = owner; }\r\n\t\t_uniswapV2Router.addLiquidityETH{value: _ethAmountWei} ( address(this), _tokenAmount, 0, 0, lpTokenRecipient, block.timestamp );\r\n\t}\r\n\r\n    function enableTrading() external onlyOwner {\r\n        _openTrading();\r\n    }\r\n\r\n\tfunction _openTrading() internal {\r\n        require(!tradingOpen, \"trading already open\");\r\n\t\ttaxRateBuy = 3;\r\n\t\ttaxRateSell = 3;\r\n\t\ttradingOpen = true;\r\n\t}\r\n\r\n\tfunction _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n\t\trequire(sender != address(0) || recipient != address(0), \"Zero wallet cannot do transfers.\");\r\n\t\tif ( tradingOpen ) {\r\n\t\t\tif ( antiBotEnabled ) { checkAntiBot(sender, recipient); }\r\n\t\t\tif ( !_inTaxSwap && _isLiqPool[recipient] ) { _swapTaxAndDistributeEth(); }\r\n\t\t}\r\n\r\n\t\tuint256 _taxAmount = _calculateTax(sender, recipient, amount);\r\n\t\tuint256 _transferAmount = amount - _taxAmount;\r\n\t\t_balances[sender] = _balances[sender] - amount;\r\n\t\tif ( _taxAmount > 0 ) { _balances[address(this)] = _balances[address(this)] + _taxAmount; }\r\n\t\t_balances[recipient] = _balances[recipient] + _transferAmount;\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _checkTradingOpen() private view returns (bool){\r\n\t\tbool checkResult = false;\r\n\t\tif ( tradingOpen ) { checkResult = true; } \r\n\t\telse if ( tx.origin == owner ) { checkResult = true; } \r\n\t\treturn checkResult;\r\n\t}\r\n\r\n\tfunction _calculateTax(address sender, address recipient, uint256 amount) internal view returns (uint256) {\r\n\t\tuint256 taxAmount;\r\n\t\tif ( !tradingOpen || excludedFromFees[sender] || excludedFromFees[recipient] ) { taxAmount = 0; }\r\n\t\telse if ( _isLiqPool[sender] ) { taxAmount = amount * taxRateBuy / 100; }\r\n\t\telse if ( _isLiqPool[recipient] ) { taxAmount = amount * taxRateSell / 100; }\r\n\t\telse { taxAmount = 0; }\r\n\t\treturn taxAmount;\r\n\t}\r\n\r\n\r\n\tfunction burnTokens(uint256 amount) external {\r\n\t\t//burns tokens from the msg.sender's wallet\r\n\t\tuint256 _tokensAvailable = balanceOf(msg.sender);\r\n\t\trequire(amount <= _tokensAvailable, \"Token balance too low\");\r\n\t\t_balances[msg.sender] -= amount;\r\n\t\t_balances[address(0)] += amount;\r\n\t\temit Transfer(msg.sender,address(0), amount);\r\n\t\temit TokensBurned(msg.sender, amount);\r\n\t}\r\n\r\n\r\n\tfunction checkAntiBot(address sender, address recipient) internal {\r\n\t\tif ( _isLiqPool[sender] && !excludedFromAntiBot[recipient] ) { //buy transactions\r\n\t\t\trequire(_lastSwapBlock[recipient] < block.number, \"AntiBot triggered\");\r\n\t\t\t_lastSwapBlock[recipient] = block.number;\r\n\t\t} else if ( _isLiqPool[recipient] && !excludedFromAntiBot[sender] ) { //sell transactions\r\n\t\t\trequire(_lastSwapBlock[sender] < block.number, \"AntiBot triggered\");\r\n\t\t\t_lastSwapBlock[sender] = block.number;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction enableAntiBot(bool isEnabled) external onlyOwner {\r\n\t\tantiBotEnabled = isEnabled;\r\n\t}\r\n\r\n\tfunction excludeFromAntiBot(address wallet, bool isExcluded) external onlyOwner {\r\n\t\tif (!isExcluded) { require(wallet != address(this) && wallet != owner, \"This address must be excluded\" ); }\r\n\t\texcludedFromAntiBot[wallet] = isExcluded;\r\n\t}\r\n\r\n\tfunction excludeFromFees(address wallet, bool isExcluded) external onlyOwner {\r\n\t\tif (isExcluded) { require(wallet != address(this) && wallet != owner, \"Cannot enforce fees for this address\"); }\r\n\t\texcludedFromFees[wallet] = isExcluded;\r\n\t}\r\n\r\n\tfunction adjustTaxRate(uint8 newBuyTax, uint8 newSellTax) external onlyOwner {\r\n\t\trequire(newBuyTax <= _maxTaxRate && newSellTax <= _maxTaxRate, \"Tax too high\");\r\n\t\t//set new tax rate percentage - cannot be higher than the default rate 5%\r\n\t\ttaxRateBuy = newBuyTax;\r\n\t\ttaxRateSell = newSellTax;\r\n\t\temit TaxRateChanged(newBuyTax, newSellTax);\r\n\t}\r\n  \r\n\tfunction setTaxWallet(address newTaxWallet) external onlyOwner {\r\n\t\ttaxWallet = payable(newTaxWallet);\r\n\t\texcludedFromFees[newTaxWallet] = true;\r\n\t\temit TaxWalletChanged(newTaxWallet);\r\n\t}\r\n\r\n\tfunction taxSwapSettings(uint32 minValue, uint32 minDivider, uint32 maxValue, uint32 maxDivider) external onlyOwner {\r\n\t\ttaxSwapMin = _totalSupply * minValue / minDivider;\r\n\t\ttaxSwapMax = _totalSupply * maxValue / maxDivider;\r\n\t\trequire(taxSwapMax>=taxSwapMin, \"MinMax error\");\r\n\t\trequire(taxSwapMax>_totalSupply / 10000, \"Upper threshold too low\");\r\n\t\trequire(taxSwapMax<_totalSupply * 2 / 100, \"Upper threshold too high\");\r\n\t}\r\n\r\n\tfunction _swapTaxAndDistributeEth() private lockTaxSwap {\r\n\t\tuint256 _taxTokensAvailable = balanceOf(address(this));\r\n\t\tif ( _taxTokensAvailable >= taxSwapMin && tradingOpen ) {\r\n\t\t\tif ( _taxTokensAvailable >= taxSwapMax ) { _taxTokensAvailable = taxSwapMax; }\r\n\t\t\tif ( _taxTokensAvailable > 10**_decimals) {\r\n\t\t\t\t_swapTaxTokensForEth(_taxTokensAvailable);\r\n\t\t\t\tuint256 _contractETHBalance = address(this).balance;\r\n\t\t\t\tif (_contractETHBalance > 0) { _distributeTaxEth(_contractETHBalance); }\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _swapTaxTokensForEth(uint256 _tokenAmount) private {\r\n\t\t_approveRouter(_tokenAmount);\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = _uniswapV2Router.WETH();\r\n\t\t_uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(_tokenAmount,0,path,address(this),block.timestamp);\r\n\t}\r\n\r\n\tfunction _distributeTaxEth(uint256 _amount) private {\r\n\t\ttaxWallet.transfer(_amount);\r\n\t}\r\n\r\n\tfunction taxTokensSwap() external onlyOwner {\r\n\t\tuint256 taxTokenBalance = balanceOf(address(this));\r\n\t\trequire(taxTokenBalance > 0, \"No tokens\");\r\n\t\t_swapTaxTokensForEth(taxTokenBalance);\r\n\t}\r\n\r\n\tfunction taxEthSend() external onlyOwner { \r\n\t\tuint256 _contractEthBalance = address(this).balance;\r\n\t\trequire(_contractEthBalance > 0, \"No ETH in contract to distribute\");\r\n\t\t_distributeTaxEth(_contractEthBalance); \r\n\t}\r\n\r\n\tfunction airdrop(address[] calldata addresses, uint256[] calldata tokenAmounts) external onlyOwner {\r\n        require(addresses.length <= 250,\"Wallet count over 250 (gas risk)\");\r\n        require(addresses.length == tokenAmounts.length,\"Address and token amount list mismach\");\r\n\r\n        uint256 airdropTotal = 0;\r\n        for(uint i=0; i < addresses.length; i++){\r\n            airdropTotal += (tokenAmounts[i] * 10**_decimals);\r\n        }\r\n        require(_balances[msg.sender] >= airdropTotal, \"Token balance lower than airdrop total\");\r\n\r\n        for(uint i=0; i < addresses.length; i++){\r\n            _balances[msg.sender] -= (tokenAmounts[i] * 10**_decimals);\r\n            _balances[addresses[i]] += (tokenAmounts[i] * 10**_decimals);\r\n\t\t\temit Transfer(msg.sender, addresses[i], (tokenAmounts[i] * 10**_decimals) );       \r\n        }\r\n\r\n        emit TokensAirdropped(addresses.length, airdropTotal);\r\n    }\r\n\r\n    // for Testing\r\n    function faucet(uint256 _amount) public {\r\n        _balances[msg.sender] += _amount * 10**_decimals; \r\n        emit Transfer(address(0), msg.sender, _amount); \r\n    }\r\n}"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}