{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/Helix.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\r\n\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\n\r\n/**\r\n * @title Helix\r\n * @dev A custom ERC20 token with access control and whitelisting features. \r\n *      The token supports minting and burning, and restricts transfers to only allowed contracts.\r\n */\r\ncontract Helix is ERC20, AccessControl {\r\n    // Define the roles\r\n    bytes32 public constant ADMIN_ROLE = keccak256(\"DEFAULT_ADMIN_ROLE\");\r\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n    bytes32 public constant BURNER_ROLE = keccak256(\"BURNER_ROLE\");\r\n\r\n    // Flag to enable or disable unrestricted transfers\r\n    bool public enableUnrestrictedTransfers;\r\n\r\n    // Whitelist of allowed contracts\r\n    mapping(address => bool) public allowedContracts;\r\n\r\n    /**\r\n     * @dev Constructor that initializes the token and sets up the roles.\r\n     * @param _name The name of the token.\r\n     * @param _ticker The ticker symbol of the token.\r\n     */\r\n    constructor(string memory _name, string memory _ticker) ERC20(_name, _ticker) {\r\n        enableUnrestrictedTransfers = false;\r\n        _setupRole(ADMIN_ROLE, msg.sender);\r\n        _setupRole(MINTER_ROLE, msg.sender);\r\n        _setupRole(BURNER_ROLE, msg.sender);\r\n    }\r\n\r\n    // Modifiers for checking roles\r\n    modifier onlyAdmin() {\r\n        require(hasRole(ADMIN_ROLE, msg.sender), \"HelixToken: only admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(hasRole(MINTER_ROLE, msg.sender), \"HelixToken: only minter\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyBurner() {\r\n        require(hasRole(BURNER_ROLE, msg.sender), \"HelixToken: only burner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Add or remove a contract from the whitelist.\r\n     * @param contractAddress The address of the contract to be added/removed.\r\n     * @param allowed Flag to indicate if the contract should be added (true) or removed (false).\r\n     */\r\n    function setAllowedContract(address contractAddress, bool allowed) public onlyAdmin {\r\n        allowedContracts[contractAddress] = allowed;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an address is a contract by examining its code size.\r\n     * @param addr The address to check.\r\n     * @return bool true if the address is a contract, false otherwise.\r\n     */\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if a contract is whitelisted.\r\n     * @param addr The address of the contract to check.\r\n     * @return bool true if the contract is whitelisted, false otherwise.\r\n     */\r\n    function isWhitelistedContract(address addr) internal view returns (bool) {\r\n        if (!isContract(addr)) {\r\n            return false;\r\n        }\r\n        return allowedContracts[addr];\r\n    }\r\n\r\n    /**\r\n     * @dev Override the _beforeTokenTransfer function from the ERC20 contract.\r\n     * @param from The address sending the tokens.\r\n     * @param to The address receiving the tokens.\r\n     * @param amount The amount of tokens to transfer.\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\r\n        // Allow minting and burning\r\n        if (from == address(0) || to == address(0)) {\r\n            super._beforeTokenTransfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        // Allow transfers initiated by whitelisted contracts on behalf of users or when unrestricted transfers are enabled\r\n        if (isWhitelistedContract(msg.sender) || enableUnrestrictedTransfers) {\r\n            super._beforeTokenTransfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        // Disallow all other transfers\r\n        revert(\"HelixToken: direct transfers not allowed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Expose mint and burn functions only to the corresponding roles.\r\n     * @param to The address to mint tokens to.\r\n     * @param amount The amount of tokens to mint.\r\n     */\r\n    function mint(address to, uint256 amount) public onlyMinter {\r\n        _mint(to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Expose burn function only to the corresponding roles.\r\n     * @param from The address from which tokens will be burned.\r\n     * @param amount The amount of tokens to burn.\r\n     */\r\n    function burn(address from, uint256 amount) public onlyBurner {\r\n        _burn(from, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Toggle the enableUnrestrictedTransfers flag.\r\n     * @param enabled The new state of the enableUnrestrictedTransfers flag.\r\n     */\r\n    function setEnableUnrestrictedTransfers(bool enabled) public onlyAdmin {\r\n        enableUnrestrictedTransfers = enabled;\r\n    }\r\n\r\n    /**\r\n     * @dev Add or remove a role from an address.\r\n     * @param role The role identifier (keccak256 hash of the role name).\r\n     * @param addr The address for which the role will be granted or revoked.\r\n     * @param enabled Flag to indicate if the role should be granted (true) or revoked (false).\r\n     */\r\n    function setRole(bytes32 role, address addr, bool enabled) public onlyAdmin {\r\n        if (enabled) {\r\n            _grantRole(role, addr);\r\n        } else {\r\n            _revokeRole(role, addr);\r\n        }\r\n    }\r\n}\r\n/**\r\n    This contract defines a custom ERC20 token named Helix, with additional features such as access control and whitelisting. The token is mintable and burnable, and direct transfers between non-whitelisted addresses are disallowed.\r\n\r\n    The contract includes the following functions:\r\n\r\n    constructor(): Initializes the token and sets up roles.\r\n    setAllowedContract(): Adds or removes a contract from the whitelist.\r\n    isContract(): Checks if an address is a contract.\r\n    isWhitelistedContract(): Checks if a contract is whitelisted.\r\n    _beforeTokenTransfer(): Overrides the ERC20 _beforeTokenTransfer function to enforce transfer restrictions.\r\n    mint(): Exposes the mint function only to minters.\r\n    burn(): Exposes the burn function only to burners.\r\n    setEnableUnrestrictedTransfers(): Toggles the enableUnrestrictedTransfers flag.\r\n    setRole(): Adds or removes a role from an address.\r\n    \r\n    The contract makes use of several modifiers to enforce role-based access control:\r\n\r\n    onlyAdmin(): Ensures only users with the ADMIN_ROLE can call a function.\r\n    onlyMinter(): Ensures only users with the MINTER_ROLE can call a function.\r\n    onlyBurner(): Ensures only users with the BURNER_ROLE can call a function.\r\n*/"
    },
    "contracts/interfaces/IAuthority.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\r\npragma solidity >=0.8.9;\r\n\r\ninterface IAuthority {\r\n    /* ========== EVENTS ========== */\r\n\r\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\r\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\r\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\r\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\r\n    event RolePushed(address indexed account, bytes32 _role);\r\n\r\n    event GovernorPulled(address indexed from, address indexed to);\r\n    event GuardianPulled(address indexed from, address indexed to);\r\n    event PolicyPulled(address indexed from, address indexed to);\r\n    event VaultPulled(address indexed from, address indexed to);\r\n\r\n    /* ========== VIEW ========== */\r\n\r\n    function governor() external view returns (address);\r\n\r\n    function guardian() external view returns (address);\r\n\r\n    function policy() external view returns (address);\r\n\r\n    function vault() external view returns (address);\r\n\r\n    function roles(address _addr) external view returns (bytes32);\r\n\r\n}\r\n"
    },
    "contracts/interfaces/IHelix.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IHelix is IERC20 {\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\r\n    function burn(address _to, uint256 _amount) external;\r\n    function mint(address _to, uint256 _amount) external;\r\n}"
    },
    "contracts/interfaces/ITreasury.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.9;\r\n\r\ninterface ITreasury {\r\n    function deposit(\r\n        uint256 _amount,\r\n        address _token\r\n    ) external;\r\n\r\n    function depositEther() external payable;\r\n\r\n    function withdraw(\r\n        uint256 _amount,\r\n        address _token\r\n    ) external;\r\n\r\n    function withdrawTo(\r\n        uint256 _amount,\r\n        address _token,\r\n        address _to\r\n    ) external;\r\n\r\n    function withdrawEther(\r\n        uint256 _amount\r\n    ) external;\r\n}"
    },
    "contracts/Staking.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"./interfaces/ITreasury.sol\";\r\nimport \"./interfaces/IHelix.sol\";\r\nimport \"./types/AccessControlled.sol\";\r\n\r\ncontract Staking is AccessControlled {\r\n    using Counters for Counters.Counter;\r\n\r\n    Counters.Counter private _depositIds;\r\n\r\n    /**\r\n     * @dev Struct representing a staker's information.\r\n     */\r\n    struct Staker {\r\n        // The address of the staked token\r\n        address token;\r\n        // The address of the staker\r\n        address staker;\r\n        // The total amount of tokens deposited by the staker\r\n        uint256 deposited;\r\n        // The total amount of tokens redeemed by the staker\r\n        uint256 redeemed;\r\n        // The timestamp of the last update for this staker's deposit\r\n        uint256 timeOfLastUpdate;\r\n        // The timestamp of the staker's last deposit\r\n        uint256 lastDepositTime;\r\n        // The accumulated, but unclaimed rewards for the staker. These are calculated\r\n        // each time a user writes to the contract\r\n        uint256 unclaimedRewards;\r\n        // The duration of the timelock applied to the staker's deposit\r\n        uint256 timelock;\r\n        // The category of the timelock applied to the staker's deposit\r\n        uint8 timelockCategory;\r\n    }\r\n\r\n    enum LockingTimes {        \r\n        OneMonth, // 0\r\n        ThreeMonths, // 1\r\n        SixMonths, // 2\r\n        OneYear, // 3\r\n        Test // 4\r\n    }\r\n\r\n    // The deposit IDs associated with a user's address\r\n    mapping(address => uint[]) public userDepositsIds;\r\n\r\n    // The Staker struct information associated with a deposit ID\r\n    mapping(uint => Staker) public userDeposits;\r\n\r\n    // Indicates whether a specific ERC20 token is authorized for staking\r\n    mapping (address => bool) public authorizedERC20;\r\n\r\n    // The minimum amount required to stake for a specific ERC20 token\r\n    mapping (address => uint256) public minStakeERC20;\r\n\r\n    // The compound frequency for a specific ERC20 token\r\n    mapping (address => uint256) public compoundFreqERC20;\r\n\r\n    // The rewards per hour for a specific ERC20 token\r\n    mapping (address => uint256) public aprERC20;\r\n\r\n    // The withdrawal fee for a specific ERC20 token\r\n    mapping (address => uint256) public withdrawalFeeERC20;\r\n\r\n    // The withdrawal fee divisor for a specific ERC20 token\r\n    mapping (address => uint256) public withdrawalFeeDivisorERC20;\r\n\r\n    // The founders reward boost for a specific ERC20 token\r\n    mapping (address => uint256) public foundersRewardBoostERC20;\r\n\r\n    // The founders reward boost divisor for a specific ERC20 token\r\n    mapping (address => uint256) public foundersRewardBoostDivisorERC20;\r\n\r\n    // The kNFT reward boost for a specific ERC20 token\r\n    mapping (address => uint256) public kNFTRewardBoostERC20;\r\n\r\n    // The kNFT reward boost divisor for a specific ERC20 token\r\n    mapping (address => uint256) public kNFTRewardBoostDivisorERC20;\r\n\r\n    // The ratio for a specific ERC20 token\r\n    mapping (address => uint256) public ratioERC20;\r\n\r\n    // The total amount staked for a specific ERC20 token\r\n    mapping (address => uint256) public totalStaked;\r\n\r\n    // The total amount staked by a user for a specific ERC20 token\r\n    mapping (address => mapping (address => uint256)) public userTotalStakedByCoin;\r\n\r\n    // The total amount rewarded for a specific ERC20 token\r\n    mapping (address => uint256) public totalRewarded;\r\n\r\n    // The total amount rewarded by a user for a specific ERC20 token\r\n    mapping (address => mapping (address => uint256)) public userTotalRewardedByCoin;\r\n\r\n    IHelix public helixERC20; // Helix ERC20 Token\r\n    IERC721 public konduxERC721Founders; // Kondux ERC721 Founders Token\r\n    IERC721 public konduxERC721kNFT; // Kondux ERC721 kNFT Token\r\n    ITreasury public treasury; // Treasury Contract\r\n\r\n    // Events\r\n    // Emitted when a staker withdraws their rewards\r\n    event Withdraw(address indexed staker, uint256 amount);\r\n\r\n    // Emitted when a staker withdraws all their rewards\r\n    event WithdrawAll(address indexed staker, uint256 amount);\r\n\r\n    // Emitted when a staker compounds their rewards\r\n    event Compound(address indexed staker, uint256 amount);\r\n\r\n    // Emitted when a staker stakes their tokens\r\n    event Stake(uint indexed id, address indexed staker, address token, uint256 amount);\r\n\r\n    // Emitted when a staker unstakes their tokens\r\n    event Unstake(address indexed staker, uint256 amount);\r\n\r\n    // Emitted when a staker receives a reward\r\n    event Reward(address indexed staker, uint256 amount);\r\n\r\n    // Emitted when the rewards per hour is updated for a token\r\n    event NewAPR(uint256 indexed amount, address indexed token);\r\n\r\n    // Emitted when the minimum stake is updated for a token\r\n    event NewMinStake(uint256 indexed amount, address indexed token);\r\n\r\n    // Emitted when the compound frequency is updated for a token\r\n    event NewCompoundFreq(uint256 indexed amount, address indexed token);\r\n\r\n    // Emitted when the Helix ERC20 token is updated\r\n    event NewHelixERC20(address indexed helixERC20);\r\n\r\n    // Emitted when the Kondux ERC721 Founders token is updated\r\n    event NewKonduxERC721Founders(address indexed konduxERC721Founders);\r\n\r\n    // Emitted when the Kondux ERC721 kNFT token is updated\r\n    event NewKonduxERC721kNFT(address indexed konduxERC721kNFT);\r\n\r\n    // Emitted when the treasury address is updated\r\n    event NewTreasury(address indexed treasury);\r\n\r\n    // Emitted when the withdrawal fee is updated for a token\r\n    event NewWithdrawalFee(uint256 indexed amount, address indexed token);\r\n\r\n    // Emitted when the withdrawal fee divisor is updated for a token\r\n    event NewWithdrawalFeeDivisor(uint256 indexed amount, address indexed token);\r\n\r\n    // Emitted when the founders reward boost is updated for a token\r\n    event NewFoundersRewardBoost(uint256 indexed amount, address indexed token);\r\n\r\n    // Emitted when the founders reward boost divisor is updated for a token\r\n    event NewFoundersRewardBoostDivisor(uint256 indexed amount, address indexed token);\r\n\r\n    // Emitted when the kNFT reward boost is updated for a token\r\n    event NewKNFTRewardBoost(uint256 indexed amount, address indexed token);\r\n\r\n    // Emitted when the kNFT reward boost divisor is updated for a token\r\n    event NewKNFTRewardBoostDivisor(uint256 indexed amount, address indexed token);\r\n\r\n    // Emitted when a token is authorized or deauthorized for staking\r\n    event NewAuthorizedERC20(address indexed token, bool indexed authorized);\r\n\r\n    // Emitted when the ratio is updated for a token\r\n    event NewRatio(uint256 indexed amount, address indexed token);\r\n \r\n\r\n    /**\r\n     * @dev Initializes the staking contract with the provided parameters.\r\n     *\r\n     * @param _authority The address of the authority contract.\r\n     * @param _konduxERC20 The address of the Kondux ERC20 token contract.\r\n     * @param _treasury The address of the treasury contract.\r\n     * @param _konduxERC721Founders The address of the Kondux ERC721 Founders token contract.\r\n     * @param _konduxERC721kNFT The address of the Kondux ERC721 kNFT token contract.\r\n     * @param _helixERC20 The address of the Helix ERC20 token contract.\r\n     *\r\n     * The constructor sets up the initial state of the staking contract by initializing contract variables,\r\n     * setting up default staking token parameters, and authorizing the Kondux ERC20 token for staking.\r\n     */\r\n    constructor(\r\n        address _authority,\r\n        address _konduxERC20,\r\n        address _treasury,\r\n        address _konduxERC721Founders,\r\n        address _konduxERC721kNFT,\r\n        address _helixERC20\r\n    ) AccessControlled(IAuthority(_authority)) {\r\n        // Ensure the provided addresses are valid\r\n        require(_konduxERC20 != address(0), \"Kondux ERC20 address is not set\");\r\n        require(_treasury != address(0), \"Treasury address is not set\");\r\n        require(_konduxERC721Founders != address(0), \"Kondux ERC721 Founders address is not set\");\r\n        require(_konduxERC721kNFT != address(0), \"Kondux ERC721 kNFT address is not set\");\r\n        require(_helixERC20 != address(0), \"Helix ERC20 address is not set\");\r\n\r\n        // Initialize contract variables\r\n        konduxERC721Founders = IERC721(_konduxERC721Founders);\r\n        konduxERC721kNFT = IERC721(_konduxERC721kNFT);\r\n        helixERC20 = IHelix(_helixERC20);\r\n        treasury = ITreasury(_treasury);\r\n\r\n        // Set up default staking token parameters\r\n        setWithdrawalFeeDivisor(10_000_000, _konduxERC20); // 10,000,000 basis points\r\n        setFoundersRewardBoostDivisor(10_000_000, _konduxERC20); // 10,000,000 basis points\r\n        setkNFTRewardBoostDivisor(10_000_000, _konduxERC20); // 10,000,000 basis points\r\n        setWithdrawalFee(100_000, _konduxERC20); // 1% fee on withdrawal or 100,000/10,000,000\r\n        setFoundersRewardBoost(11_000_000, _konduxERC20); // 10% boost (=110%) on rewards or 1,000,000/10,000,000\r\n        setkNFTRewardBoost(500_000, _konduxERC20); // 5% boost on rewards or 500,000/10,000,000\r\n        setMinStake(10_000_000, _konduxERC20); // 10,000,000 wei\r\n        setAPR(25, _konduxERC20); // 0.00285%/h or 25% APR\r\n        setCompoundFreq(60 * 60 * 24, _konduxERC20); // 24 hours\r\n        setRatio(10_000, _konduxERC20); // 10,000:1 ratio\r\n        _setAuthorizedERC20(_konduxERC20, true);\r\n    }\r\n\r\n    /**\r\n     * @dev This function allows a user to deposit a specified amount of an authorized token with a selected timelock period.\r\n     *      The function checks the user's token balance, allowance, and the timelock value before proceeding.\r\n     *      It then creates a new deposit record, sets the timelock based on the selected category, and updates the user's\r\n     *      deposit list and total staked amount. The specified amount of tokens is transferred from the user to the vault,\r\n     *      and an equivalent amount of reward tokens is minted for the user.\r\n     * @param _amount The amount of tokens to deposit.\r\n     * @param _timelock The timelock category, represented as an integer (0-4).\r\n     * @param _token The address of the token contract.\r\n     * @return _id The deposit ID assigned to this deposit.\r\n     */\r\n    function deposit(uint256 _amount, uint8 _timelock, address _token) public returns (uint) {\r\n        // Check if the token is authorized for staking\r\n        require(authorizedERC20[_token], \"Token not authorized\");\r\n        // Check if the deposit amount is greater than or equal to the minimum required stake\r\n        require(_amount >= minStakeERC20[_token], \"Amount smaller than minimimum deposit\");\r\n        IERC20 konduxERC20 = IERC20(_token);\r\n        // Check if the user has enough balance to stake the specified amount\r\n        require(konduxERC20.balanceOf(msg.sender) >= _amount, \"Can't stake more than you own\");\r\n        // Check if the user has approved the staking contract to spend the specified amount\r\n        require(konduxERC20.allowance(msg.sender, address(this)) >= _amount, \"Allowance not set\");\r\n        // Check if the selected timelock category is valid (between 0 and 4)\r\n        require(_timelock >= 0 && _timelock <= 4, \"Invalid timelock\");\r\n\r\n        // Get the current deposit ID\r\n        uint _id = _depositIds.current();\r\n\r\n        // Create a new deposit record for the user\r\n        userDeposits[_id] = Staker({\r\n            token: _token,\r\n            staker: msg.sender,\r\n            deposited: _amount,\r\n            unclaimedRewards: 0,\r\n            timelock: 0,\r\n            timelockCategory: _timelock,\r\n            timeOfLastUpdate: block.timestamp,\r\n            lastDepositTime: block.timestamp,\r\n            redeemed: 0\r\n        });\r\n\r\n        // Set the timelock period based on the selected category\r\n        if (_timelock == uint8(LockingTimes.OneMonth)) {\r\n            userDeposits[_id].timelock = block.timestamp + 30 days; // 1 month\r\n        } else if (_timelock == uint8(LockingTimes.ThreeMonths)) {\r\n            userDeposits[_id].timelock = block.timestamp + 90 days; // 3 months\r\n        } else if (_timelock == uint8(LockingTimes.SixMonths)) {\r\n            userDeposits[_id].timelock = block.timestamp + 180 days; // 6 months\r\n        } else if (_timelock == uint8(LockingTimes.OneYear)) {\r\n            userDeposits[_id].timelock = block.timestamp + 365 days; // 1 year \r\n        } else if (_timelock == uint8(LockingTimes.Test)) {\r\n            userDeposits[_id].timelock = block.timestamp + 2 minutes; // 2 minutes // TEST\r\n        }\r\n\r\n        // Add the deposit ID to the user's deposit list\r\n        userDepositsIds[msg.sender].push(_id);\r\n\r\n        // Update the user's total staked amount\r\n        _addTotalStakedAmount(_amount, _token, msg.sender);\r\n\r\n        // Transfer the deposited tokens from the user to the vault\r\n        konduxERC20.transferFrom(msg.sender, authority.vault(), _amount);\r\n        // Mint an equivalent amount of reward tokens for the user\r\n        helixERC20.mint(msg.sender, _amount * ratioERC20[_token]);\r\n\r\n        // Increment the deposit ID counter\r\n        _depositIds.increment();\r\n\r\n        // Emit a Stake event\r\n        emit Stake(_id, msg.sender, _token, _amount);\r\n\r\n        return _id;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev This function allows the owner of a deposit to stake their earned rewards.\r\n     *      It verifies that the caller is the deposit owner and that the compounding is not happening too soon.\r\n     *      The function calculates the rewards, resets the unclaimed rewards to zero, and updates the deposit record.\r\n     *      The total staked amount is updated, and an equivalent amount of reward tokens is minted for the user.\r\n     * @param _depositId The ID of the deposit whose rewards are to be staked.\r\n     */\r\n    function stakeRewards(uint _depositId) public {\r\n        // Verify that the caller is the owner of the deposit\r\n        require(msg.sender == userDeposits[_depositId].staker, \"You are not the owner of this deposit\");\r\n        // Verify that the user is not trying to compound rewards too soon\r\n        require(compoundRewardsTimer(_depositId) == 0, \"Tried to compound rewards too soon\");\r\n\r\n        // Calculate the rewards and add any unclaimed rewards\r\n        uint256 rewards = calculateRewards(msg.sender, _depositId) + userDeposits[_depositId].unclaimedRewards;\r\n        // Reset the unclaimed rewards to zero\r\n        userDeposits[_depositId].unclaimedRewards = 0;\r\n        // Update the deposited amount with the compounded rewards\r\n        userDeposits[_depositId].deposited += rewards;\r\n        // Update the time of the last update\r\n        userDeposits[_depositId].timeOfLastUpdate = block.timestamp;\r\n\r\n        // Update the user's total staked amount\r\n        _addTotalStakedAmount(rewards, userDeposits[_depositId].token, userDeposits[_depositId].staker);\r\n\r\n        // Mint an equivalent amount of reward tokens for the user\r\n        helixERC20.mint(msg.sender, rewards * ratioERC20[userDeposits[_depositId].token]);\r\n\r\n        // Emit a Compound event\r\n        emit Compound(msg.sender, rewards);\r\n    }\r\n\r\n    /**\r\n     * @dev This function allows the owner of a deposit to claim their earned rewards.\r\n     *      It verifies that the caller is the deposit owner and that the timelock has passed.\r\n     *      The function calculates the rewards, resets the unclaimed rewards to zero, and updates the deposit record.\r\n     *      The reward tokens are burned, and the earned rewards are transferred to the user from the vault.\r\n     *      The function emits a Reward event upon successful execution.\r\n     * @param _depositId The ID of the deposit whose rewards are to be claimed.\r\n     */\r\n    function claimRewards(uint _depositId) public {\r\n        require(msg.sender == userDeposits[_depositId].staker, \"You are not the owner of this deposit\");\r\n        require(block.timestamp >= userDeposits[_depositId].timelock, \"Timelock not passed\");\r\n\r\n        uint256 rewards = calculateRewards(msg.sender, _depositId) + userDeposits[_depositId].unclaimedRewards;\r\n\r\n        require(rewards > 0, \"You have no rewards\");\r\n\r\n        userDeposits[_depositId].unclaimedRewards = 0;\r\n        userDeposits[_depositId].timeOfLastUpdate = block.timestamp;\r\n\r\n        helixERC20.burn(msg.sender, rewards * ratioERC20[userDeposits[_depositId].token]);\r\n        IERC20 konduxERC20 = IERC20(userDeposits[_depositId].token);\r\n\r\n        uint256 netRewards = (rewards * (withdrawalFeeDivisorERC20[userDeposits[_depositId].token] - withdrawalFeeERC20[userDeposits[_depositId].token])) / withdrawalFeeDivisorERC20[userDeposits[_depositId].token];\r\n\r\n        konduxERC20.transferFrom(authority.vault(), msg.sender, netRewards); \r\n\r\n        _addTotalRewardedAmount(netRewards, userDeposits[_depositId].token, userDeposits[_depositId].staker);\r\n\r\n        emit Reward(msg.sender, netRewards);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev This function allows the owner of a deposit to withdraw a specified amount of their deposited tokens.\r\n     *      It verifies that the timelock has passed, the caller is the deposit owner, and the withdrawal amount\r\n     *      is within the available limits. The function calculates the rewards, updates the deposit record, and\r\n     *      transfers the liquid amount to the user after applying the withdrawal fee. The collateral tokens are burned.\r\n     *      The function emits a Withdraw event upon successful execution.\r\n     * @param _amount The amount of tokens to withdraw.\r\n     * @param _depositId The ID of the deposit from which to withdraw the tokens.\r\n     */\r\n    function withdraw(uint256 _amount, uint _depositId) public {\r\n        // Verify that the timelock has passed\r\n        require(block.timestamp >= userDeposits[_depositId].timelock, \"Timelock not passed\");\r\n        // Verify that the caller is the owner of the deposit\r\n        require(msg.sender == userDeposits[_depositId].staker, \"You are not the owner of this deposit\");\r\n        // Verify that the withdrawal amount is within the available limits\r\n        require(userDeposits[_depositId].deposited >= _amount, \"Can't withdraw more than you have\");\r\n        // Verify that the withdrawal amount is less than or equal to the collateral tokens the user has\r\n        require(_amount <= helixERC20.balanceOf(msg.sender), \"Can't withdraw more tokens than the collateral you have\");\r\n\r\n        // Calculate the rewards\r\n        uint256 _rewards = calculateRewards(msg.sender, _depositId);\r\n        // Update the deposit record\r\n        userDeposits[_depositId].deposited -= _amount;\r\n        userDeposits[_depositId].timeOfLastUpdate = block.timestamp;\r\n        userDeposits[_depositId].unclaimedRewards += _rewards;\r\n\r\n        // Calculate the liquid amount to transfer after applying the withdrawal fee\r\n        // _liquid = (_amount * (withdrawalFeeDivisor - withdrawalFee)) / withdrawalFeeDivisor\r\n        uint256 _liquid = (_amount * (withdrawalFeeDivisorERC20[userDeposits[_depositId].token] - withdrawalFeeERC20[userDeposits[_depositId].token])) / withdrawalFeeDivisorERC20[userDeposits[_depositId].token];\r\n\r\n        // Get the token contract\r\n        IERC20 konduxERC20 = IERC20(userDeposits[_depositId].token);\r\n\r\n        // Check if the treasury contract has approved the staking contract to withdraw the tokens\r\n        require(konduxERC20.allowance(authority.vault(), address(this)) >= _liquid, \"Treasury Contract need to approve Staking Contract to withdraw your tokens -- please call an Admin\");\r\n\r\n        // Subtract the staked amount\r\n        _subtractStakedAmount(_amount, userDeposits[_depositId].token, userDeposits[_depositId].staker);\r\n\r\n        // Burn the equivalent amount of collateral tokens\r\n        helixERC20.burn(msg.sender, _amount * ratioERC20[userDeposits[_depositId].token]);\r\n        \r\n        // Transfer the liquid amount to the user\r\n        konduxERC20.transferFrom(authority.vault(), msg.sender, _liquid);\r\n\r\n        // Update the user's total rewarded amount + total rewarded amount for the token\r\n        _addTotalRewardedAmount(_liquid, userDeposits[_depositId].token, userDeposits[_depositId].staker); \r\n\r\n        // Emit a Withdraw event\r\n        emit Withdraw(msg.sender, _liquid);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev This function allows the owner of a deposit to withdraw a specified amount of their deposited tokens\r\n     *      and claim their earned rewards in a single transaction. It calls the withdraw and claimRewards functions.\r\n     * @param _amount The amount of tokens to withdraw.\r\n     * @param _depositId The ID of the deposit from which to withdraw the tokens and claim the rewards.\r\n     */\r\n    function withdrawAndClaim(uint256 _amount, uint _depositId) public {\r\n        withdraw(_amount, _depositId);\r\n        claimRewards(_depositId);\r\n    }\r\n\r\n    /**\r\n     * @dev This function retrieves the deposit information for a given deposit ID. It returns the staked amount\r\n     *      and the earned rewards (including unclaimed rewards) for the specified deposit.\r\n     * @param _depositId The ID of the deposit for which to retrieve the information.\r\n     * @return _stake The staked amount for the specified deposit.\r\n     * @return _unclaimedRewards The earned rewards (including unclaimed rewards) for the specified deposit.\r\n     */\r\n    function getDepositInfo(uint _depositId) public view returns (uint256 _stake, uint256 _unclaimedRewards) {\r\n        _stake = userDeposits[_depositId].deposited;  \r\n        _unclaimedRewards = calculateRewards(msg.sender, _depositId) + userDeposits[_depositId].unclaimedRewards;\r\n        return (_stake, _unclaimedRewards);  \r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the remaining time until the next allowed compounding action for a given deposit ID.\r\n     *      It calculates the remaining time based on the compound frequency for the deposited token.\r\n     *      If the timer has already passed, it returns 0.\r\n     * @param _depositId The ID of the deposit for which to return the compound timer.\r\n     * @return remainingTime The remaining time until the next allowed compounding action in seconds.\r\n     */\r\n    function compoundRewardsTimer(uint _depositId) public view returns (uint256 remainingTime) {\r\n        uint256 lastUpdateTime = userDeposits[_depositId].timeOfLastUpdate;\r\n        uint256 compoundFrequency = compoundFreqERC20[userDeposits[_depositId].token];\r\n\r\n        if (block.timestamp >= lastUpdateTime + compoundFrequency) {\r\n            return 0;\r\n        }\r\n\r\n        remainingTime = (lastUpdateTime + compoundFrequency) - block.timestamp;\r\n        return remainingTime;\r\n    }\r\n\r\n    /**\r\n     * @dev This function calculates the rewards for a specified staker and deposit ID. The rewards calculation\r\n     *      considers the deposit's elapsed time, staked amount, and a 25% APY compounded hourly.\r\n     *      If the provided staker is not the owner of the deposit, the function returns 0.\r\n     * @param _staker The address of the staker for which to calculate the rewards.\r\n     * @param _depositId The ID of the deposit for which to calculate the rewards.\r\n     * @return rewards The calculated rewards for the specified staker and deposit ID.\r\n     */\r\n    function calculateRewards(address _staker, uint _depositId) public view returns (uint256 rewards) {\r\n        // Check if _staker has _depositId, if not, return 0;\r\n        if (userDeposits[_depositId].staker != _staker) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 elapsedTime = block.timestamp - userDeposits[_depositId].timeOfLastUpdate;\r\n        uint256 depositedAmount = userDeposits[_depositId].deposited;\r\n\r\n        // Avoid division by 0 by returning 0 if elapsed time is lower then 1 hour\r\n        if (elapsedTime < 1 hours) {\r\n            return 0;\r\n        }\r\n\r\n        // Calculate 25% APR, avoiding truncating to zero\r\n        uint256 rewardPerSecond = (depositedAmount * aprERC20[userDeposits[_depositId].token] * 1e18) / (365 * 24 * 3600 * 100);\r\n        uint256 _reward = elapsedTime * rewardPerSecond / 1e18;\r\n\r\n        if (IERC721(konduxERC721Founders).balanceOf(_staker) > 0) {\r\n            _reward = (_reward * foundersRewardBoostERC20[userDeposits[_depositId].token]) / foundersRewardBoostDivisorERC20[userDeposits[_depositId].token];\r\n        }\r\n\r\n        if (IERC721(konduxERC721kNFT).balanceOf(_staker) > 0) {\r\n            uint256 _kNFTBalance = IERC721(konduxERC721kNFT).balanceOf(_staker);\r\n            if (_kNFTBalance > 5) {\r\n                _kNFTBalance = 5;\r\n            }\r\n            \r\n            //give 5% more for each kNFT owned using kNFTRewardBoost\r\n            _reward = (_reward * (kNFTRewardBoostDivisorERC20[userDeposits[_depositId].token] + (_kNFTBalance * kNFTRewardBoostERC20[userDeposits[_depositId].token]))) / kNFTRewardBoostDivisorERC20[userDeposits[_depositId].token];\r\n\r\n        }\r\n\r\n        // add 0% if reward category is 0; add 1% if reward category is 1; add 3% if reward category is 2; add 9% if reward category is 3;\r\n        if (userDeposits[_depositId].timelockCategory == 1) { \r\n            _reward = (_reward * 10100) / 10000;\r\n        } else if (userDeposits[_depositId].timelockCategory == 2) {\r\n            _reward = (_reward * 10300) / 10000;\r\n        } else if (userDeposits[_depositId].timelockCategory == 3) { \r\n            _reward = (_reward * 10900) / 10000; \r\n        }\r\n\r\n        return _reward;\r\n    }\r\n\r\n\r\n    function _calculateCompound(uint256 _depositedAmount, uint256 _periodsElapsed) internal pure returns (uint256 compound) {\r\n        uint256 periodsInYear = 8760; // 24 hours * 365 days\r\n        uint256 compoundFactor = 1 + (25 * 1e1 / periodsInYear);\r\n\r\n        //Calculate compounded rewards using exponentiation (A = P * (1 + r/n)^(nt))\r\n        compound = _depositedAmount * (compoundFactor ** _periodsElapsed) / (1e1 ** _periodsElapsed);\r\n\r\n        return compound;\r\n        \r\n    }\r\n        \r\n        \r\n\r\n    // Functions for modifying  staking mechanism variables:\r\n    /**\r\n     * @dev This internal function is used to update the total rewarded amount and the total rewarded amount\r\n     *      for a specific user and token. It is called when rewards are distributed or staked.\r\n     * @param _amount The amount of tokens to add to the total rewarded and user's total rewarded.\r\n     * @param _token The address of the token contract.\r\n     * @param _user The address of the user receiving the rewards.\r\n     */\r\n    function _addTotalRewardedAmount(uint256 _amount, address _token, address _user) internal {\r\n        totalRewarded[_token] += _amount;\r\n        userTotalRewardedByCoin[_token][_user] += _amount;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev This internal function adds the given amount to the total staked amount for a specified token\r\n     *      and increases the staked amount for the user by the same amount.\r\n     * @param _amount The amount to add to the total staked amount and user's staked amount.\r\n     * @param _token The address of the token for which to update the staked amount.\r\n     * @param _user The address of the user whose staked amount should be increased.\r\n     */\r\n    function _addTotalStakedAmount(uint256 _amount, address _token, address _user) internal {\r\n        totalStaked[_token] += _amount;\r\n        userTotalStakedByCoin[_token][_user] += _amount;\r\n    }\r\n\r\n    /**\r\n     * @dev This internal function subtracts the given amount from the total staked amount for a specified token\r\n     *      and decreases the staked amount for the user by the same amount.\r\n     * @param _amount The amount to subtract from the total staked amount and user's staked amount.\r\n     * @param _token The address of the token for which to update the staked amount.\r\n     * @param _user The address of the user whose staked amount should be decreased.\r\n     */\r\n    function _subtractStakedAmount(uint256 _amount,  address _token, address _user) internal {\r\n        // do a underflow check\r\n        require(totalStaked[_token] >= _amount, \"Staking: Not enough staked (Contract)\");\r\n        require(userTotalStakedByCoin[_token][_user] >= _amount, \"Staking: Not enough staked (User)\");\r\n        totalStaked[_token] -= _amount;\r\n        userTotalStakedByCoin[_token][_user] -= _amount;\r\n    }\r\n    \r\n    /**\r\n     * @dev This function sets the APR for a specified token.\r\n     * @param _apr The rewards per hour value to be set, as x% APR. (e.g. 25 = 25%)\r\n     * @param _tokenId The address of the token for which to set the rewards per hour.\r\n     */\r\n    function setAPR(uint256 _apr, address _tokenId) public onlyGovernor {\r\n        aprERC20[_tokenId] = _apr; \r\n        emit NewAPR(_apr, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev This function sets the minimum staking amount for a specified token.\r\n     * @param _minStake The minimum staking amount to be set, in wei.\r\n     * @param _tokenId The address of the token for which to set the minimum staking amount.\r\n     */\r\n    function setMinStake(uint256 _minStake, address _tokenId) public onlyGovernor {\r\n        minStakeERC20[_tokenId] = _minStake;\r\n        emit NewMinStake(_minStake, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev This function sets the ratio for a specified ERC20 token.\r\n     * @param _ratio The ratio value to be set.\r\n     * @param _tokenId The address of the token for which to set the ratio.\r\n     */\r\n    function setRatio(uint256 _ratio, address _tokenId) public onlyGovernor {\r\n        ratioERC20[_tokenId] = _ratio;\r\n        emit NewRatio(_ratio, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev This function sets the address of the Helix ERC20 contract.\r\n     * @param _helix The address of the Helix ERC20 contract.\r\n     */\r\n    function setHelixERC20(address _helix) public onlyGovernor {\r\n        require(_helix != address(0), \"Helix address cannot be 0x0\");\r\n        helixERC20 = IHelix(_helix);\r\n        emit NewHelixERC20(_helix);\r\n    }\r\n\r\n    /**\r\n     * @dev This function sets the address of the konduxERC721Founders contract.\r\n     * @param _konduxERC721Founders The address of the konduxERC721Founders contract.\r\n     */\r\n    function setKonduxERC721Founders(address _konduxERC721Founders) public onlyGovernor {\r\n        require(_konduxERC721Founders != address(0), \"Founders address cannot be 0x0\");\r\n        konduxERC721Founders = IERC721(_konduxERC721Founders);\r\n        emit NewKonduxERC721Founders(_konduxERC721Founders);\r\n    }\r\n\r\n    /**\r\n     * @dev This function sets the address of the konduxERC721kNFT contract.\r\n     * @param _konduxERC721kNFT The address of the konduxERC721kNFT contract.\r\n     */\r\n    function setKonduxERC721kNFT(address _konduxERC721kNFT) public onlyGovernor {\r\n        require(_konduxERC721kNFT != address(0), \"kNFT address cannot be 0x0\");\r\n        konduxERC721kNFT = IERC721(_konduxERC721kNFT);\r\n        emit NewKonduxERC721kNFT(_konduxERC721kNFT);\r\n    }\r\n\r\n    /**\r\n     * @dev This function sets the address of the Treasury contract.\r\n     * @param _treasury The address of the Treasury contract.\r\n     */\r\n    function setTreasury(address _treasury) public onlyGovernor {\r\n        require(_treasury != address(0), \"Treasury address cannot be 0x0\");\r\n        treasury = ITreasury(_treasury);\r\n        emit NewTreasury(_treasury);\r\n    }\r\n\r\n    /**\r\n     * @dev This function sets the withdrawal fee for a specified token.\r\n     * @param _withdrawalFee The withdrawal fee value to be set.\r\n     * @param _tokenId The address of the token for which to set the withdrawal fee.\r\n     */\r\n    function setWithdrawalFee(uint256 _withdrawalFee, address _tokenId) public onlyGovernor {\r\n        require(_withdrawalFee <= withdrawalFeeDivisorERC20[_tokenId], \"Withdrawal fee cannot be more than 100%\");\r\n        withdrawalFeeERC20[_tokenId] = _withdrawalFee;\r\n        emit NewWithdrawalFee(_withdrawalFee, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev This function sets the withdrawal fee divisor for a specified token.\r\n     * @param _withdrawalFeeDivisor The withdrawal fee divisor value to be set.\r\n     * @param _tokenId The address of the token for which to set the withdrawal fee divisor.\r\n     */\r\n    function setWithdrawalFeeDivisor(uint256 _withdrawalFeeDivisor, address _tokenId) public onlyGovernor {\r\n        withdrawalFeeDivisorERC20[_tokenId] = _withdrawalFeeDivisor;\r\n        emit NewWithdrawalFeeDivisor(_withdrawalFeeDivisor, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev This function sets the founders reward boost for a specified token.\r\n     * @param _foundersRewardBoost The founders reward boost value to be set.\r\n     * @param _tokenId The address of the token for which to set the founders reward boost.\r\n     */\r\n    function setFoundersRewardBoost(uint256 _foundersRewardBoost, address _tokenId) public onlyGovernor {\r\n        foundersRewardBoostERC20[_tokenId] = _foundersRewardBoost;\r\n        emit NewFoundersRewardBoost(_foundersRewardBoost, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev This function sets the founders reward boost divisor for a specified token.\r\n     * @param _foundersRewardBoostDivisor The founders reward boost divisor value to be set.\r\n     * @param _tokenId The address of the token for which to set the founders reward boost divisor.\r\n     */\r\n    function setFoundersRewardBoostDivisor(uint256 _foundersRewardBoostDivisor, address _tokenId) public onlyGovernor {\r\n        foundersRewardBoostDivisorERC20[_tokenId] = _foundersRewardBoostDivisor; \r\n        emit NewFoundersRewardBoostDivisor(_foundersRewardBoostDivisor, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev This function sets the kNFT reward boost for a specified token.\r\n     * @param _kNFTRewardBoost The kNFT reward boost value to be set.\r\n     * @param _tokenId The address of the token for which to set the kNFT reward boost.\r\n     */\r\n    function setkNFTRewardBoost(uint256 _kNFTRewardBoost, address _tokenId) public onlyGovernor {\r\n        kNFTRewardBoostERC20[_tokenId] = _kNFTRewardBoost;\r\n        emit NewKNFTRewardBoost(_kNFTRewardBoost, _tokenId); \r\n    }\r\n\r\n    /**\r\n     * @dev This function sets the kNFT reward boost divisor for a specified token.\r\n     * @param _kNFTRewardBoostDivisor The kNFT reward boost divisor value to be set.\r\n     * @param _tokenId The address of the token for which to set the kNFT reward boost divisor.\r\n     */\r\n    function setkNFTRewardBoostDivisor(uint256 _kNFTRewardBoostDivisor, address _tokenId) public onlyGovernor {\r\n        kNFTRewardBoostDivisorERC20[_tokenId] = _kNFTRewardBoostDivisor;\r\n        emit NewKNFTRewardBoostDivisor(_kNFTRewardBoostDivisor, _tokenId);  \r\n    }\r\n\r\n    /**\r\n    * @dev This function sets the compound frequency for a specified token.\r\n    * @param _compoundFreq The compound frequency value to be set.\r\n    * @param _tokenId The address of the token for which to set the compound frequency.\r\n    */\r\n    function setCompoundFreq(uint256 _compoundFreq, address _tokenId) public onlyGovernor {\r\n        compoundFreqERC20[_tokenId] = _compoundFreq;\r\n        emit NewCompoundFreq(_compoundFreq, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev This internal function sets whether an ERC20 token is authorized as a staking currency.\r\n     * Emits a {NewAuthorizedERC20} event.\r\n     * @param _token The address of the token to be authorized or deauthorized.\r\n     * @param _authorized True to authorize the token, false to deauthorize.\r\n     */\r\n    function _setAuthorizedERC20(address _token, bool _authorized) internal {\r\n        require(_token != address(0), \"Token address cannot be 0x0\");\r\n        if (_authorized == true) {\r\n            require(aprERC20[_token] > 0, \"Rewards per hour must be greater than 0\");\r\n            require(compoundFreqERC20[_token] > 0, \"Compound frequency must be greater than 0\");\r\n            require(withdrawalFeeERC20[_token] > 0, \"Withdrawal fee must be greater than 0\");\r\n            require(withdrawalFeeDivisorERC20[_token] > 0, \"Withdrawal fee divisor must be greater than 0\");\r\n            require(foundersRewardBoostERC20[_token] > 0, \"Founders reward boost must be greater than 0\");\r\n            require(foundersRewardBoostDivisorERC20[_token] > 0, \"Founders reward boost divisor must be greater than 0\");\r\n            require(kNFTRewardBoostERC20[_token] > 0, \"kNFT reward boost must be greater than 0\");\r\n            require(kNFTRewardBoostDivisorERC20[_token] > 0, \"kNFT reward boost divisor must be greater than 0\");\r\n            require(ratioERC20[_token] > 0, \"Ratio must be greater than 0\");\r\n            require(minStakeERC20[_token] > 0, \"Minimum stake must be greater than 0\");  \r\n            require(IERC20(_token).totalSupply() > 0, \"Token total supply must be greater than 0\");\r\n        }\r\n        authorizedERC20[_token] = _authorized;\r\n        emit NewAuthorizedERC20(_token, _authorized);\r\n    }\r\n\r\n    /**\r\n     * @dev This function sets whether an ERC20 token is authorized as a staking currency.\r\n     * Emits a {NewAuthorizedERC20} event.\r\n     * @param _token The address of the token to be authorized or deauthorized.\r\n     * @param _authorized True to authorize the token, false to deauthorize.\r\n     */\r\n    function setAuthorizedERC20(address _token, bool _authorized) public onlyGovernor {\r\n        _setAuthorizedERC20(_token, _authorized);\r\n    }\r\n\r\n    /**\r\n     * @dev This function adds a new staking token with its parameters.\r\n     * Emits various events based on the setter functions called during token addition.\r\n     * Emits a {NewAuthorizedERC20} event at the end.\r\n     * @param _token The address of the new staking token.\r\n     * @param _apr The rewards per hour for the new staking token.\r\n     * @param _compoundFreq The compound frequency for the new staking token.\r\n     * @param _withdrawalFee The withdrawal fee for the new staking token.\r\n     * @param _withdrawalFeeDivisor The withdrawal fee divisor for the new staking token.\r\n     * @param _foundersRewardBoost The founders reward boost for the new staking token.\r\n     * @param _foundersRewardBoostDivisor The founders reward boost divisor for the new staking token.\r\n     * @param _kNFTRewardBoost The kNFT reward boost for the new staking token.\r\n     * @param _kNFTRewardBoostDivisor The kNFT reward boost divisor for the new staking token.\r\n     * @param _ratio The ratio for the new staking token.\r\n     * @param _minStake The minimum stake for the new staking token.\r\n     */\r\n    function addNewStakingToken(address _token, uint256 _apr, uint256 _compoundFreq, uint256 _withdrawalFee, uint256 _withdrawalFeeDivisor, uint256 _foundersRewardBoost, uint256 _foundersRewardBoostDivisor, uint256 _kNFTRewardBoost, uint256 _kNFTRewardBoostDivisor, uint256 _ratio, uint256 _minStake) public onlyGovernor {\r\n        require(_token != address(0), \"Token address cannot be 0x0\");\r\n        require(_apr > 0, \"Rewards per hour must be greater than 0\"); \r\n        require(_compoundFreq > 0, \"Compound frequency must be greater than 0\");\r\n        require(_withdrawalFee > 0, \"Withdrawal fee must be greater than 0\");\r\n        require(_withdrawalFeeDivisor > 0, \"Withdrawal fee divisor must be greater than 0\");\r\n        require(_foundersRewardBoost > 0, \"Founders reward boost must be greater than 0\");\r\n        require(_foundersRewardBoostDivisor > 0, \"Founders reward boost divisor must be greater than 0\");\r\n        require(_kNFTRewardBoost > 0, \"kNFT reward boost must be greater than 0\");\r\n        require(_kNFTRewardBoostDivisor > 0, \"kNFT reward boost divisor must be greater than 0\");\r\n        require(_ratio > 0, \"Ratio must be greater than 0\");\r\n        require(_minStake > 0, \"Minimum stake must be greater than 0\");\r\n        require(IERC20(_token).totalSupply() > 0, \"Token total supply must be greater than 0\");\r\n        setWithdrawalFeeDivisor(_withdrawalFeeDivisor, _token);\r\n        setFoundersRewardBoostDivisor(_foundersRewardBoostDivisor, _token); \r\n        setkNFTRewardBoostDivisor(_kNFTRewardBoostDivisor, _token);\r\n        setFoundersRewardBoost(_foundersRewardBoost, _token);\r\n        setkNFTRewardBoost(_kNFTRewardBoost, _token);\r\n        setAPR(_apr, _token); \r\n        setRatio(_ratio, _token);\r\n        setWithdrawalFee(_withdrawalFee, _token);\r\n        setCompoundFreq(_compoundFreq, _token);\r\n        setMinStake(_minStake, _token);\r\n\r\n        _setAuthorizedERC20(_token, true);\r\n    }\r\n\r\n\r\n    // Functions for getting staking mechanism variables:\r\n\r\n    /**\r\n     * @dev This function returns the time of the last update for the specified deposit ID.\r\n     * @param _depositId The ID of the deposit for which the time of the last update is requested.\r\n     * @return _timeOfLastUpdate The time of the last update for the specified deposit ID.\r\n     */\r\n    function getTimeOfLastUpdate(uint _depositId) public view returns (uint256 _timeOfLastUpdate) {\r\n        return userDeposits[_depositId].timeOfLastUpdate;\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the staked amount for the specified deposit ID.\r\n     * @param _depositId The ID of the deposit for which the staked amount is requested.\r\n     * @return _deposited The staked amount for the specified deposit ID.\r\n     */\r\n    function getStakedAmount(uint _depositId) public view returns (uint256 _deposited) {\r\n        return userDeposits[_depositId].deposited;\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the rewards per hour for the specified token with 18 decimals.\r\n     * @param _tokenId The address of the token for which the rewards per hour are requested.\r\n     * @return _rewardsPerHour The rewards per hour for the specified token.\r\n     */\r\n    function getRewardsPerHour(address _tokenId) public view returns (uint256 _rewardsPerHour) {\r\n        return aprERC20[_tokenId] * 1e18 / 3600;\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the APR for the specified token.\r\n     * @param _tokenId The address of the token for which the rewards per hour are requested.\r\n     * @return _rewardsPerHour The rewards per hour for the specified token.\r\n     */\r\n    function getAPR(address _tokenId) public view returns (uint256 _rewardsPerHour) {\r\n        return aprERC20[_tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the Founder's reward boost for the specified token.\r\n     * @param _tokenId The address of the token for which the Founder's reward boost is requested.\r\n     * @return _foundersRewardBoost The Founder's reward boost for the specified token.\r\n     */\r\n    function getFoundersRewardBoost(address _tokenId) public view returns (uint256 _foundersRewardBoost) {\r\n        return foundersRewardBoostERC20[_tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the Founder's reward boost divisor for the specified token.\r\n     * @param _tokenId The address of the token for which the Founder's reward boost divisor is requested.\r\n     * @return _foundersRewardBoostDivisor The Founder's reward boost divisor for the specified token.\r\n     */\r\n    function getFoundersRewardBoostDenominator(address _tokenId) public view returns (uint256 _foundersRewardBoostDivisor) {\r\n        return foundersRewardBoostDivisorERC20[_tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the kNFT reward boost for the specified token.\r\n     * @param _tokenId The address of the token for which the kNFT reward boost is requested.\r\n     * @return _kNFTRewardBoost The kNFT reward boost for the specified token.\r\n     */\r\n    function getkNFTRewardBoost(address _tokenId) public view returns (uint256 _kNFTRewardBoost) {\r\n        return kNFTRewardBoostERC20[_tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the kNFT reward boost divisor for the specified token.\r\n     * @param _tokenId The address of the token for which the kNFT reward boost divisor is requested.\r\n     * @return _kNFTRewardBoostDivisor The kNFT reward boost divisor for the specified token.\r\n     */\r\n    function getKnftRewardBoostDenominator(address _tokenId) public view returns (uint256 _kNFTRewardBoostDivisor) {\r\n        return kNFTRewardBoostDivisorERC20[_tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the minimum stake for the specified token.\r\n     * @param _tokenId The address of the token for which the minimum stake is requested.\r\n     * @return _minStake The minimum stake for the specified token.\r\n     */\r\n    function getMinStake(address _tokenId) public view returns (uint256 _minStake) {\r\n        return minStakeERC20[_tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the timelock category for the specified deposit ID.\r\n     * @param _depositId The ID of the deposit for which the timelock category is requested.\r\n     * @return _timelockCategory The timelock category for the specified deposit ID.\r\n     */\r\n    function getTimelockCategory(uint _depositId) public view returns (uint8 _timelockCategory) {\r\n        return userDeposits[_depositId].timelockCategory;\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the timelock for the specified deposit ID.\r\n     * @param _depositId The ID of the deposit for which the timelock is requested.\r\n     * @return _timelock The timelock for the specified deposit ID.\r\n     */\r\n    function getTimelock(uint _depositId) public view returns (uint256 _timelock) {\r\n        return userDeposits[_depositId].timelock;\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the deposit IDs for the specified user.\r\n     * @param _user The address of the user for which the deposit IDs are requested.\r\n     * @return An array of deposit IDs for the specified user.\r\n     */\r\n    function getDepositIds(address _user) public view returns (uint256[] memory) {\r\n        return userDepositsIds[_user];\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the withdrawal fee divisor for the specified token.\r\n     * @param _tokenId The address of the token for which the withdrawal fee divisor is requested.\r\n     * @return _withdrawalFeeDivisor The withdrawal fee divisor for the specified token.\r\n     */\r\n    function getWithdrawalFeeDivisor(address _tokenId) public view returns (uint256 _withdrawalFeeDivisor) {\r\n        return withdrawalFeeDivisorERC20[_tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the withdrawal fee for the specified token.\r\n     * @param _tokenId The address of the token for which the withdrawal fee is requested.\r\n     * @return _withdrawalFee The withdrawal fee for the specified token.\r\n     */\r\n    function getWithdrawalFee(address _tokenId) public view returns (uint256 _withdrawalFee) {\r\n        return withdrawalFeeERC20[_tokenId]; \r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the total amount staked for a specific token.\r\n     * @param _token The address of the token contract.\r\n     * @return _totalStaked The total amount staked for the given token.\r\n     */\r\n    function getTotalStaked(address _token) public view returns (uint256 _totalStaked) {\r\n        return totalStaked[_token];\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the total amount staked by a specific user for a specific token.\r\n     * @param _user The address of the user.\r\n     * @param _token The address of the token contract.\r\n     * @return _totalStaked The total amount staked by the user for the given token.\r\n     */\r\n    function getUserTotalStakedByCoin(address _user, address _token) public view returns (uint256 _totalStaked) {\r\n        return userTotalStakedByCoin[_token][_user];\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the total rewards earned for a specific token.\r\n     * @param _token The address of the token contract.\r\n     * @return _totalRewards The total rewards earned for the given token.\r\n     */\r\n    function getTotalRewards(address _token) public view returns (uint256 _totalRewards) {\r\n        return totalRewarded[_token];\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the total rewards earned by a specific user for a specific token.\r\n     * @param _user The address of the user.\r\n     * @param _token The address of the token contract.\r\n     * @return _totalRewards The total rewards earned by the user for the given token.\r\n     */\r\n    function getUserTotalRewardsByCoin(address _user, address _token) public view returns (uint256 _totalRewards) {\r\n        return userTotalRewardedByCoin[_token][_user]; \r\n    }\r\n}"
    },
    "contracts/types/AccessControlled.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"../interfaces/IAuthority.sol\";\r\n\r\n/// @dev Reasoning for this contract = modifiers literaly copy code\r\n/// instead of pointing towards the logic to execute. Over many\r\n/// functions this bloats contract size unnecessarily.\r\n/// imho modifiers are a meme.\r\nabstract contract AccessControlled {\r\n    /* ========== EVENTS ========== */\r\n\r\n    event AuthorityUpdated(IAuthority authority);\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    IAuthority public authority;\r\n\r\n    /* ========== Constructor ========== */\r\n\r\n    constructor(IAuthority _authority) {\r\n        require(address(_authority) != address(0), \"Authority cannot be zero address\");\r\n        authority = _authority;\r\n        emit AuthorityUpdated(_authority);\r\n    }\r\n\r\n    /* ========== \"MODIFIERS\" ========== */\r\n\r\n    modifier onlyGovernor {\r\n        _onlyGovernor();\r\n        _;\r\n    }\r\n\r\n    modifier onlyGuardian {\r\n        _onlyGuardian();\r\n        _;\r\n    }\r\n\r\n    modifier onlyPolicy {\r\n        _onlyPolicy();\r\n        _;\r\n    }\r\n\r\n    modifier onlyVault {\r\n        _onlyVault();\r\n        _;\r\n    }\r\n\r\n    modifier onlyRole(bytes32 _role){\r\n        _onlyRole(_role);\r\n        _;\r\n    }\r\n\r\n    /* ========== GOV ONLY ========== */\r\n\r\n    function initializeAuthority(IAuthority _newAuthority) internal {\r\n        require(authority == IAuthority(address(0)), \"AUTHORITY_INITIALIZED\");\r\n        authority = _newAuthority;\r\n        emit AuthorityUpdated(_newAuthority);\r\n    }\r\n\r\n    function setAuthority(IAuthority _newAuthority) external {\r\n        _onlyGovernor();\r\n        authority = _newAuthority;\r\n        emit AuthorityUpdated(_newAuthority);\r\n    }\r\n\r\n    /* ========== INTERNAL CHECKS ========== */\r\n\r\n    function _onlyGovernor() internal view {\r\n        require(msg.sender == authority.governor(), \"UNAUTHORIZED\");\r\n    }\r\n\r\n    function _onlyGuardian() internal view {\r\n        require(msg.sender == authority.guardian(), \"UNAUTHORIZED\");\r\n    }\r\n\r\n    function _onlyPolicy() internal view {\r\n        require(msg.sender == authority.policy(), \"UNAUTHORIZED\");        \r\n    }\r\n\r\n    function _onlyVault() internal view {\r\n        require(msg.sender == authority.vault(), \"UNAUTHORIZED\");                \r\n    }\r\n\r\n    function _onlyRole(bytes32 _role) internal view {\r\n        require(authority.roles(msg.sender) == _role, \"UNAUTHORIZED\");\r\n    }\r\n\r\n  \r\n}\r\n"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}