{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IAuthority.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\r\npragma solidity >=0.8.9;\r\n\r\ninterface IAuthority {\r\n    /* ========== EVENTS ========== */\r\n\r\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\r\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\r\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\r\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\r\n    event RolePushed(address indexed account, bytes32 _role);\r\n\r\n    event GovernorPulled(address indexed from, address indexed to);\r\n    event GuardianPulled(address indexed from, address indexed to);\r\n    event PolicyPulled(address indexed from, address indexed to);\r\n    event VaultPulled(address indexed from, address indexed to);\r\n\r\n    /* ========== VIEW ========== */\r\n\r\n    function governor() external view returns (address);\r\n\r\n    function guardian() external view returns (address);\r\n\r\n    function policy() external view returns (address);\r\n\r\n    function vault() external view returns (address);\r\n\r\n    function roles(address _addr) external view returns (bytes32);\r\n\r\n}\r\n"
    },
    "contracts/interfaces/IHelix.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\n\r\ninterface IHelix is IERC20, IERC20Metadata {\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\r\n    function burn(address _to, uint256 _amount) external;\r\n    function mint(address _to, uint256 _amount) external; \r\n}"
    },
    "contracts/interfaces/IKondux.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\r\n\r\ninterface IKondux {\r\n    function changeDenominator(uint96 _denominator) external returns (uint96);\r\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\r\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external;\r\n    function setBaseURI(string memory _newURI) external returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n    function pause() external;\r\n    function unpause() external;\r\n    function safeMint(address to, uint256 dna) external returns (uint256);\r\n    function setDna(uint256 _tokenID, uint256 _dna) external;\r\n    function getDna(uint256 _tokenID) external view returns (uint256);\r\n    function readGen(uint256 _tokenID, uint8 startIndex, uint8 endIndex) external view returns (int256);\r\n    function writeGen(uint256 _tokenID, uint256 inputValue, uint8 startIndex, uint8 endIndex) external;\r\n    function getTransferDate(uint256 _tokenID) external view returns (uint256);\r\n}"
    },
    "contracts/interfaces/IKonduxERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\n\r\ninterface IKonduxERC20 is IERC20 {\r\n    function excludedFromFees(address) external view returns (bool);\r\n    function tradingOpen() external view returns (bool);\r\n    function taxSwapMin() external view returns (uint256);\r\n    function taxSwapMax() external view returns (uint256);\r\n    function _isLiqPool(address) external view returns (bool);\r\n    function taxRateBuy() external view returns (uint8);\r\n    function taxRateSell() external view returns (uint8);\r\n    function antiBotEnabled() external view returns (bool);\r\n    function excludedFromAntiBot(address) external view returns (bool);\r\n    function _lastSwapBlock(address) external view returns (uint256);\r\n    function taxWallet() external view returns (address);\r\n\r\n    event TokensAirdropped(uint256 totalWallets, uint256 totalTokens);\r\n    event TokensBurned(address indexed burnedByWallet, uint256 tokenAmount);\r\n    event TaxWalletChanged(address newTaxWallet);\r\n    event TaxRateChanged(uint8 newBuyTax, uint8 newSellTax);\r\n\r\n    function initLP() external;\r\n    function enableTrading() external;\r\n    function burnTokens(uint256 amount) external;\r\n    function enableAntiBot(bool isEnabled) external;\r\n    function excludeFromAntiBot(address wallet, bool isExcluded) external;\r\n    function excludeFromFees(address wallet, bool isExcluded) external;\r\n    function adjustTaxRate(uint8 newBuyTax, uint8 newSellTax) external;\r\n    function setTaxWallet(address newTaxWallet) external;\r\n    function taxSwapSettings(uint32 minValue, uint32 minDivider, uint32 maxValue, uint32 maxDivider) external;\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\tfunction decimals() external view returns (uint8);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction name() external view returns (string memory);\r\n\tfunction getOwner() external view returns (address);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction allowance(address _owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n"
    },
    "contracts/interfaces/ITreasury.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.9;\r\n\r\ninterface ITreasury {\r\n    function deposit(\r\n        uint256 _amount,\r\n        address _token\r\n    ) external;\r\n\r\n    function depositEther() external payable;\r\n\r\n    function withdraw(\r\n        uint256 _amount,\r\n        address _token\r\n    ) external;\r\n\r\n    function withdrawTo(\r\n        uint256 _amount,\r\n        address _token,\r\n        address _to\r\n    ) external;\r\n\r\n    function withdrawEther(\r\n        uint256 _amount\r\n    ) external;\r\n}"
    },
    "contracts/Staking.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"./interfaces/ITreasury.sol\";\r\nimport \"./interfaces/IHelix.sol\";\r\nimport \"./interfaces/IKondux.sol\";\r\nimport \"./interfaces/IKonduxERC20.sol\";\r\nimport \"./types/AccessControlled.sol\";\r\n\r\ncontract Staking is AccessControlled {\r\n    using Counters for Counters.Counter;\r\n\r\n    Counters.Counter private _depositIds;\r\n\r\n    /**\r\n     * @dev Struct representing a staker's information.\r\n     */\r\n    struct Staker {\r\n        // The address of the staked token\r\n        address token;\r\n        // The address of the staker\r\n        address staker;\r\n        // The total amount of tokens deposited by the staker\r\n        uint256 deposited;\r\n        // The total amount of tokens redeemed by the staker\r\n        uint256 redeemed;\r\n        // The timestamp of the last update for this staker's deposit\r\n        uint256 timeOfLastUpdate;\r\n        // The timestamp of the staker's last deposit\r\n        uint256 lastDepositTime;\r\n        // The accumulated, but unclaimed rewards for the staker. These are calculated\r\n        // each time a user writes to the contract\r\n        uint256 unclaimedRewards;\r\n        // The duration of the timelock applied to the staker's deposit\r\n        uint256 timelock;\r\n        // The category of the timelock applied to the staker's deposit\r\n        uint8 timelockCategory;\r\n        // ERC20 Ratio at the time of staking\r\n        uint256 ratioERC20;\r\n    } \r\n\r\n    enum LockingTimes {        \r\n        OneMonth, // 0\r\n        ThreeMonths, // 1\r\n        SixMonths, // 2\r\n        OneYear, // 3\r\n        Test, // 4\r\n        Test24h, // 5\r\n        Test48h // 6\r\n    }\r\n\r\n    // The deposit IDs associated with a user's address\r\n    mapping(address => uint[]) public userDepositsIds;\r\n\r\n    // The Staker struct information associated with a deposit ID\r\n    mapping(uint => Staker) public userDeposits;\r\n\r\n    // Indicates whether a specific ERC20 token is authorized for staking\r\n    mapping (address => bool) public authorizedERC20;\r\n\r\n    // The minimum amount required to stake for a specific ERC20 token\r\n    mapping (address => uint256) public minStakeERC20;\r\n\r\n    // The compound frequency for a specific ERC20 token\r\n    mapping (address => uint256) public compoundFreqERC20;\r\n\r\n    // The rewards per hour for a specific ERC20 token\r\n    mapping (address => uint256) public aprERC20;\r\n\r\n    // The withdrawal fee for a specific ERC20 token\r\n    mapping (address => uint256) public withdrawalFeeERC20;\r\n\r\n    // The founders reward boost for a specific ERC20 token\r\n    mapping (address => uint256) public foundersRewardBoostERC20;\r\n\r\n    // The kNFT reward boost for a specific ERC20 token\r\n    mapping (address => uint256) public kNFTRewardBoostERC20;\r\n\r\n    // The ratio for a specific ERC20 token\r\n    mapping (address => uint256) public ratioERC20;\r\n\r\n    // The decimals of a specific ERC20 token\r\n    mapping (address => uint8) public decimalsERC20;\r\n\r\n    // The total amount staked for a specific ERC20 token\r\n    mapping (address => uint256) public totalStaked;\r\n\r\n    // The total amount staked by a user for a specific ERC20 token\r\n    mapping (address => mapping (address => uint256)) public userTotalStakedByCoin;\r\n\r\n    // The total amount rewarded for a specific ERC20 token\r\n    mapping (address => uint256) public totalRewarded;\r\n\r\n    // The total amount rewarded by a user for a specific ERC20 token\r\n    mapping (address => mapping (address => uint256)) public userTotalRewardedByCoin;\r\n\r\n    // The total amount paid as a withdrawal fee for a specific ERC20 token\r\n    mapping (address => uint256) public totalWithdrawalFees;\r\n\r\n    // The penalty for withdrawing early for a specific ERC20 token\r\n    mapping (address => uint256) public earlyWithdrawalPenalty;\r\n\r\n    // The boost for a specific timelock category\r\n    mapping(uint => uint256) public timelockCategoryBoost;\r\n\r\n    // The divisor for a specific token\r\n    mapping (address => uint256) public divisorERC20;\r\n\r\n    // The allowed dnaVersion for reward boost\r\n    mapping (uint256 => bool) public allowedDnaVersions;\r\n\r\n    // Map of timelock durartions\r\n    mapping(uint8 => uint256) public timelockDurations;\r\n\r\n    IHelix public helixERC20; // Helix ERC20 Token\r\n    IERC721 public konduxERC721Founders; // Kondux ERC721 Founders Token\r\n    address public konduxERC721kNFT; // Kondux ERC721 kNFT Token\r\n    ITreasury public treasury; // Treasury Contract\r\n\r\n    // Events\r\n    // Emitted when a staker withdraws their rewards\r\n    event Withdraw(address indexed user, uint256 liquidAmount, uint256 fees);\r\n\r\n    // Emitted when a staker withdraws all their rewards\r\n    event WithdrawAll(address indexed staker, uint256 amount);\r\n\r\n    // Emitted when a staker compounds their rewards\r\n    event Compound(address indexed staker, uint256 amount);\r\n\r\n    // Emitted when a staker stakes their tokens\r\n    event Stake(uint indexed id, address indexed staker, address token, uint256 amount);\r\n\r\n    // Emitted when a staker unstakes their tokens\r\n    event Unstake(address indexed staker, uint256 amount);\r\n\r\n    // Emitted when a staker receives a reward\r\n    event Reward(address indexed user, uint256 netRewards, uint256 fees);\r\n\r\n    // Emitted when the rewards per hour is updated for a token\r\n    event NewAPR(uint256 indexed amount, address indexed token);\r\n\r\n    // Emitted when the minimum stake is updated for a token\r\n    event NewMinStake(uint256 indexed amount, address indexed token);\r\n\r\n    // Emitted when the compound frequency is updated for a token\r\n    event NewCompoundFreq(uint256 indexed amount, address indexed token);\r\n\r\n    // Emitted when the Helix ERC20 token is updated\r\n    event NewHelixERC20(address indexed helixERC20);\r\n\r\n    // Emitted when the Kondux ERC721 Founders token is updated\r\n    event NewKonduxERC721Founders(address indexed konduxERC721Founders);\r\n\r\n    // Emitted when the Kondux ERC721 kNFT token is updated\r\n    event NewKonduxERC721kNFT(address indexed konduxERC721kNFT);\r\n\r\n    // Emitted when the treasury address is updated\r\n    event NewTreasury(address indexed treasury);\r\n\r\n    // Emitted when the withdrawal fee is updated for a token\r\n    event NewWithdrawalFee(uint256 indexed amount, address indexed token);\r\n\r\n    // Emitted when the founders reward boost is updated for a token\r\n    event NewFoundersRewardBoost(uint256 indexed amount, address indexed token);\r\n\r\n    // Emitted when the kNFT reward boost is updated for a token\r\n    event NewKNFTRewardBoost(uint256 indexed amount, address indexed token);\r\n\r\n    // Emitted when a token is authorized or deauthorized for staking\r\n    event NewAuthorizedERC20(address indexed token, bool indexed authorized);\r\n\r\n    // Emitted when the ratio is updated for a token\r\n    event NewRatio(uint256 indexed amount, address indexed token);\r\n\r\n    // Emitted when a new divisor is set for a token\r\n    event NewDivisorERC20(uint256 indexed amount, address indexed token);\r\n \r\n\r\n    /**\r\n     * @dev Initializes the staking contract with the provided parameters.\r\n     *\r\n     * @param _authority The address of the authority contract.\r\n     * @param _konduxERC20 The address of the Kondux ERC20 token contract.\r\n     * @param _treasury The address of the treasury contract.\r\n     * @param _konduxERC721Founders The address of the Kondux ERC721 Founders token contract.\r\n     * @param _konduxERC721kNFT The address of the Kondux ERC721 kNFT token contract.\r\n     * @param _helixERC20 The address of the Helix ERC20 token contract.\r\n     *\r\n     * The constructor sets up the initial state of the staking contract by initializing contract variables,\r\n     * setting up default staking token parameters, and authorizing the Kondux ERC20 token for staking.\r\n     */\r\n    constructor(\r\n        address _authority,\r\n        address _konduxERC20,\r\n        address _treasury,\r\n        address _konduxERC721Founders,\r\n        address _konduxERC721kNFT,\r\n        address _helixERC20\r\n    ) AccessControlled(IAuthority(_authority)) {\r\n        // Ensure the provided addresses are valid\r\n        require(_konduxERC20 != address(0), \"Kondux ERC20 address is not set\");\r\n        require(_treasury != address(0), \"Treasury address is not set\");\r\n        require(_konduxERC721Founders != address(0), \"Kondux ERC721 Founders address is not set\");\r\n        require(_konduxERC721kNFT != address(0), \"Kondux ERC721 kNFT address is not set\");\r\n        require(_helixERC20 != address(0), \"Helix ERC20 address is not set\");\r\n\r\n        // Initialize contract variables\r\n        konduxERC721Founders = IERC721(_konduxERC721Founders);\r\n        konduxERC721kNFT = _konduxERC721kNFT;\r\n        helixERC20 = IHelix(_helixERC20);\r\n        treasury = ITreasury(_treasury);\r\n\r\n        timelockDurations[0] = 30 days;         // 1 month\r\n        timelockDurations[1] = 90 days;         // 3 months\r\n        timelockDurations[2] = 180 days;        // 6 months\r\n        timelockDurations[3] = 365 days;        // 1 year\r\n        timelockDurations[4] = 2 minutes;       // 2 minutes (TEST)\r\n        timelockDurations[5] = 1 days;          // 1 day (TEST)\r\n        timelockDurations[6] = 2 days;          // 2 days (TEST)\r\n\r\n        // Set up default staking token parameters\r\n        setDivisorERC20(10_000, _konduxERC20); // 10,000 basis points\r\n        setWithdrawalFee(100, _konduxERC20); // 1% fee on withdrawal or 100 / 10_000\r\n        setFoundersRewardBoost(1_000, _konduxERC20); // 10% boost (=110%) on rewards or 1,000,000/10,000,000\r\n        setkNFTRewardBoost(500, _konduxERC20); // 5% boost on rewards or 500 / \r\n        setMinStake(10_000_000, _konduxERC20); // 10,000,000 wei\r\n        setAPR(25, _konduxERC20); // 0.00285%/h or 25% APR\r\n        setCompoundFreq(60 * 60 * 24, _konduxERC20); // 24 hours\r\n        setRatio(10_000, _konduxERC20); // 10,000:1 ratio, adjusted for kondux ERC20 decimals\r\n        setEarlyWithdrawalPenalty(_konduxERC20, 10); // 10% penalty\r\n        setTimelockCategoryBoost(1, 100); // 1% boost for 90 days timelock\r\n        setTimelockCategoryBoost(2, 300); // 3% boost for 180 days timelock \r\n        setTimelockCategoryBoost(3, 900); // 9% boost for 365 days timelock\r\n        setAllowedDnaVersion(1, true); // allow DNA version 1\r\n        setDecimalsERC20(helixERC20.decimals(), _helixERC20); // set decimals for Helix ERC20 token \r\n        setDecimalsERC20(IKonduxERC20(_konduxERC20).decimals(), _konduxERC20); // set decimals for Kondux ERC20 token\r\n\r\n        //testing 24 and 48h timelocks\r\n        setTimelockCategoryBoost(5, 5000); // 50% boost for 1 day timelock\r\n        setTimelockCategoryBoost(6, 10000); // 100% boost for 2 days timelock\r\n\r\n        _setAuthorizedERC20(_konduxERC20, true);\r\n    }\r\n\r\n    /**\r\n     * @dev This function allows a user to deposit a specified amount of an authorized token with a selected timelock period.\r\n     *      The function checks the user's token balance, allowance, and the timelock value before proceeding.\r\n     *      It then creates a new deposit record, sets the timelock based on the selected category, and updates the user's\r\n     *      deposit list and total staked amount. The specified amount of tokens is transferred from the user to the vault,\r\n     *      and an equivalent amount of reward tokens is minted for the user.\r\n     * @param _amount The amount of tokens to deposit.\r\n     * @param _timelock The timelock category, represented as an integer (0-4).\r\n     * @param _token The address of the token contract.\r\n     * @return _id The deposit ID assigned to this deposit.\r\n     */\r\n    function deposit(uint256 _amount, uint8 _timelock, address _token) public returns (uint) {\r\n        // Check if the token is authorized for staking\r\n        require(authorizedERC20[_token], \"Token not authorized\");\r\n        // Check if the deposit amount is greater than or equal to the minimum required stake\r\n        require(_amount >= minStakeERC20[_token], \"Amount smaller than minimimum deposit\");\r\n        IERC20 konduxERC20 = IERC20(_token);\r\n        // Check if the user has enough balance to stake the specified amount\r\n        require(konduxERC20.balanceOf(msg.sender) >= _amount, \"Can't stake more than you own\");\r\n        // Check if the user has approved the staking contract to spend the specified amount\r\n        require(konduxERC20.allowance(msg.sender, address(this)) >= _amount, \"Allowance not set\");\r\n        // Check if the selected timelock category is valid (between 0 and 3)\r\n        require(_timelock <= 6, \"Invalid timelock\");\r\n\r\n        // Get the current deposit ID\r\n        uint _id = _depositIds.current();\r\n\r\n        // Create a new deposit record for the user\r\n        userDeposits[_id] = Staker({\r\n            token: _token,\r\n            staker: msg.sender,\r\n            deposited: _amount,\r\n            unclaimedRewards: 0,\r\n            timelock: 0,\r\n            timelockCategory: _timelock,\r\n            timeOfLastUpdate: block.timestamp,\r\n            lastDepositTime: block.timestamp,\r\n            redeemed: 0,\r\n            ratioERC20: ratioERC20[_token]\r\n        });\r\n\r\n        // Set the timelock period based on the selected category\r\n        userDeposits[_id].timelock = block.timestamp + timelockDurations[_timelock];\r\n\r\n        // Add the deposit ID to the user's deposit list\r\n        userDepositsIds[msg.sender].push(_id);\r\n\r\n        // Update the user's total staked amount\r\n        _addTotalStakedAmount(_amount, _token, msg.sender);\r\n        \r\n        // Mint an equivalent amount of reward tokens for the user\r\n        // Get the decimals of the original staked token and Helix\r\n        uint8 originalTokenDecimals = decimalsERC20[_token];\r\n        uint8 helixDecimals = decimalsERC20[address(helixERC20)];\r\n\r\n        // Calculate the decimal difference\r\n        uint decimalDifference;\r\n        if (helixDecimals > originalTokenDecimals) {\r\n            decimalDifference = helixDecimals - originalTokenDecimals;\r\n        } else {\r\n            decimalDifference = 0;\r\n        }\r\n\r\n        // Transfer the deposited tokens from the user to the vault\r\n        konduxERC20.transferFrom(msg.sender, authority.vault(), _amount);\r\n\r\n        // Mint an equivalent amount of reward tokens for the user, adjusted based on the decimal difference\r\n        helixERC20.mint(msg.sender, _amount * ratioERC20[_token] * (10 ** decimalDifference));\r\n\r\n        // Increment the deposit ID counter\r\n        _depositIds.increment();\r\n\r\n        // Emit a Stake event\r\n        emit Stake(_id, msg.sender, _token, _amount);\r\n\r\n        return _id;\r\n    }\r\n\r\n    /**\r\n     * @dev This function allows the owner of a deposit to stake their earned rewards.\r\n     *      It verifies that the caller is the deposit owner and that the compounding is not happening too soon.\r\n     *      The function calculates the rewards, resets the unclaimed rewards to zero, and updates the deposit record.\r\n     *      The total staked amount is updated, and an equivalent amount of reward tokens is minted for the user.\r\n     * @param _depositId The ID of the deposit whose rewards are to be staked.\r\n     */\r\n    function stakeRewards(uint _depositId) public {\r\n        // Verify that the caller is the owner of the deposit\r\n        require(msg.sender == userDeposits[_depositId].staker, \"You are not the owner of this deposit\");\r\n        // Verify that the user is not trying to compound rewards too soon\r\n        // require(compoundRewardsTimer(_depositId) == 0, \"Tried to compound rewards too soon\");\r\n\r\n        // Calculate the rewards and add any unclaimed rewards\r\n        uint256 rewards = calculateRewards(msg.sender, _depositId) + userDeposits[_depositId].unclaimedRewards;\r\n\r\n        // Check if the rewards are non-zero\r\n        require(rewards > 0, \"No rewards available\");\r\n\r\n        // Reset the unclaimed rewards to zero\r\n        userDeposits[_depositId].unclaimedRewards = 0;\r\n        // Update the deposited amount with the compounded rewards\r\n        userDeposits[_depositId].deposited += rewards;\r\n        // Update the time of the last update\r\n        userDeposits[_depositId].timeOfLastUpdate = block.timestamp;\r\n\r\n        // Update the user's total staked amount\r\n        _addTotalStakedAmount(rewards, userDeposits[_depositId].token, userDeposits[_depositId].staker);\r\n\r\n        // Mint an equivalent amount of reward tokens for the user\r\n        // Get the decimals of the original staked token and Helix\r\n        uint8 originalTokenDecimals = decimalsERC20[userDeposits[_depositId].token];\r\n        uint8 helixDecimals = decimalsERC20[address(helixERC20)];\r\n\r\n        // Calculate the decimal difference\r\n        uint decimalDifference;\r\n        if (helixDecimals > originalTokenDecimals) {\r\n            decimalDifference = helixDecimals - originalTokenDecimals;\r\n        } else {\r\n            decimalDifference = 0;\r\n        }\r\n\r\n        // Mint the calculated rewards for the user, adjusted based on the decimal difference\r\n        helixERC20.mint(msg.sender, rewards * userDeposits[_depositId].ratioERC20 * (10 ** decimalDifference));\r\n\r\n        // Emit a Compound event\r\n        emit Compound(msg.sender, rewards);\r\n    }\r\n\r\n    /**\r\n     * @dev This function allows the owner of a deposit to claim their earned rewards.\r\n     *      It verifies that the caller is the deposit owner and that the timelock has passed.\r\n     *      The function calculates the rewards, resets the unclaimed rewards to zero, and updates the deposit record.\r\n     *      The reward tokens are burned, and the earned rewards are transferred to the user from the vault.\r\n     *      The function emits a Reward event upon successful execution.\r\n     * @param _depositId The ID of the deposit whose rewards are to be claimed.\r\n     */\r\n    function claimRewards(uint _depositId) public {\r\n        require(msg.sender == userDeposits[_depositId].staker, \"You are not the owner of this deposit\");\r\n        require(block.timestamp >= userDeposits[_depositId].timelock, \"Timelock not passed\");\r\n\r\n        uint256 rewards = calculateRewards(msg.sender, _depositId) + userDeposits[_depositId].unclaimedRewards;\r\n\r\n        require(rewards > 0, \"You have no rewards\");\r\n\r\n        userDeposits[_depositId].unclaimedRewards = 0;\r\n        userDeposits[_depositId].timeOfLastUpdate = block.timestamp;\r\n\r\n        IERC20 konduxERC20 = IERC20(userDeposits[_depositId].token);\r\n\r\n        uint256 netRewards = (rewards * (10_000 - withdrawalFeeERC20[userDeposits[_depositId].token])) / divisorERC20[userDeposits[_depositId].token];\r\n        uint256 fees = rewards - netRewards;\r\n\r\n        konduxERC20.transferFrom(authority.vault(), msg.sender, netRewards); \r\n\r\n        _addTotalRewardedAmount(netRewards, userDeposits[_depositId].token, userDeposits[_depositId].staker);\r\n        _addTotalWithdrawalFees(rewards - netRewards, userDeposits[_depositId].token);\r\n\r\n        emit Reward(msg.sender, netRewards, fees);\r\n    }\r\n\r\n    /**\r\n     * @dev This function allows the owner of a deposit to withdraw a specified amount of their deposited tokens.\r\n     *      It verifies that the timelock has passed, the caller is the deposit owner, and the withdrawal amount\r\n     *      is within the available limits. The function calculates the rewards, updates the deposit record, and\r\n     *      transfers the liquid amount to the user after applying the withdrawal fee. The collateral tokens are burned.\r\n     *      The function emits a Withdraw event upon successful execution.\r\n     * @param _amount The amount of tokens to withdraw.\r\n     * @param _depositId The ID of the deposit from which to withdraw the tokens.\r\n     */\r\n    function withdraw(uint256 _amount, uint _depositId) public {\r\n        // Verify that the timelock has passed\r\n        require(block.timestamp >= userDeposits[_depositId].timelock, \"Timelock not passed\");\r\n        // Verify that the caller is the owner of the deposit\r\n        require(msg.sender == userDeposits[_depositId].staker, \"You are not the owner of this deposit\");\r\n        // Verify that the withdrawal amount is within the available limits\r\n        require(userDeposits[_depositId].deposited >= _amount, \"Can't withdraw more than you have\");\r\n        // Verify that the withdrawal amount is less than or equal to the collateral tokens the user has\r\n        require(_amount * userDeposits[_depositId].ratioERC20 <= helixERC20.balanceOf(msg.sender), \"Can't withdraw more tokens than the collateral you have\");\r\n\r\n        // Calculate the rewards\r\n        uint256 _rewards = calculateRewards(msg.sender, _depositId);\r\n        // Update the deposit record\r\n        userDeposits[_depositId].deposited -= _amount;\r\n        userDeposits[_depositId].timeOfLastUpdate = block.timestamp;\r\n        userDeposits[_depositId].unclaimedRewards += _rewards;\r\n\r\n        // Calculate the liquid amount to transfer after applying the withdrawal fee\r\n        uint256 _liquid = (_amount * (divisorERC20[userDeposits[_depositId].token] - withdrawalFeeERC20[userDeposits[_depositId].token])) / divisorERC20[userDeposits[_depositId].token];\r\n        uint256 fees = _amount - _liquid;\r\n\r\n        // Get the token contract\r\n        IERC20 konduxERC20 = IERC20(userDeposits[_depositId].token);\r\n\r\n        // Check if the treasury contract has approved the staking contract to withdraw the tokens\r\n        require(konduxERC20.allowance(authority.vault(), address(this)) >= _liquid, \"Treasury Contract need to approve Staking Contract to withdraw your tokens -- please call an Admin\");\r\n\r\n        // Subtract the staked amount\r\n        _subtractStakedAmount(_amount, userDeposits[_depositId].token, userDeposits[_depositId].staker);\r\n\r\n        // Get the decimals of the original staked token and Helix\r\n        uint8 originalTokenDecimals = decimalsERC20[userDeposits[_depositId].token];\r\n        uint8 helixDecimals = decimalsERC20[address(helixERC20)];\r\n\r\n        // Calculate the decimal difference\r\n        uint decimalDifference;\r\n        if (originalTokenDecimals < helixDecimals) {\r\n            decimalDifference = helixDecimals - originalTokenDecimals;\r\n        } else {\r\n            decimalDifference = 0;\r\n        }\r\n\r\n        // Burn the equivalent amount of collateral tokens, adjusted based on the decimal difference\r\n        helixERC20.burn(msg.sender, _amount * userDeposits[_depositId].ratioERC20 * (10 ** decimalDifference));\r\n\r\n        \r\n        // Transfer the liquid amount to the user\r\n        konduxERC20.transferFrom(authority.vault(), msg.sender, _liquid);\r\n\r\n        // Update the user's total rewarded amount + total rewarded amount for the token\r\n        _addTotalRewardedAmount(_liquid, userDeposits[_depositId].token, userDeposits[_depositId].staker); \r\n        _addTotalWithdrawalFees(_amount - _liquid, userDeposits[_depositId].token); \r\n\r\n        // Emit a Withdraw event\r\n        emit Withdraw(msg.sender, _liquid, fees);\r\n    }\r\n\r\n    /**\r\n     * @dev This function allows the owner of a deposit to withdraw a specified amount of their deposited tokens\r\n     *      before the timelock has passed. The user is punished by not receiving any reward boosts and paying an extra\r\n     *      fee proportional to the time left until the lock (the closer to the end of the locking time, the smaller the fee,\r\n     *      starting at 10%).\r\n     *      It verifies that the caller is the deposit owner, and the withdrawal amount is within the available limits.\r\n     *      The function calculates the rewards, updates the deposit record, and transfers the liquid amount to the user\r\n     *      after applying the extra fee and withdrawal fee. The collateral tokens are burned.\r\n     *      The function emits a Withdraw event upon successful execution.\r\n     * @param _amount The amount of tokens to withdraw.\r\n     * @param _depositId The ID of the deposit from which to withdraw the tokens.\r\n     */\r\n    function earlyUnstake(uint256 _amount, uint _depositId) public {\r\n        // Verify that the caller is the owner of the deposit\r\n        require(msg.sender == userDeposits[_depositId].staker, \"You are not the owner of this deposit\");\r\n        // Verify that the withdrawal amount is within the available limits\r\n        require(userDeposits[_depositId].deposited >= _amount, \"Can't withdraw more than you have\");\r\n        // Verify that the withdrawal amount is less than or equal to the collateral tokens the user has\r\n        require(_amount * userDeposits[_depositId].ratioERC20 <= helixERC20.balanceOf(msg.sender), \"Can't withdraw more tokens than the collateral you have\");\r\n        // Verify if the timelock has passed\r\n        require(block.timestamp < userDeposits[_depositId].timelock, \"Timelock has passed\");\r\n\r\n        // Calculate the extra fee proportional to the time left until the lock (the closer to the end of the locking time, the smaller the fee)\r\n        uint256 timeLeft = userDeposits[_depositId].timelock - block.timestamp;\r\n        uint256 lockDuration = userDeposits[_depositId].timelock - userDeposits[_depositId].lastDepositTime;\r\n        uint256 extraFee = (_amount * earlyWithdrawalPenalty[userDeposits[_depositId].token] * timeLeft) / (lockDuration * 100);\r\n\r\n        // If extra fee is more than the amount, set it to the amount\r\n        if (extraFee > _amount) {\r\n            extraFee = _amount;\r\n        }\r\n\r\n        // If extra fee is zero, apply 1% fee\r\n        if (extraFee == 0) {\r\n            extraFee = (_amount * 1) / 100;\r\n        }\r\n\r\n        // Calculate the total fee percentage\r\n        uint256 totalFeePercentage = extraFee + withdrawalFeeERC20[userDeposits[_depositId].token];\r\n\r\n        // Calculate the liquid amount to transfer after applying the total fee\r\n        uint256 _liquid = (_amount - totalFeePercentage);\r\n        uint256 fees = _amount - _liquid;\r\n\r\n        // Update the deposit record\r\n        userDeposits[_depositId].deposited -= _amount;\r\n        userDeposits[_depositId].timeOfLastUpdate = block.timestamp;\r\n\r\n        // Get the token contract\r\n        IERC20 konduxERC20 = IERC20(userDeposits[_depositId].token);\r\n\r\n        // Check if the treasury contract has approved the staking contract to withdraw the tokens\r\n        require(konduxERC20.allowance(authority.vault(), address(this)) >= _liquid, \"Treasury Contract need to approve Staking Contract to withdraw your tokens -- please call an Admin\");\r\n\r\n        // Subtract the staked amount\r\n        _subtractStakedAmount(_amount, userDeposits[_depositId].token, userDeposits[_depositId].staker);\r\n\r\n        // Calculate the decimal difference\r\n        uint decimalDifference;\r\n        if (decimalsERC20[userDeposits[_depositId].token] < decimalsERC20[address(helixERC20)]) {\r\n            decimalDifference = decimalsERC20[address(helixERC20)] - decimalsERC20[userDeposits[_depositId].token];\r\n        } else {\r\n            decimalDifference = 0;\r\n        }\r\n\r\n        // Burn the equivalent amount of collateral tokens, adjusted based on the decimal difference\r\n        helixERC20.burn(msg.sender, _amount * userDeposits[_depositId].ratioERC20 * (10 ** decimalDifference));\r\n        \r\n        // Transfer the liquid amount to the user\r\n        konduxERC20.transferFrom(authority.vault(), msg.sender, _liquid);\r\n\r\n        // Update the user's total rewarded amount + total rewarded amount for the token\r\n        _addTotalRewardedAmount(_liquid, userDeposits[_depositId].token, userDeposits[_depositId].staker); \r\n        _addTotalWithdrawalFees(_amount - _liquid, userDeposits[_depositId].token); \r\n\r\n        // Emit a Withdraw event\r\n        emit Withdraw(msg.sender, _liquid, fees);\r\n    }\r\n\r\n    /**\r\n     * @dev This function allows the owner of a deposit to withdraw a specified amount of their deposited tokens\r\n     *      and claim their earned rewards in a single transaction. It calls the withdraw and claimRewards functions.\r\n     * @param _amount The amount of tokens to withdraw.\r\n     * @param _depositId The ID of the deposit from which to withdraw the tokens and claim the rewards.\r\n     */\r\n    function withdrawAndClaim(uint256 _amount, uint _depositId) public {\r\n        withdraw(_amount, _depositId);\r\n        claimRewards(_depositId);\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the remaining time until the next allowed compounding action for a given deposit ID.\r\n     *      It calculates the remaining time based on the compound frequency for the deposited token.\r\n     *      If the timer has already passed, it returns 0.\r\n     * @param _depositId The ID of the deposit for which to return the compound timer.\r\n     * @return remainingTime The remaining time until the next allowed compounding action in seconds.\r\n     */\r\n    function compoundRewardsTimer(uint _depositId) public view returns (uint256 remainingTime) {\r\n        uint256 lastUpdateTime = userDeposits[_depositId].timeOfLastUpdate;\r\n        uint256 compoundFrequency = compoundFreqERC20[userDeposits[_depositId].token];\r\n\r\n        if (block.timestamp >= lastUpdateTime + compoundFrequency) {\r\n            return 0;\r\n        }\r\n\r\n        remainingTime = (lastUpdateTime + compoundFrequency) - block.timestamp;\r\n        return remainingTime;\r\n    }\r\n\r\n    /**\r\n     * @dev This function calculates the rewards for a specified staker and deposit ID. The rewards calculation\r\n     *      considers the deposit's elapsed time, staked amount, and a 25% APY compounded hourly.\r\n     *      If the provided staker is not the owner of the deposit, the function returns 0.\r\n     * @param _staker The address of the staker for which to calculate the rewards.\r\n     * @param _depositId The ID of the deposit for which to calculate the rewards.\r\n     * @return rewards The calculated rewards for the specified staker and deposit ID.\r\n     */\r\n    function calculateRewards(address _staker, uint _depositId) public view returns (uint256 rewards) {\r\n        // Retrieve deposit details by _depositId\r\n        Staker memory deposit_ = userDeposits[_depositId];\r\n\r\n        // Check if the staker is the owner of the deposit; if not, return 0\r\n        if (deposit_.staker != _staker) {\r\n            return 0;\r\n        }\r\n\r\n        // Calculate the elapsed time since the last update\r\n        uint256 elapsedTime = block.timestamp - deposit_.timeOfLastUpdate;\r\n        // Get the deposited amount\r\n        uint256 depositedAmount = deposit_.deposited;\r\n\r\n        // Calculate the base reward per second using the token's APR\r\n        uint256 tokenApr = aprERC20[deposit_.token];\r\n\r\n        /**\r\n         * @dev This line calculates the reward earned per second by a staker for their deposit, considering the deposit's APR (annual percentage rate).\r\n         *\r\n         * The formula breakdown:\r\n         * 1. depositedAmount: The amount of tokens the staker deposited.\r\n         * 2. tokenApr: The annual percentage rate for the token in question (e.g. 25% APR).\r\n         * 3. 1e18: A scaling factor used to maintain precision in the calculations (10^18 or 1 followed by 18 zeros).\r\n         * 4. 365 * 24 * 3600: The total number of seconds in a year, used to convert the APR to a per-second rate.\r\n         * 5. 100: Used to convert the APR percentage to a decimal (e.g. 25% becomes 0.25).\r\n         *\r\n         * The formula calculates the per-second reward by multiplying the deposited amount and the token's APR, and then scaling it up by 1e18.\r\n         * After that, it divides the result by the total number of seconds in a year and by 100 to adjust for the percentage.\r\n         *\r\n         * Using 1e18 maintains precision in the calculation, avoiding truncation errors due to integer division in Solidity.\r\n         * By scaling up the result and performing the divisions afterward, the calculation maintains precision without truncating intermediate results to zero.\r\n         */\r\n        uint256 rewardPerSecond = (depositedAmount * tokenApr * 1e18) / (365 * 24 * 3600 * 100);\r\n        \r\n        // Calculate the base reward based on elapsed time\r\n        uint256 _reward = elapsedTime * rewardPerSecond / 1e18;\r\n\r\n        // Calculate the boost percentage\r\n        uint256 boostPercentage = calculateBoostPercentage(_staker, _depositId);\r\n\r\n        // Calculate the final reward by applying the boost percentage\r\n        _reward = (_reward * boostPercentage) / divisorERC20[deposit_.token];\r\n\r\n        // Return the calculated reward\r\n        return _reward;\r\n    }      \r\n\r\n    // Internal functions:\r\n\r\n    /**\r\n     * @dev This internal function calculates the compounded rewards for a given deposited amount and number of elapsed periods.\r\n     *      The function assumes a fixed 25% APR and 8760 periods per year (hourly compounding). It uses exponentiation to calculate\r\n     *      the compounded rewards using the formula A = P * (1 + r/n)^(nt), where:\r\n     *          A: final amount after compounding\r\n     *          P: initial deposited amount\r\n     *          r: annual interest rate (25%)\r\n     *          n: number of periods in a year (8760)\r\n     *          t: number of elapsed periods\r\n     * @param _depositedAmount The initial deposited amount.\r\n     * @param _periodsElapsed The number of elapsed periods (hours) since the deposit.\r\n     * @return compound The calculated compounded rewards for the given deposited amount and elapsed periods.\r\n     */\r\n    function _calculateCompound(uint256 _depositedAmount, uint256 _periodsElapsed) internal pure returns (uint256 compound) {\r\n        uint256 periodsInYear = 8760; // 24 hours * 365 days\r\n        uint256 compoundFactor = 1 + (25 * 1e1 / periodsInYear);\r\n\r\n        //Calculate compounded rewards using exponentiation (A = P * (1 + r/n)^(nt))\r\n        compound = _depositedAmount * (compoundFactor ** _periodsElapsed) / (1e1 ** _periodsElapsed);\r\n\r\n        return compound;        \r\n    }\r\n        \r\n        \r\n    // Functions for modifying  staking mechanism variables:\r\n    /**\r\n     * @dev This internal function is used to update the total rewarded amount and the total rewarded amount\r\n     *      for a specific user and token. It is called when rewards are distributed or staked.\r\n     * @param _amount The amount of tokens to add to the total rewarded and user's total rewarded.\r\n     * @param _token The address of the token contract.\r\n     * @param _user The address of the user receiving the rewards.\r\n     */\r\n    function _addTotalRewardedAmount(uint256 _amount, address _token, address _user) internal {\r\n        totalRewarded[_token] += _amount;\r\n        userTotalRewardedByCoin[_token][_user] += _amount;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev This internal function adds the given amount to the total staked amount for a specified token\r\n     *      and increases the staked amount for the user by the same amount.\r\n     * @param _amount The amount to add to the total staked amount and user's staked amount.\r\n     * @param _token The address of the token for which to update the staked amount.\r\n     * @param _user The address of the user whose staked amount should be increased.\r\n     */\r\n    function _addTotalStakedAmount(uint256 _amount, address _token, address _user) internal {\r\n        totalStaked[_token] += _amount;\r\n        userTotalStakedByCoin[_token][_user] += _amount;\r\n    }\r\n\r\n    /**\r\n     * @dev This internal function subtracts the given amount from the total staked amount for a specified token\r\n     *      and decreases the staked amount for the user by the same amount.\r\n     * @param _amount The amount to subtract from the total staked amount and user's staked amount.\r\n     * @param _token The address of the token for which to update the staked amount.\r\n     * @param _user The address of the user whose staked amount should be decreased.\r\n     */\r\n    function _subtractStakedAmount(uint256 _amount,  address _token, address _user) internal {\r\n        // do a underflow check\r\n        require(totalStaked[_token] >= _amount, \"Staking: Not enough staked (Contract)\");\r\n        require(userTotalStakedByCoin[_token][_user] >= _amount, \"Staking: Not enough staked (User)\");\r\n        totalStaked[_token] -= _amount;\r\n        userTotalStakedByCoin[_token][_user] -= _amount;\r\n    }\r\n\r\n    /**\r\n     * @dev This internal function adds the given amount to the total withdrawal fees for a specified token.\r\n     * @param _amount The amount to add to the total withdrawal fees.\r\n     * @param _token The address of the token for which to update the withdrawal fees.\r\n     */\r\n    function _addTotalWithdrawalFees(uint256 _amount, address _token) internal {\r\n        totalWithdrawalFees[_token] += _amount;\r\n    }\r\n    \r\n    /**\r\n     * @dev This function sets the APR for a specified token.\r\n     * @param _apr The rewards per hour value to be set, as x% APR. (e.g. 25 = 25%)\r\n     * @param _tokenId The address of the token for which to set the rewards per hour.\r\n     */\r\n    function setAPR(uint256 _apr, address _tokenId) public onlyGovernor {\r\n        aprERC20[_tokenId] = _apr; \r\n        emit NewAPR(_apr, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev This function sets the minimum staking amount for a specified token.\r\n     * @param _minStake The minimum staking amount to be set, in wei.\r\n     * @param _tokenId The address of the token for which to set the minimum staking amount.\r\n     */\r\n    function setMinStake(uint256 _minStake, address _tokenId) public onlyGovernor {\r\n        minStakeERC20[_tokenId] = _minStake;\r\n        emit NewMinStake(_minStake, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev This function sets the ratio for a specified ERC20 token.\r\n     * @param _ratio The ratio value to be set.\r\n     * @param _tokenId The address of the token for which to set the ratio.\r\n     */\r\n    function setRatio(uint256 _ratio, address _tokenId) public onlyGovernor {\r\n        ratioERC20[_tokenId] = _ratio;\r\n        emit NewRatio(_ratio, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev This function sets the address of the Helix ERC20 contract.\r\n     * @param _helix The address of the Helix ERC20 contract.\r\n     */\r\n    function setHelixERC20(address _helix) public onlyGovernor {\r\n        require(_helix != address(0), \"Helix address cannot be 0x0\");\r\n        helixERC20 = IHelix(_helix);\r\n        emit NewHelixERC20(_helix);\r\n    }\r\n\r\n    /**\r\n     * @dev This function sets the address of the konduxERC721Founders contract.\r\n     * @param _konduxERC721Founders The address of the konduxERC721Founders contract.\r\n     */\r\n    function setKonduxERC721Founders(address _konduxERC721Founders) public onlyGovernor {\r\n        require(_konduxERC721Founders != address(0), \"Founders address cannot be 0x0\");\r\n        konduxERC721Founders = IERC721(_konduxERC721Founders);\r\n        emit NewKonduxERC721Founders(_konduxERC721Founders);\r\n    }\r\n\r\n    /**\r\n     * @dev This function sets the address of the konduxERC721kNFT contract.\r\n     * @param _konduxERC721kNFT The address of the konduxERC721kNFT contract.\r\n     */\r\n    function setKonduxERC721kNFT(address _konduxERC721kNFT) public onlyGovernor {\r\n        require(_konduxERC721kNFT != address(0), \"kNFT address cannot be 0x0\");\r\n        konduxERC721kNFT = _konduxERC721kNFT;\r\n        emit NewKonduxERC721kNFT(_konduxERC721kNFT);\r\n    }\r\n\r\n    /**\r\n     * @dev This function sets the address of the Treasury contract.\r\n     * @param _treasury The address of the Treasury contract.\r\n     */\r\n    function setTreasury(address _treasury) public onlyGovernor {\r\n        require(_treasury != address(0), \"Treasury address cannot be 0x0\");\r\n        treasury = ITreasury(_treasury);\r\n        emit NewTreasury(_treasury);\r\n    }\r\n\r\n    /**\r\n     * @dev This function sets the withdrawal fee for a specified token.\r\n     * @param _withdrawalFee The withdrawal fee value to be set.\r\n     * @param _tokenId The address of the token for which to set the withdrawal fee.\r\n     */\r\n    function setWithdrawalFee(uint256 _withdrawalFee, address _tokenId) public onlyGovernor {\r\n        require(_withdrawalFee <= divisorERC20[_tokenId], \"Withdrawal fee cannot be more than 100%\");\r\n        withdrawalFeeERC20[_tokenId] = _withdrawalFee;\r\n        emit NewWithdrawalFee(_withdrawalFee, _tokenId); \r\n    }\r\n\r\n    /**\r\n     * @dev This function sets the founders reward boost for a specified token.\r\n     * @param _foundersRewardBoost The founders reward boost value to be set.\r\n     * @param _tokenId The address of the token for which to set the founders reward boost.\r\n     */\r\n    function setFoundersRewardBoost(uint256 _foundersRewardBoost, address _tokenId) public onlyGovernor {\r\n        foundersRewardBoostERC20[_tokenId] = _foundersRewardBoost;\r\n        emit NewFoundersRewardBoost(_foundersRewardBoost, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev This function sets the kNFT reward boost for a specified token.\r\n     * @param _kNFTRewardBoost The kNFT reward boost value to be set.\r\n     * @param _tokenId The address of the token for which to set the kNFT reward boost.\r\n     */\r\n    function setkNFTRewardBoost(uint256 _kNFTRewardBoost, address _tokenId) public onlyGovernor {\r\n        kNFTRewardBoostERC20[_tokenId] = _kNFTRewardBoost;\r\n        emit NewKNFTRewardBoost(_kNFTRewardBoost, _tokenId); \r\n    }\r\n\r\n    /**\r\n    * @dev This function sets the compound frequency for a specified token.\r\n    * @param _compoundFreq The compound frequency value to be set.\r\n    * @param _tokenId The address of the token for which to set the compound frequency.\r\n    */\r\n    function setCompoundFreq(uint256 _compoundFreq, address _tokenId) public onlyGovernor {\r\n        compoundFreqERC20[_tokenId] = _compoundFreq;\r\n        emit NewCompoundFreq(_compoundFreq, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev This function sets the penalty percentage for early withdrawal of a specified token.\r\n     * @param token The address of the token for which to set the penalty percentage.\r\n     * @param penaltyPercentage The penalty percentage value to be set. Must be between 0 and 100. \r\n     */\r\n    function setEarlyWithdrawalPenalty(address token, uint256 penaltyPercentage) public onlyGovernor {\r\n        require(penaltyPercentage <= 100, \"Penalty percentage must be between 0 and 100\");\r\n        earlyWithdrawalPenalty[token] = penaltyPercentage;\r\n    } \r\n\r\n    /**\r\n     * @dev This function sets the timelock category boost for a specified category.\r\n     * @param _category The category for which to set the boost.\r\n     * @param _boost The boost value to be set.\r\n     */\r\n    function setTimelockCategoryBoost(uint _category, uint256 _boost) public onlyGovernor {\r\n        timelockCategoryBoost[_category] = _boost;\r\n    }\r\n\r\n    /**\r\n     * @dev This function sets the divisor for a specified token.\r\n     * @param _divisor The divisor value to be set.\r\n     * @param _tokenId The address of the token for which to set the divisor.\r\n     */\r\n    function setDivisorERC20(uint256 _divisor, address _tokenId) public onlyGovernor {\r\n        divisorERC20[_tokenId] = _divisor;\r\n        emit NewDivisorERC20(_divisor, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev This internal function sets whether an ERC20 token is authorized as a staking currency.\r\n     * Emits a {NewAuthorizedERC20} event.\r\n     * @param _token The address of the token to be authorized or deauthorized.\r\n     * @param _authorized True to authorize the token, false to deauthorize.\r\n     */\r\n    function _setAuthorizedERC20(address _token, bool _authorized) internal {\r\n        require(_token != address(0), \"Token address cannot be 0x0\");\r\n        if (_authorized == true) {\r\n            require(aprERC20[_token] > 0, \"Rewards per hour must be greater than 0\");\r\n            require(compoundFreqERC20[_token] > 0, \"Compound frequency must be greater than 0\");\r\n            require(withdrawalFeeERC20[_token] > 0, \"Withdrawal fee must be greater than 0\");\r\n            require(foundersRewardBoostERC20[_token] > 0, \"Founders reward boost must be greater than 0\");\r\n            require(kNFTRewardBoostERC20[_token] > 0, \"kNFT reward boost must be greater than 0\");\r\n            require(ratioERC20[_token] > 0, \"Ratio must be greater than 0\");\r\n            require(minStakeERC20[_token] > 0, \"Minimum stake must be greater than 0\");\r\n            require(divisorERC20[_token] > 0, \"Divisor must be greater than 0\");\r\n            require(IERC20(_token).totalSupply() > 0, \"Token total supply must be greater than 0\");\r\n        }\r\n        authorizedERC20[_token] = _authorized;\r\n        emit NewAuthorizedERC20(_token, _authorized);\r\n    }\r\n\r\n    /**\r\n     * @dev This function sets whether an ERC20 token is authorized as a staking currency.\r\n     * Emits a {NewAuthorizedERC20} event.\r\n     * @param _token The address of the token to be authorized or deauthorized.\r\n     * @param _authorized True to authorize the token, false to deauthorize.\r\n     */\r\n    function setAuthorizedERC20(address _token, bool _authorized) public onlyGovernor {\r\n        _setAuthorizedERC20(_token, _authorized);\r\n    }\r\n\r\n    /**\r\n     * @dev This function sets the version of dna that is allowed to be used for reward bonus\r\n     * @param _dnaVersion The dna version to be set.\r\n     * @param _allowed True to allow the dna version, false to disallow.\r\n     */\r\n    function setAllowedDnaVersion(uint256 _dnaVersion, bool _allowed) public onlyGovernor {\r\n        allowedDnaVersions[_dnaVersion] = _allowed;\r\n    }\r\n\r\n    /**\r\n     * @dev This function sets the decimals of a specified token.\r\n     * @param _decimals The decimals value to be set.\r\n     * @param _tokenId The address of the token for which to set the decimals.\r\n     */\r\n    function setDecimalsERC20(uint8 _decimals, address _tokenId) public onlyGovernor {\r\n        decimalsERC20[_tokenId] = _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev This function adds a new staking token with its parameters.\r\n     * Emits various events based on the setter functions called during token addition.\r\n     * Emits a {NewAuthorizedERC20} event at the end.\r\n     * @param _token The address of the new staking token.\r\n     * @param _apr The rewards per hour for the new staking token.\r\n     * @param _compoundFreq The compound frequency for the new staking token.\r\n     * @param _withdrawalFee The withdrawal fee for the new staking token.\r\n     * @param _foundersRewardBoost The founders reward boost for the new staking token.\r\n     * @param _kNFTRewardBoost The kNFT reward boost for the new staking token.\r\n     * @param _ratio The ratio for the new staking token.\r\n     * @param _minStake The minimum stake for the new staking token.\r\n     */ \r\n    function addNewStakingToken(address _token, uint256 _apr, uint256 _compoundFreq, uint256 _withdrawalFee, uint256 _foundersRewardBoost, uint256 _kNFTRewardBoost, uint256 _ratio, uint256 _minStake) public onlyGovernor {\r\n        require(_token != address(0), \"Token address cannot be 0x0\");\r\n        require(_apr > 0, \"Rewards per hour must be greater than 0\"); \r\n        require(_compoundFreq > 0, \"Compound frequency must be greater than 0\");\r\n        require(_withdrawalFee > 0, \"Withdrawal fee must be greater than 0\");\r\n        require(_foundersRewardBoost > 0, \"Founders reward boost must be greater than 0\");\r\n        require(_kNFTRewardBoost > 0, \"kNFT reward boost must be greater than 0\");\r\n        require(_ratio > 0, \"Ratio must be greater than 0\");\r\n        require(_minStake > 0, \"Minimum stake must be greater than 0\");\r\n        require(IERC20(_token).totalSupply() > 0, \"Token total supply must be greater than 0\");\r\n\r\n        setDivisorERC20(10_000, _token);\r\n        setFoundersRewardBoost(_foundersRewardBoost, _token);\r\n        setkNFTRewardBoost(_kNFTRewardBoost, _token);\r\n        setAPR(_apr, _token); \r\n        setRatio(_ratio, _token);\r\n        setWithdrawalFee(_withdrawalFee, _token);\r\n        setCompoundFreq(_compoundFreq, _token);\r\n        setMinStake(_minStake, _token);\r\n        setDecimalsERC20(IERC20Metadata(_token).decimals(), _token);\r\n\r\n        _setAuthorizedERC20(_token, true); \r\n    }\r\n\r\n\r\n    // Functions for getting staking mechanism variables:\r\n\r\n    /**\r\n     * @dev This function returns the time of the last update for the specified deposit ID.\r\n     * @param _depositId The ID of the deposit for which the time of the last update is requested.\r\n     * @return _timeOfLastUpdate The time of the last update for the specified deposit ID.\r\n     */\r\n    function getTimeOfLastUpdate(uint _depositId) public view returns (uint256 _timeOfLastUpdate) {\r\n        return userDeposits[_depositId].timeOfLastUpdate;\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the staked amount for the specified deposit ID.\r\n     * @param _depositId The ID of the deposit for which the staked amount is requested.\r\n     * @return _deposited The staked amount for the specified deposit ID.\r\n     */\r\n    function getStakedAmount(uint _depositId) public view returns (uint256 _deposited) {\r\n        return userDeposits[_depositId].deposited;\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the APR for the specified token.\r\n     * @param _tokenId The address of the token for which the rewards per hour are requested.\r\n     * @return _rewardsPerHour The rewards per hour for the specified token.\r\n     */\r\n    function getAPR(address _tokenId) public view returns (uint256 _rewardsPerHour) {\r\n        return aprERC20[_tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the Founder's reward boost for the specified token.\r\n     * @param _tokenId The address of the token for which the Founder's reward boost is requested.\r\n     * @return _foundersRewardBoost The Founder's reward boost for the specified token.\r\n     */\r\n    function getFoundersRewardBoost(address _tokenId) public view returns (uint256 _foundersRewardBoost) {\r\n        return foundersRewardBoostERC20[_tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the kNFT reward boost for the specified token.\r\n     * @param _tokenId The address of the token for which the kNFT reward boost is requested.\r\n     * @return _kNFTRewardBoost The kNFT reward boost for the specified token.\r\n     */\r\n    function getkNFTRewardBoost(address _tokenId) public view returns (uint256 _kNFTRewardBoost) {\r\n        return kNFTRewardBoostERC20[_tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the minimum stake for the specified token.\r\n     * @param _tokenId The address of the token for which the minimum stake is requested.\r\n     * @return _minStake The minimum stake for the specified token.\r\n     */\r\n    function getMinStake(address _tokenId) public view returns (uint256 _minStake) {\r\n        return minStakeERC20[_tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the timelock category for the specified deposit ID.\r\n     * @param _depositId The ID of the deposit for which the timelock category is requested.\r\n     * @return _timelockCategory The timelock category for the specified deposit ID.\r\n     */\r\n    function getTimelockCategory(uint _depositId) public view returns (uint8 _timelockCategory) {\r\n        return userDeposits[_depositId].timelockCategory;\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the timelock for the specified deposit ID.\r\n     * @param _depositId The ID of the deposit for which the timelock is requested.\r\n     * @return _timelock The timelock for the specified deposit ID.\r\n     */\r\n    function getTimelock(uint _depositId) public view returns (uint256 _timelock) {\r\n        return userDeposits[_depositId].timelock;\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the deposit IDs for the specified user.\r\n     * @param _user The address of the user for which the deposit IDs are requested.\r\n     * @return An array of deposit IDs for the specified user.\r\n     */\r\n    function getDepositIds(address _user) public view returns (uint256[] memory) {\r\n        return userDepositsIds[_user];\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the withdrawal fee for the specified token.\r\n     * @param _tokenId The address of the token for which the withdrawal fee is requested.\r\n     * @return _withdrawalFee The withdrawal fee for the specified token.\r\n     */\r\n    function getWithdrawalFee(address _tokenId) public view returns (uint256 _withdrawalFee) {\r\n        return withdrawalFeeERC20[_tokenId]; \r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the total amount staked for a specific token.\r\n     * @param _token The address of the token contract.\r\n     * @return _totalStaked The total amount staked for the given token.\r\n     */\r\n    function getTotalStaked(address _token) public view returns (uint256 _totalStaked) {\r\n        return totalStaked[_token];\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the total amount staked by a specific user for a specific token.\r\n     * @param _user The address of the user.\r\n     * @param _token The address of the token contract.\r\n     * @return _totalStaked The total amount staked by the user for the given token.\r\n     */\r\n    function getUserTotalStakedByCoin(address _user, address _token) public view returns (uint256 _totalStaked) {\r\n        return userTotalStakedByCoin[_token][_user];\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the total rewards earned for a specific token.\r\n     * @param _token The address of the token contract.\r\n     * @return _totalRewards The total rewards earned for the given token.\r\n     */\r\n    function getTotalRewards(address _token) public view returns (uint256 _totalRewards) {\r\n        return totalRewarded[_token];\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the total rewards earned by a specific user for a specific token.\r\n     * @param _user The address of the user.\r\n     * @param _token The address of the token contract.\r\n     * @return _totalRewards The total rewards earned by the user for the given token.\r\n     */\r\n    function getUserTotalRewardsByCoin(address _user, address _token) public view returns (uint256 _totalRewards) {\r\n        return userTotalRewardedByCoin[_token][_user]; \r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the total withdrawal fees for a specific token.\r\n     * @param _token The address of the token contract.\r\n     * @return _totalWithdrawalFees The total withdrawal fees for the given token.\r\n     */\r\n    function getTotalWithdrawalFees(address _token) public view returns (uint256 _totalWithdrawalFees) {\r\n        return totalWithdrawalFees[_token];\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the timestamp of the deposit with the specified ID.\r\n     * @param _depositId The id of the deposit for which the timestamp is requested.\r\n     * @return _depositTimestamp The timestamp of the deposit\r\n     */\r\n    function getDepositTimestamp(uint _depositId) public view returns (uint256 _depositTimestamp) {\r\n        return userDeposits[_depositId].lastDepositTime; \r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the penalty for early withdrawal for the specified token in basis points. (X% = X * 100)\r\n     * @param token The address of the token for which the penalty is requested.\r\n     * @return The penalty for early withdrawal for the specified token in basis points.\r\n     */\r\n    function getEarlyWithdrawalPenalty(address token) public view returns (uint256) {\r\n        return earlyWithdrawalPenalty[token];\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the timelock category boost for the specified category.\r\n     * @param _category The category for which the timelock category boost is requested.\r\n     * @return The timelock category boost for the specified category.\r\n     */\r\n    function getTimelockCategoryBoost(uint _category) public view returns (uint256) {\r\n        return timelockCategoryBoost[_category];\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the divisor for the specified token.\r\n     * @param _token The address of the token for which the divisor is requested.\r\n     * @return The divisor for the specified token.\r\n     */\r\n    function getDivisorERC20(address _token) public view returns (uint256) {\r\n        return divisorERC20[_token];\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the permission of usage of a dna version as boost.\r\n     * @param _dnaVersion The dna version for which the permission is requested.\r\n     * @return The permission of usage of a dna version as boost\r\n     */\r\n    function getAllowedDnaVersion(uint256 _dnaVersion) public view returns (bool) {\r\n        return allowedDnaVersions[_dnaVersion];\r\n    }\r\n\r\n    /**\r\n     * @dev This function retrieves the deposit information for a given deposit ID. It returns the staked amount\r\n     *      and the earned rewards (including unclaimed rewards) for the specified deposit.\r\n     * @param _depositId The ID of the deposit for which to retrieve the information.\r\n     * @return _stake The staked amount for the specified deposit.\r\n     * @return _unclaimedRewards The earned rewards (including unclaimed rewards) for the specified deposit.\r\n     */\r\n    function getDepositInfo(uint _depositId) public view returns (uint256 _stake, uint256 _unclaimedRewards) {\r\n        _stake = userDeposits[_depositId].deposited;  \r\n        _unclaimedRewards = calculateRewards(msg.sender, _depositId) + userDeposits[_depositId].unclaimedRewards;\r\n        return (_stake, _unclaimedRewards);  \r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the decimals for the specified token.\r\n     * @param _token The address of the token for which the decimals are requested.\r\n     * @return The decimals for the specified token.\r\n     */\r\n    function getDecimalsERC20(address _token) public view returns (uint8) {\r\n        return decimalsERC20[_token];\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the ratio for the specified token.\r\n     * @param _token The address of the token for which the ratio is requested.\r\n     * @return The ratio for the specified token.\r\n     */\r\n    function getRatioERC20(address _token) public view returns (uint256) {\r\n        return ratioERC20[_token];\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the ratio for the specified deposit.\r\n     * @param _depositId The ID of the deposit for which to retrieve the information.\r\n     * @return The ratio for the specified deposit.\r\n     */\r\n    function getDepositRatioERC20(uint256 _depositId) public view returns (uint256) {\r\n        return userDeposits[_depositId].ratioERC20;\r\n    }   \r\n\r\n    /**\r\n     * @dev This function returns the top 5 bonuses and their corresponding kNFT IDs.\r\n     * @param _staker The address of the staker.\r\n     * @param _stakeId The ID of the deposit for which to calculate the boost percentage.\r\n     * @return top5Bonuses An array of the top 5 bonuses.\r\n     * @return top5Ids An array of the corresponding kNFT IDs.\r\n     */\r\n    function getTop5BonusesAndIds(address _staker, uint256 _stakeId) public view returns (uint256[] memory top5Bonuses, uint256[] memory top5Ids) {\r\n        uint256 kNFTBalance = IERC721(konduxERC721kNFT).balanceOf(_staker);\r\n\r\n        // Initialize arrays to store the top 5 bonuses and their corresponding kNFT IDs\r\n        top5Bonuses = new uint256[](5);\r\n        top5Ids = new uint256[](5);\r\n\r\n        // Iterate through the staker's kNFTs\r\n        for (uint256 i = 0; i < kNFTBalance; i++) {\r\n            uint256 tokenId = IERC721Enumerable(konduxERC721kNFT).tokenOfOwnerByIndex(_staker, i);\r\n\r\n            // if the user's kNFT was received after the deposit date, continue\r\n            if (IKondux(konduxERC721kNFT).getTransferDate(tokenId) > userDeposits[_stakeId].lastDepositTime) {\r\n                continue;\r\n            }\r\n\r\n            // Get the kNFT's DNA version and check if it's allowed\r\n            int256 dnaVersion = IKondux(konduxERC721kNFT).readGen(tokenId, 0, 1);\r\n            if (!allowedDnaVersions[uint256(dnaVersion)]) { \r\n                continue;\r\n            }\r\n\r\n            // Get the kNFT's boost value and multiply it by 100 to get a percentage\r\n            int256 dnaBoost = IKondux(konduxERC721kNFT).readGen(tokenId, 1, 2) * 100;\r\n\r\n            // Clamp the boost value to 0 if it's negative\r\n            if (dnaBoost < 0) {\r\n                dnaBoost = 0;\r\n            }\r\n\r\n            // Update the top 5 bonuses array with the current kNFT boost\r\n            for (uint256 j = 0; j < 5; j++) {\r\n                if (uint256(dnaBoost) > top5Bonuses[j]) {\r\n                    uint256 temp = top5Bonuses[j];\r\n                    top5Bonuses[j] = uint256(dnaBoost);\r\n                    dnaBoost = int256(temp);\r\n\r\n                    uint256 tempId = top5Ids[j];\r\n                    top5Ids[j] = tokenId;\r\n                    tokenId = tempId;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (top5Bonuses, top5Ids);\r\n    }\r\n\r\n    /**\r\n     * @dev This function returns the top 5 bonuses and their corresponding kNFT IDs.\r\n     * @param _staker The address of the staker.\r\n     * @return top5Bonuses An array of the top 5 bonuses.\r\n     * @return top5Ids An array of the corresponding kNFT IDs.\r\n     */\r\n    function getMaxTop5BonusesAndIds(address _staker) public view returns (uint256[] memory top5Bonuses, uint256[] memory top5Ids) {\r\n        uint256 kNFTBalance = IERC721(konduxERC721kNFT).balanceOf(_staker);\r\n\r\n        // Initialize arrays to store the top 5 bonuses and their corresponding kNFT IDs\r\n        top5Bonuses = new uint256[](5);\r\n        top5Ids = new uint256[](5);\r\n\r\n        // Iterate through the staker's kNFTs\r\n        for (uint256 i = 0; i < kNFTBalance; i++) {\r\n            uint256 tokenId = IERC721Enumerable(konduxERC721kNFT).tokenOfOwnerByIndex(_staker, i);\r\n\r\n            // Get the kNFT's DNA version and check if it's allowed\r\n            int256 dnaVersion = IKondux(konduxERC721kNFT).readGen(tokenId, 0, 1);\r\n            if (!allowedDnaVersions[uint256(dnaVersion)]) { \r\n                continue;\r\n            }\r\n\r\n            // Get the kNFT's boost value and multiply it by 100 to get a percentage\r\n            int256 dnaBoost = IKondux(konduxERC721kNFT).readGen(tokenId, 1, 2) * 100;\r\n\r\n            // Clamp the boost value to 0 if it's negative\r\n            if (dnaBoost < 0) {\r\n                dnaBoost = 0;\r\n            }\r\n\r\n            // Update the top 5 bonuses array with the current kNFT boost\r\n            for (uint256 j = 0; j < 5; j++) {\r\n                if (uint256(dnaBoost) > top5Bonuses[j]) {\r\n                    uint256 temp = top5Bonuses[j];\r\n                    top5Bonuses[j] = uint256(dnaBoost);\r\n                    dnaBoost = int256(temp);\r\n\r\n                    uint256 tempId = top5Ids[j];\r\n                    top5Ids[j] = tokenId;\r\n                    tokenId = tempId;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (top5Bonuses, top5Ids);\r\n    }\r\n\r\n    /**\r\n     * @dev This function calculates the boost percentage for a staker's deposit.\r\n     * @param _staker The address of the staker.\r\n     * @param _stakeId The ID of the deposit for which to calculate the boost percentage.\r\n     * @return boostPercentage The boost percentage for the staker's deposit.\r\n     */\r\n    function calculateKNFTBoostPercentage(address _staker, uint256 _stakeId) public view returns (uint256 boostPercentage) {\r\n        // Get the top 5 bonuses and their corresponding kNFT IDs\r\n        (uint256[] memory top5Bonuses, ) = getTop5BonusesAndIds(_staker, _stakeId);\r\n\r\n        // Add the top 5 bonuses to the boost percentage\r\n        for (uint256 i = 0; i < 5; i++) {\r\n            boostPercentage += top5Bonuses[i];\r\n        }\r\n\r\n        return boostPercentage;\r\n    }\r\n\r\n    /**\r\n     * @dev This function calculates the boost percentage for a staker.\r\n     * @param _staker The address of the staker.\r\n     * @return boostPercentage The boost percentage for the staker's deposit.\r\n     */\r\n    function calculateMaxKNFTBoostPercentage(address _staker) public view returns (uint256 boostPercentage) {\r\n        // Get the top 5 bonuses and their corresponding kNFT IDs\r\n        (uint256[] memory top5Bonuses, ) = getMaxTop5BonusesAndIds(_staker);\r\n\r\n        // Add the top 5 bonuses to the boost percentage\r\n        for (uint256 i = 0; i < 5; i++) {\r\n            boostPercentage += top5Bonuses[i];\r\n        }\r\n\r\n        return boostPercentage;\r\n    }\r\n\r\n    /**\r\n     * @dev This function calculates the boost percentage for a specified staker and deposit ID.\r\n     * @param _staker The address of the staker for which to calculate the boost.\r\n     * @param _stakeId The ID of the stake for which to calculate the boost.\r\n     * @return boostPercentage The calculated boost percentage for the specified staker and deposit ID.\r\n     */\r\n    function calculateBoostPercentage(address _staker, uint _stakeId) public view returns (uint256 boostPercentage) {\r\n        // Retrieve deposit details by _depositId\r\n        Staker memory deposit_ = userDeposits[_stakeId];\r\n\r\n        // Initialize the boost percentage with the base boost percentage for the token\r\n        boostPercentage = divisorERC20[deposit_.token];\r\n\r\n        // Check if the staker has Founder's NFTs and add the boost percentage\r\n        if (IERC721(konduxERC721Founders).balanceOf(_staker) > 0) {\r\n            boostPercentage += foundersRewardBoostERC20[deposit_.token];\r\n        }\r\n\r\n        // Check if the staker has any kNFTs and calculate the top 5 boosts\r\n        if (IERC721(konduxERC721kNFT).balanceOf(_staker) > 0) {\r\n            boostPercentage += calculateKNFTBoostPercentage(_staker, _stakeId); \r\n        }\r\n\r\n        // If the deposit has a timelock category, add the corresponding boost\r\n        if (deposit_.timelockCategory > 0) {\r\n            boostPercentage += timelockCategoryBoost[deposit_.timelockCategory];\r\n        }\r\n\r\n        return boostPercentage;\r\n    }\r\n\r\n}"
    },
    "contracts/types/AccessControlled.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"../interfaces/IAuthority.sol\";\r\n\r\n/// @dev Reasoning for this contract = modifiers literaly copy code\r\n/// instead of pointing towards the logic to execute. Over many\r\n/// functions this bloats contract size unnecessarily.\r\n/// imho modifiers are a meme.\r\nabstract contract AccessControlled {\r\n    /* ========== EVENTS ========== */\r\n\r\n    event AuthorityUpdated(IAuthority authority);\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    IAuthority public authority;\r\n\r\n    /* ========== Constructor ========== */\r\n\r\n    constructor(IAuthority _authority) {\r\n        require(address(_authority) != address(0), \"Authority cannot be zero address\");\r\n        authority = _authority;\r\n        emit AuthorityUpdated(_authority);\r\n    }\r\n\r\n    /* ========== \"MODIFIERS\" ========== */\r\n\r\n    modifier onlyGovernor {\r\n        _onlyGovernor();\r\n        _;\r\n    }\r\n\r\n    modifier onlyGuardian {\r\n        _onlyGuardian();\r\n        _;\r\n    }\r\n\r\n    modifier onlyPolicy {\r\n        _onlyPolicy();\r\n        _;\r\n    }\r\n\r\n    modifier onlyVault {\r\n        _onlyVault();\r\n        _;\r\n    }\r\n\r\n    modifier onlyGlobalRole(bytes32 _role){\r\n        _onlyRole(_role);\r\n        _;\r\n    }\r\n\r\n    /* ========== GOV ONLY ========== */\r\n\r\n    function initializeAuthority(IAuthority _newAuthority) internal {\r\n        require(authority == IAuthority(address(0)), \"AUTHORITY_INITIALIZED\");\r\n        authority = _newAuthority;\r\n        emit AuthorityUpdated(_newAuthority);\r\n    }\r\n\r\n    function setAuthority(IAuthority _newAuthority) external {\r\n        _onlyGovernor();\r\n        authority = _newAuthority;\r\n        emit AuthorityUpdated(_newAuthority);\r\n    }\r\n\r\n    /* ========== INTERNAL CHECKS ========== */\r\n\r\n    function _onlyGovernor() internal view {\r\n        require(msg.sender == authority.governor(), \"UNAUTHORIZED\");\r\n    }\r\n\r\n    function _onlyGuardian() internal view {\r\n        require(msg.sender == authority.guardian(), \"UNAUTHORIZED\");\r\n    }\r\n\r\n    function _onlyPolicy() internal view {\r\n        require(msg.sender == authority.policy(), \"UNAUTHORIZED\");        \r\n    }\r\n\r\n    function _onlyVault() internal view {\r\n        require(msg.sender == authority.vault(), \"UNAUTHORIZED\");                \r\n    }\r\n\r\n    function _onlyRole(bytes32 _role) internal view {\r\n        require(authority.roles(msg.sender) == _role, \"UNAUTHORIZED\");\r\n    }\r\n  \r\n}\r\n"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}