{
  "address": "0x86fdC2A7AD81bD55C3c4C961d885421f72A3f95d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authority",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositEther",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EtherDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EtherWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "approvedTokensCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approvedTokensList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositEther",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "erc20ApprovalSetup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getApprovedToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getApprovedTokenAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getApprovedTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getApprovedTokensCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getApprovedTokensList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEtherBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getStakingContractAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getStakingContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakingContractEtherBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isTokenApprooved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Treasury.STATUS",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "permissions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Treasury.STATUS",
          "name": "_status",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_permission",
          "type": "bool"
        }
      ],
      "name": "setPermission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        }
      ],
      "name": "setStakingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawEther",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa4ac8f1b0a42664f7f6a7d200a750bd21aaf36b980c997af0fc33328d074d130",
  "receipt": {
    "to": null,
    "from": "0x9767a2B120614F526e923DAAF89843EC7C2292d7",
    "contractAddress": "0x86fdC2A7AD81bD55C3c4C961d885421f72A3f95d",
    "transactionIndex": 25,
    "gasUsed": "1173599",
    "logsBloom": "0x
    "blockHash": "0xfe0fd5fe2eb894a3feabc66b93175e34f59556659367a9d53a2cc2510e3c8dd8",
    "transactionHash": "0xa4ac8f1b0a42664f7f6a7d200a750bd21aaf36b980c997af0fc33328d074d130",
    "logs": [
      {
        "transactionIndex": 25,
        "blockNumber": 3465800,
        "transactionHash": "0xa4ac8f1b0a42664f7f6a7d200a750bd21aaf36b980c997af0fc33328d074d130",
        "address": "0x86fdC2A7AD81bD55C3c4C961d885421f72A3f95d",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad"
        ],
        "data": "0x000000000000000000000000685a13093ca561f531c93185b942a3f33385e14e",
        "logIndex": 39,
        "blockHash": "0xfe0fd5fe2eb894a3feabc66b93175e34f59556659367a9d53a2cc2510e3c8dd8"
      }
    ],
    "blockNumber": 3465800,
    "cumulativeGasUsed": "7224697",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x685a13093cA561F531c93185B942a3f33385e14E"
  ],
  "numDeployments": 4,
  "solcInputHash": "bc110a988da030cc88079229f7260446",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtherDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtherWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"approvedTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvedTokensList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"erc20ApprovalSetup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getApprovedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getApprovedTokenAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getApprovedTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getApprovedTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getApprovedTokensList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEtherBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getStakingContractAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getStakingContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingContractEtherBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTokenApprooved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Treasury.STATUS\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permissions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Treasury.STATUS\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_permission\",\"type\":\"bool\"}],\"name\":\"setPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract handles deposits and withdrawals of tokens and Ether.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the Treasury contract.\",\"params\":{\"_authority\":\"The address of the authority contract.\"}},\"deposit(uint256,address)\":{\"details\":\"Deposits a specified amount of the specified token.\",\"params\":{\"_amount\":\"The amount of tokens to deposit.\",\"_token\":\"The address of the token contract.\"}},\"depositEther()\":{\"details\":\"Deposits Ether to the contract.\"},\"erc20ApprovalSetup(address,uint256)\":{\"details\":\"Sets up the ERC20 token approval.\",\"params\":{\"_amount\":\"The amount to approve.\",\"_token\":\"The address of the token contract.\"}},\"getApprovedToken(uint256)\":{\"details\":\"Returns the approved token at the specified index.\",\"params\":{\"_index\":\"The index of the approved token.\"},\"returns\":{\"_0\":\"The address of the approved token at the given index.\"}},\"getApprovedTokenAllowance(address)\":{\"details\":\"Returns the allowance of the approved token for the staking contract.\",\"params\":{\"_token\":\"The address of the approved token.\"},\"returns\":{\"_0\":\"The allowance of the approved token for the staking contract.\"}},\"getApprovedTokenBalance(address)\":{\"details\":\"Returns the balance of the approved token in the treasury.\",\"params\":{\"_token\":\"The address of the approved token.\"},\"returns\":{\"_0\":\"The balance of the approved token in the treasury.\"}},\"getApprovedTokensCount()\":{\"details\":\"Returns the count of approved tokens.\",\"returns\":{\"_0\":\"The number of approved tokens.\"}},\"getApprovedTokensList()\":{\"details\":\"Returns the list of approved tokens.\",\"returns\":{\"_0\":\"An array of approved token addresses.\"}},\"getEtherBalance()\":{\"details\":\"Returns the Ether balance of the treasury.\",\"returns\":{\"_0\":\"The Ether balance of the treasury.\"}},\"getStakingContract()\":{\"details\":\"Returns the address of the staking contract.\",\"returns\":{\"_0\":\"The address of the staking contract.\"}},\"getStakingContractAllowance(address)\":{\"details\":\"Returns the allowance of the token for the staking contract.\",\"params\":{\"_token\":\"The address of the token.\"},\"returns\":{\"_0\":\"The allowance of the token for the staking contract.\"}},\"getStakingContractBalance(address)\":{\"details\":\"Returns the balance of the token in the staking contract.\",\"params\":{\"_token\":\"The address of the token.\"},\"returns\":{\"_0\":\"The balance of the token in the staking contract.\"}},\"getStakingContractEtherBalance()\":{\"details\":\"Returns the Ether balance of the staking contract.\",\"returns\":{\"_0\":\"The Ether balance of the staking contract.\"}},\"setPermission(uint8,address,bool)\":{\"details\":\"Sets permissions for the specified address.\",\"params\":{\"_address\":\"The address to set the permission for.\",\"_permission\":\"The permission value to set.\",\"_status\":\"The status to set the permission for.\"}},\"setStakingContract(address)\":{\"details\":\"Sets the staking contract address.\",\"params\":{\"_stakingContract\":\"The address of the staking contract.\"}},\"withdraw(uint256,address)\":{\"details\":\"Withdraws a specified amount of the specified token.\",\"params\":{\"_amount\":\"The amount of tokens to withdraw.\",\"_token\":\"The address of the token contract.\"}},\"withdrawEther(uint256)\":{\"details\":\"Withdraws a specified amount of Ether.\",\"params\":{\"_amount\":\"The amount of Ether to withdraw.\"}}},\"title\":\"Treasury\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(uint256,address)\":{\"notice\":\"Allow approved address to deposit an asset for Kondux.\"},\"depositEther()\":{\"notice\":\"Allow approved address to deposit Ether.\"},\"withdraw(uint256,address)\":{\"notice\":\"Allow approved address to withdraw Kondux from reserves.\"},\"withdrawEther(uint256)\":{\"notice\":\"Allow approved address to withdraw Ether.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury.sol\":\"Treasury\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./interfaces/IKonduxERC20.sol\\\";\\r\\nimport \\\"./types/AccessControlled.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Treasury\\r\\n * @dev This contract handles deposits and withdrawals of tokens and Ether.\\r\\n */\\r\\ncontract Treasury is AccessControlled {\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event Deposit(address indexed token, uint256 amount);\\r\\n    event DepositEther(uint256 amount);\\r\\n    event EtherDeposit(uint256 amount);\\r\\n    event Withdrawal(address indexed token, uint256 amount);\\r\\n    event EtherWithdrawal(address to, uint256 amount);\\r\\n\\r\\n    /* ========== DATA STRUCTURES ========== */\\r\\n\\r\\n    enum STATUS {\\r\\n        RESERVEDEPOSITOR,\\r\\n        RESERVESPENDER,\\r\\n        RESERVETOKEN\\r\\n    }\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    string internal notAccepted = \\\"Treasury: not accepted\\\";\\r\\n    string internal notApproved = \\\"Treasury: not approved\\\";\\r\\n    string internal invalidToken = \\\"Treasury: invalid token\\\";\\r\\n\\r\\n    mapping(STATUS => mapping(address => bool)) public permissions;\\r\\n    mapping(address => bool) public isTokenApprooved;\\r\\n    \\r\\n    address[] public approvedTokensList;\\r\\n    uint256 public approvedTokensCount;\\r\\n\\r\\n    address public stakingContract;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the Treasury contract.\\r\\n     * @param _authority The address of the authority contract.\\r\\n     */\\r\\n    constructor(address _authority) AccessControlled(IAuthority(_authority)) {\\r\\n        approvedTokensCount = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allow approved address to deposit an asset for Kondux.\\r\\n     * @dev Deposits a specified amount of the specified token.\\r\\n     * @param _amount The amount of tokens to deposit.\\r\\n     * @param _token The address of the token contract.\\r\\n     */\\r\\n    function deposit(\\r\\n        uint256 _amount,\\r\\n        address _token\\r\\n    ) external {\\r\\n        if (permissions[STATUS.RESERVETOKEN][_token]) {\\r\\n            require(permissions[STATUS.RESERVEDEPOSITOR][msg.sender], notApproved);\\r\\n        } else {\\r\\n            revert(invalidToken);\\r\\n        }\\r\\n\\r\\n        IKonduxERC20(_token).transferFrom(tx.origin, address(this), _amount);\\r\\n        // get allowance and increase it\\r\\n        uint256 allowance = IKonduxERC20(_token).allowance(stakingContract, _token);\\r\\n        IKonduxERC20(_token).approve(stakingContract, allowance + _amount);\\r\\n\\r\\n        emit Deposit(_token, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allow approved address to deposit Ether.\\r\\n     * @dev Deposits Ether to the contract.\\r\\n     */\\r\\n    function depositEther () external payable {\\r\\n        require(permissions[STATUS.RESERVEDEPOSITOR][msg.sender], notApproved);  \\r\\n                \\r\\n        emit DepositEther(msg.value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allow approved address to withdraw Kondux from reserves.\\r\\n     * @dev Withdraws a specified amount of the specified token.\\r\\n     * @param _amount The amount of tokens to withdraw.\\r\\n     * @param _token The address of the token contract.\\r\\n     */\\r\\n    function withdraw(uint256 _amount, address _token) external {\\r\\n        require(permissions[STATUS.RESERVETOKEN][_token], notAccepted); // Only reserves can be used for redemptions\\r\\n        require(permissions[STATUS.RESERVESPENDER][msg.sender], notApproved);\\r\\n\\r\\n        IKonduxERC20(_token).transfer(msg.sender,         _amount);\\r\\n\\r\\n        emit Withdrawal(_token, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Receives Ether.\\r\\n     */\\r\\n    receive() external payable {\\r\\n        emit EtherDeposit(msg.value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fallback function for receiving Ether.\\r\\n     */\\r\\n    fallback() external payable { \\r\\n        emit EtherDeposit(msg.value); \\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Allow approved address to withdraw Ether.\\r\\n     * @dev Withdraws a specified amount of Ether.\\r\\n     * @param _amount The amount of Ether to withdraw.\\r\\n     */\\r\\n    function withdrawEther(uint _amount) external {\\r\\n        require(permissions[STATUS.RESERVESPENDER][msg.sender], notApproved);\\r\\n        require(payable(msg.sender).send(_amount));\\r\\n\\r\\n        emit EtherWithdrawal(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets permissions for the specified address.\\r\\n     * @param _status The status to set the permission for.\\r\\n     * @param _address The address to set the permission for.\\r\\n     * @param _permission The permission value to set.\\r\\n     */\\r\\n    function setPermission(\\r\\n        STATUS _status,\\r\\n        address _address,\\r\\n        bool _permission\\r\\n    ) public onlyGovernor {\\r\\n        permissions[_status][_address] = _permission;\\r\\n        if (_status == STATUS.RESERVETOKEN) {\\r\\n            isTokenApprooved[_address] = _permission;\\r\\n            if (_permission) {\\r\\n                approvedTokensList.push(_address);\\r\\n                approvedTokensCount++;                \\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the staking contract address.\\r\\n     * @param _stakingContract The address of the staking contract.\\r\\n     */\\r\\n    function setStakingContract(address _stakingContract) public onlyGovernor {\\r\\n        stakingContract = _stakingContract;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets up the ERC20 token approval.\\r\\n     * @param _token The address of the token contract.\\r\\n     * @param _amount The amount to approve.\\r\\n     */\\r\\n    function erc20ApprovalSetup(address _token, uint256 _amount) public onlyGovernor {\\r\\n        IKonduxERC20(_token).approve(stakingContract, _amount);\\r\\n    }\\r\\n\\r\\n    // Getters\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the list of approved tokens.\\r\\n     * @return An array of approved token addresses.\\r\\n     */\\r\\n    function getApprovedTokensList() public view returns (address[] memory) {\\r\\n        return approvedTokensList;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the count of approved tokens.\\r\\n     * @return The number of approved tokens.\\r\\n     */\\r\\n    function getApprovedTokensCount() public view returns (uint256) {\\r\\n        return approvedTokensCount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the approved token at the specified index.\\r\\n     * @param _index The index of the approved token.\\r\\n     * @return The address of the approved token at the given index.\\r\\n     */\\r\\n    function getApprovedToken(uint256 _index) public view returns (address) {\\r\\n        return approvedTokensList[_index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the allowance of the approved token for the staking contract.\\r\\n     * @param _token The address of the approved token.\\r\\n     * @return The allowance of the approved token for the staking contract.\\r\\n     */\\r\\n    function getApprovedTokenAllowance(address _token) public view returns (uint256) {\\r\\n        return IKonduxERC20(_token).allowance(stakingContract, _token);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the balance of the approved token in the treasury.\\r\\n     * @param _token The address of the approved token.\\r\\n     * @return The balance of the approved token in the treasury.\\r\\n     */\\r\\n    function getApprovedTokenBalance(address _token) public view returns (uint256) {\\r\\n        return IKonduxERC20(_token).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Ether balance of the treasury.\\r\\n     * @return The Ether balance of the treasury.\\r\\n     */\\r\\n    function getEtherBalance() public view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the staking contract.\\r\\n     * @return The address of the staking contract.\\r\\n     */\\r\\n    function getStakingContract() public view returns (address) {\\r\\n        return stakingContract;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the allowance of the token for the staking contract.\\r\\n     * @param _token The address of the token.\\r\\n     * @return The allowance of the token for the staking contract.\\r\\n     */\\r\\n    function getStakingContractAllowance(address _token) public view returns (uint256) {\\r\\n        return IKonduxERC20(_token).allowance(address(this), stakingContract);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the balance of the token in the staking contract.\\r\\n     * @param _token The address of the token.\\r\\n     * @return The balance of the token in the staking contract.\\r\\n     */\\r\\n    function getStakingContractBalance(address _token) public view returns (uint256) {\\r\\n        return IKonduxERC20(_token).balanceOf(stakingContract);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Ether balance of the staking contract.\\r\\n     * @return The Ether balance of the staking contract.\\r\\n     */\\r\\n    function getStakingContractEtherBalance() public view returns (uint256) {\\r\\n        return stakingContract.balance;\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\",\"keccak256\":\"0x25d4095851d083f2c0efd9f54f8e0925baf55b448b6f8e36d3dc0af588f44c58\",\"license\":\"MIT\"},\"contracts/interfaces/IAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\ninterface IAuthority {\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event RolePushed(address indexed account, bytes32 _role);\\r\\n\\r\\n    event GovernorPulled(address indexed from, address indexed to);\\r\\n    event GuardianPulled(address indexed from, address indexed to);\\r\\n    event PolicyPulled(address indexed from, address indexed to);\\r\\n    event VaultPulled(address indexed from, address indexed to);\\r\\n\\r\\n    /* ========== VIEW ========== */\\r\\n\\r\\n    function governor() external view returns (address);\\r\\n\\r\\n    function guardian() external view returns (address);\\r\\n\\r\\n    function policy() external view returns (address);\\r\\n\\r\\n    function vault() external view returns (address);\\r\\n\\r\\n    function roles(address _addr) external view returns (bytes32);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x887a7eb2eeab95bba651b3d65b3d6a4695301acb16f27722524021afa1cf97d5\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IKonduxERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\ninterface IKonduxERC20 is IERC20 {\\r\\n    function excludedFromFees(address) external view returns (bool);\\r\\n    function tradingOpen() external view returns (bool);\\r\\n    function taxSwapMin() external view returns (uint256);\\r\\n    function taxSwapMax() external view returns (uint256);\\r\\n    function _isLiqPool(address) external view returns (bool);\\r\\n    function taxRateBuy() external view returns (uint8);\\r\\n    function taxRateSell() external view returns (uint8);\\r\\n    function antiBotEnabled() external view returns (bool);\\r\\n    function excludedFromAntiBot(address) external view returns (bool);\\r\\n    function _lastSwapBlock(address) external view returns (uint256);\\r\\n    function taxWallet() external view returns (address);\\r\\n\\r\\n    event TokensAirdropped(uint256 totalWallets, uint256 totalTokens);\\r\\n    event TokensBurned(address indexed burnedByWallet, uint256 tokenAmount);\\r\\n    event TaxWalletChanged(address newTaxWallet);\\r\\n    event TaxRateChanged(uint8 newBuyTax, uint8 newSellTax);\\r\\n\\r\\n    function initLP() external;\\r\\n    function enableTrading() external;\\r\\n    function burnTokens(uint256 amount) external;\\r\\n    function enableAntiBot(bool isEnabled) external;\\r\\n    function excludeFromAntiBot(address wallet, bool isExcluded) external;\\r\\n    function excludeFromFees(address wallet, bool isExcluded) external;\\r\\n    function adjustTaxRate(uint8 newBuyTax, uint8 newSellTax) external;\\r\\n    function setTaxWallet(address newTaxWallet) external;\\r\\n    function taxSwapSettings(uint32 minValue, uint32 minDivider, uint32 maxValue, uint32 maxDivider) external;\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\tfunction decimals() external view returns (uint8);\\r\\n\\tfunction symbol() external view returns (string memory);\\r\\n\\tfunction name() external view returns (string memory);\\r\\n\\tfunction getOwner() external view returns (address);\\r\\n\\tfunction balanceOf(address account) external view returns (uint256);\\r\\n\\tfunction transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\tfunction allowance(address _owner, address spender) external view returns (uint256);\\r\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\r\\n\\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xc1022b9d746b8a4e4c6c2491161d5c133ebaa7b241f1d07d08a01d4b020cf926\",\"license\":\"MIT\"},\"contracts/types/AccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"../interfaces/IAuthority.sol\\\";\\r\\n\\r\\n/// @dev Reasoning for this contract = modifiers literaly copy code\\r\\n/// instead of pointing towards the logic to execute. Over many\\r\\n/// functions this bloats contract size unnecessarily.\\r\\n/// imho modifiers are a meme.\\r\\nabstract contract AccessControlled {\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event AuthorityUpdated(IAuthority authority);\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    IAuthority public authority;\\r\\n\\r\\n    /* ========== Constructor ========== */\\r\\n\\r\\n    constructor(IAuthority _authority) {\\r\\n        require(address(_authority) != address(0), \\\"Authority cannot be zero address\\\");\\r\\n        authority = _authority;\\r\\n        emit AuthorityUpdated(_authority);\\r\\n    }\\r\\n\\r\\n    /* ========== \\\"MODIFIERS\\\" ========== */\\r\\n\\r\\n    modifier onlyGovernor {\\r\\n        _onlyGovernor();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGuardian {\\r\\n        _onlyGuardian();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPolicy {\\r\\n        _onlyPolicy();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyVault {\\r\\n        _onlyVault();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGlobalRole(bytes32 _role){\\r\\n        _onlyRole(_role);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========== GOV ONLY ========== */\\r\\n\\r\\n    function initializeAuthority(IAuthority _newAuthority) internal {\\r\\n        require(authority == IAuthority(address(0)), \\\"AUTHORITY_INITIALIZED\\\");\\r\\n        authority = _newAuthority;\\r\\n        emit AuthorityUpdated(_newAuthority);\\r\\n    }\\r\\n\\r\\n    function setAuthority(IAuthority _newAuthority) external {\\r\\n        _onlyGovernor();\\r\\n        authority = _newAuthority;\\r\\n        emit AuthorityUpdated(_newAuthority);\\r\\n    }\\r\\n\\r\\n    /* ========== INTERNAL CHECKS ========== */\\r\\n\\r\\n    function _onlyGovernor() internal view {\\r\\n        require(msg.sender == authority.governor(), \\\"UNAUTHORIZED\\\");\\r\\n    }\\r\\n\\r\\n    function _onlyGuardian() internal view {\\r\\n        require(msg.sender == authority.guardian(), \\\"UNAUTHORIZED\\\");\\r\\n    }\\r\\n\\r\\n    function _onlyPolicy() internal view {\\r\\n        require(msg.sender == authority.policy(), \\\"UNAUTHORIZED\\\");        \\r\\n    }\\r\\n\\r\\n    function _onlyVault() internal view {\\r\\n        require(msg.sender == authority.vault(), \\\"UNAUTHORIZED\\\");                \\r\\n    }\\r\\n\\r\\n    function _onlyRole(bytes32 _role) internal view {\\r\\n        require(authority.roles(msg.sender) == _role, \\\"UNAUTHORIZED\\\");\\r\\n    }\\r\\n  \\r\\n}\\r\\n\",\"keccak256\":\"0xa746a0ddfe055095ae88418f338d16fc38882052fae50408b342f64ce6b4500a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052601660809081527f54726561737572793a206e6f742061636365707465640000000000000000000060a0526001906200003e908262000256565b5060408051808201909152601681527f54726561737572793a206e6f7420617070726f76656400000000000000000000602082015260029062000082908262000256565b5060408051808201909152601781527f54726561737572793a20696e76616c696420746f6b656e0000000000000000006020820152600390620000c6908262000256565b50348015620000d457600080fd5b50604051620015be380380620015be833981016040819052620000f79162000322565b806001600160a01b038116620001535760405162461bcd60e51b815260206004820181905260248201527f417574686f726974792063616e6e6f74206265207a65726f2061646472657373604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a15050600060075562000354565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620001dc57607f821691505b602082108103620001fd57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200025157600081815260208120601f850160051c810160208610156200022c5750805b601f850160051c820191505b818110156200024d5782815560010162000238565b5050505b505050565b81516001600160401b03811115620002725762000272620001b1565b6200028a81620002838454620001c7565b8462000203565b602080601f831160018114620002c25760008415620002a95750858301515b600019600386901b1c1916600185901b1785556200024d565b600085815260208120601f198616915b82811015620002f357888601518255948401946001909101908401620002d2565b5085821015620003125787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602082840312156200033557600080fd5b81516001600160a01b03811681146200034d57600080fd5b9392505050565b61125a80620003646000396000f3fe60806040526004361061018e5760003560e01c80638e68dce4116100d6578063c1ecbfbc1161007f578063dc1a7cfc11610059578063dc1a7cfc146104cf578063ea46193e146104ef578063ee99205c14610502576101c9565b8063c1ecbfbc1461045d578063c2d7648a1461048d578063d615dcc5146104af576101c9565b80639dd373b9116100b05780639dd373b9146103fe578063bc54c5991461041e578063bf7e214f1461043d576101c9565b80638e68dce4146103b857806398ea5fca146103d65780639a7fd4b5146103de576101c9565b80635727e93b116101385780637a9e5e4b116101125780637a9e5e4b146103585780637bfb25ec146103785780638ca29d2114610398576101c9565b80635727e93b146102e05780636e553f651461031857806371a330f214610338576101c9565b80633bed33ce116101695780633bed33ce1461028b5780634bb55d5c146102ab5780634d9d01b2146102ca576101c9565b8062f714ce146101f957806330d183251461021b578063330dd3451461023b576101c9565b366101c9576040513481527f66eca0f197db6a72a678383624c427a8762b06bb551f6c6e9f8e34a81c7e8da0906020015b60405180910390a1005b6040513481527f66eca0f197db6a72a678383624c427a8762b06bb551f6c6e9f8e34a81c7e8da0906020016101bf565b34801561020557600080fd5b50610219610214366004610f63565b610522565b005b34801561022757600080fd5b50610219610236366004610f93565b610693565b34801561024757600080fd5b50610276610256366004610fd3565b600460209081526000928352604080842090915290825290205460ff1681565b60405190151581526020015b60405180910390f35b34801561029757600080fd5b506102196102a6366004610fff565b610717565b3480156102b757600080fd5b506007545b604051908152602001610282565b3480156102d657600080fd5b506102bc60075481565b3480156102ec57600080fd5b506103006102fb366004610fff565b6107cc565b6040516001600160a01b039091168152602001610282565b34801561032457600080fd5b50610219610333366004610f63565b6107f6565b34801561034457600080fd5b50610219610353366004611026565b610a8b565b34801561036457600080fd5b5061021961037336600461106f565b610ba5565b34801561038457600080fd5b506102bc61039336600461106f565b610c08565b3480156103a457600080fd5b506102bc6103b336600461106f565b610c85565b3480156103c457600080fd5b506008546001600160a01b0316610300565b610219610cc0565b3480156103ea57600080fd5b506102bc6103f936600461106f565b610d48565b34801561040a57600080fd5b5061021961041936600461106f565b610d7c565b34801561042a57600080fd5b506008546001600160a01b0316316102bc565b34801561044957600080fd5b50600054610300906001600160a01b031681565b34801561046957600080fd5b5061027661047836600461106f565b60056020526000908152604090205460ff1681565b34801561049957600080fd5b506104a2610db3565b6040516102829190611093565b3480156104bb57600080fd5b506102bc6104ca36600461106f565b610e15565b3480156104db57600080fd5b506103006104ea366004610fff565b610e44565b3480156104fb57600080fd5b50476102bc565b34801561050e57600080fd5b50600854610300906001600160a01b031681565b6001600160a01b03811660009081527f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a7602052604090205460019060ff166105865760405162461bcd60e51b815260040161057d91906110f6565b60405180910390fd5b503360009081527fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe05602052604090205460029060ff166105d95760405162461bcd60e51b815260040161057d91906110f6565b5060405163a9059cbb60e01b8152336004820152602481018390526001600160a01b0382169063a9059cbb906044016020604051808303816000875af1158015610627573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064b91906111a2565b50806001600160a01b03167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b658360405161068791815260200190565b60405180910390a25050565b61069b610e74565b60085460405163095ea7b360e01b81526001600160a01b039182166004820152602481018390529083169063095ea7b3906044016020604051808303816000875af11580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071291906111a2565b505050565b3360009081527fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe05602052604090205460029060ff166107695760405162461bcd60e51b815260040161057d91906110f6565b50604051339082156108fc029083906000818181858888f1935050505061078f57600080fd5b60408051338152602081018390527fc70a094cb0b20f152b6d171a215827df475885ee85e81c9626d07200d7ddea4291015b60405180910390a150565b600681815481106107dc57600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b03811660009081527f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a7602052604090205460ff161561088e573360009081527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec602052604090205460029060ff166108885760405162461bcd60e51b815260040161057d91906110f6565b506108a9565b600360405162461bcd60e51b815260040161057d91906110f6565b6040516323b872dd60e01b8152326004820152306024820152604481018390526001600160a01b038216906323b872dd906064016020604051808303816000875af11580156108fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092091906111a2565b50600854604051636eb1769f60e11b81526001600160a01b0391821660048201529082166024820181905260009163dd62ed3e90604401602060405180830381865afa158015610974573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099891906111bf565b6008549091506001600160a01b038084169163095ea7b391166109bb86856111ee565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4291906111a2565b50816001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c84604051610a7e91815260200190565b60405180910390a2505050565b610a93610e74565b8060046000856002811115610aaa57610aaa6110e0565b6002811115610abb57610abb6110e0565b8152602080820192909252604090810160009081206001600160a01b03871682529092529020805460ff19169115159190911790556002836002811115610b0457610b046110e0565b03610712576001600160a01b0382166000908152600560205260409020805460ff19168215801591909117909155610712576006805460018101825560009182527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790556007805491610b9b83611201565b9190505550505050565b610bad610e74565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad906020016107c1565b600854604051636eb1769f60e11b81523060048201526001600160a01b03918216602482015260009183169063dd62ed3e906044015b602060405180830381865afa158015610c5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7f91906111bf565b92915050565b600854604051636eb1769f60e11b81526001600160a01b0391821660048201529082166024820181905260009163dd62ed3e90604401610c3e565b3360009081527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec602052604090205460029060ff16610d125760405162461bcd60e51b815260040161057d91906110f6565b506040513481527fd5269418e5a2b45e710169d2c4b95243f38cee4ca6044cb91d8636dc4d01dd8a9060200160405180910390a1565b6008546040516370a0823160e01b81526001600160a01b0391821660048201526000918316906370a0823190602401610c3e565b610d84610e74565b6008805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60606006805480602002602001604051908101604052809291908181526020018280548015610e0b57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ded575b5050505050905090565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401610c3e565b600060068281548110610e5957610e5961121a565b6000918252602090912001546001600160a01b031692915050565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ec5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee99190611230565b6001600160a01b0316336001600160a01b031614610f495760405162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a45440000000000000000000000000000000000000000604482015260640161057d565b565b6001600160a01b0381168114610f6057600080fd5b50565b60008060408385031215610f7657600080fd5b823591506020830135610f8881610f4b565b809150509250929050565b60008060408385031215610fa657600080fd5b8235610fb181610f4b565b946020939093013593505050565b803560038110610fce57600080fd5b919050565b60008060408385031215610fe657600080fd5b610fef83610fbf565b91506020830135610f8881610f4b565b60006020828403121561101157600080fd5b5035919050565b8015158114610f6057600080fd5b60008060006060848603121561103b57600080fd5b61104484610fbf565b9250602084013561105481610f4b565b9150604084013561106481611018565b809150509250925092565b60006020828403121561108157600080fd5b813561108c81610f4b565b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156110d45783516001600160a01b0316835292840192918401916001016110af565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b600060208083526000845481600182811c91508083168061111857607f831692505b858310810361113557634e487b7160e01b85526022600452602485fd5b878601838152602001818015611152576001811461116857611193565b60ff198616825284151560051b82019650611193565b60008b81526020902060005b8681101561118d57815484820152908501908901611174565b83019750505b50949998505050505050505050565b6000602082840312156111b457600080fd5b815161108c81611018565b6000602082840312156111d157600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610c7f57610c7f6111d8565b600060018201611213576112136111d8565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561124257600080fd5b815161108c81610f4b56fea164736f6c6343000811000a",
  "deployedBytecode": "",
  "devdoc": {
    "details": "This contract handles deposits and withdrawals of tokens and Ether.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Initializes the Treasury contract.",
        "params": {
          "_authority": "The address of the authority contract."
        }
      },
      "deposit(uint256,address)": {
        "details": "Deposits a specified amount of the specified token.",
        "params": {
          "_amount": "The amount of tokens to deposit.",
          "_token": "The address of the token contract."
        }
      },
      "depositEther()": {
        "details": "Deposits Ether to the contract."
      },
      "erc20ApprovalSetup(address,uint256)": {
        "details": "Sets up the ERC20 token approval.",
        "params": {
          "_amount": "The amount to approve.",
          "_token": "The address of the token contract."
        }
      },
      "getApprovedToken(uint256)": {
        "details": "Returns the approved token at the specified index.",
        "params": {
          "_index": "The index of the approved token."
        },
        "returns": {
          "_0": "The address of the approved token at the given index."
        }
      },
      "getApprovedTokenAllowance(address)": {
        "details": "Returns the allowance of the approved token for the staking contract.",
        "params": {
          "_token": "The address of the approved token."
        },
        "returns": {
          "_0": "The allowance of the approved token for the staking contract."
        }
      },
      "getApprovedTokenBalance(address)": {
        "details": "Returns the balance of the approved token in the treasury.",
        "params": {
          "_token": "The address of the approved token."
        },
        "returns": {
          "_0": "The balance of the approved token in the treasury."
        }
      },
      "getApprovedTokensCount()": {
        "details": "Returns the count of approved tokens.",
        "returns": {
          "_0": "The number of approved tokens."
        }
      },
      "getApprovedTokensList()": {
        "details": "Returns the list of approved tokens.",
        "returns": {
          "_0": "An array of approved token addresses."
        }
      },
      "getEtherBalance()": {
        "details": "Returns the Ether balance of the treasury.",
        "returns": {
          "_0": "The Ether balance of the treasury."
        }
      },
      "getStakingContract()": {
        "details": "Returns the address of the staking contract.",
        "returns": {
          "_0": "The address of the staking contract."
        }
      },
      "getStakingContractAllowance(address)": {
        "details": "Returns the allowance of the token for the staking contract.",
        "params": {
          "_token": "The address of the token."
        },
        "returns": {
          "_0": "The allowance of the token for the staking contract."
        }
      },
      "getStakingContractBalance(address)": {
        "details": "Returns the balance of the token in the staking contract.",
        "params": {
          "_token": "The address of the token."
        },
        "returns": {
          "_0": "The balance of the token in the staking contract."
        }
      },
      "getStakingContractEtherBalance()": {
        "details": "Returns the Ether balance of the staking contract.",
        "returns": {
          "_0": "The Ether balance of the staking contract."
        }
      },
      "setPermission(uint8,address,bool)": {
        "details": "Sets permissions for the specified address.",
        "params": {
          "_address": "The address to set the permission for.",
          "_permission": "The permission value to set.",
          "_status": "The status to set the permission for."
        }
      },
      "setStakingContract(address)": {
        "details": "Sets the staking contract address.",
        "params": {
          "_stakingContract": "The address of the staking contract."
        }
      },
      "withdraw(uint256,address)": {
        "details": "Withdraws a specified amount of the specified token.",
        "params": {
          "_amount": "The amount of tokens to withdraw.",
          "_token": "The address of the token contract."
        }
      },
      "withdrawEther(uint256)": {
        "details": "Withdraws a specified amount of Ether.",
        "params": {
          "_amount": "The amount of Ether to withdraw."
        }
      }
    },
    "title": "Treasury",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(uint256,address)": {
        "notice": "Allow approved address to deposit an asset for Kondux."
      },
      "depositEther()": {
        "notice": "Allow approved address to deposit Ether."
      },
      "withdraw(uint256,address)": {
        "notice": "Allow approved address to withdraw Kondux from reserves."
      },
      "withdrawEther(uint256)": {
        "notice": "Allow approved address to withdraw Ether."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4404,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "authority",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAuthority)4009"
      },
      {
        "astId": 3471,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "notAccepted",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3474,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "notApproved",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3477,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "invalidToken",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 3484,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "permissions",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_enum(STATUS)3468,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3488,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "isTokenApprooved",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3491,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "approvedTokensList",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3493,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "approvedTokensCount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3495,
        "contract": "contracts/Treasury.sol:Treasury",
        "label": "stakingContract",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAuthority)4009": {
        "encoding": "inplace",
        "label": "contract IAuthority",
        "numberOfBytes": "20"
      },
      "t_enum(STATUS)3468": {
        "encoding": "inplace",
        "label": "enum Treasury.STATUS",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_enum(STATUS)3468,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_enum(STATUS)3468",
        "label": "mapping(enum Treasury.STATUS => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}