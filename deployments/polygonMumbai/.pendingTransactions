{
  "0xfec89cf8a6cd27b8c43b0297b8e095226b5a015c138188e4a138ac97d0821a4a": {
    "name": "Kondux",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "Kondux",
      "sourceName": "contracts/Kondux_NFT.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "_authority",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "name": "ApprovalForAll",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "contract IAuthority",
              "name": "authority",
              "type": "address"
            }
          ],
          "name": "AuthorityUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "string",
              "name": "baseURI",
              "type": "string"
            }
          ],
          "name": "BaseURIChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint96",
              "name": "denominator",
              "type": "uint96"
            }
          ],
          "name": "DenominatorChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "tokenID",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "dna",
              "type": "uint256"
            }
          ],
          "name": "DnaChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Paused",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "Received",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Unpaused",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "MINTER_ROLE",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "approve",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "authority",
          "outputs": [
            {
              "internalType": "contract IAuthority",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            }
          ],
          "name": "automaticMint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "baseURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "burn",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint96",
              "name": "_denominator",
              "type": "uint96"
            }
          ],
          "name": "changeDenominator",
          "outputs": [
            {
              "internalType": "uint96",
              "name": "",
              "type": "uint96"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "denominator",
          "outputs": [
            {
              "internalType": "uint96",
              "name": "",
              "type": "uint96"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenID",
              "type": "uint256"
            }
          ],
          "name": "getDna",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "indexDna",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "pause",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "paused",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_salePrice",
              "type": "uint256"
            }
          ],
          "name": "royaltyInfo",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "dna",
              "type": "uint256"
            }
          ],
          "name": "safeMint",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "safeTransferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "name": "safeTransferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "name": "setApprovalForAll",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract IAuthority",
              "name": "_newAuthority",
              "type": "address"
            }
          ],
          "name": "setAuthority",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_newURI",
              "type": "string"
            }
          ],
          "name": "setBaseURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "feeNumerator",
              "type": "uint96"
            }
          ],
          "name": "setDefaultRoyalty",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_dna",
              "type": "uint256"
            }
          ],
          "name": "setDna",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "feeNumerator",
              "type": "uint96"
            }
          ],
          "name": "setTokenRoyalty",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "name": "tokenByIndex",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "name": "tokenOfOwnerByIndex",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "tokenURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "transferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "unpause",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "0x60806040523480156200001157600080fd5b5060405162002de438038062002de48339810160408190526200003491620001e4565b808383600262000045838262000300565b50600362000054828262000300565b5050600c805460ff19169055506001600160a01b038116620000bc5760405162461bcd60e51b815260206004820181905260248201527f417574686f726974792063616e6e6f74206265207a65726f2061646472657373604482015260640160405180910390fd5b600c8054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a150505050620003cc565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200014757600080fd5b81516001600160401b03808211156200016457620001646200011f565b604051601f8301601f19908116603f011681019082821181831017156200018f576200018f6200011f565b81604052838152602092508683858801011115620001ac57600080fd5b600091505b83821015620001d05785820183015181830184015290820190620001b1565b600093810190920192909252949350505050565b600080600060608486031215620001fa57600080fd5b83516001600160401b03808211156200021257600080fd5b620002208783880162000135565b945060208601519150808211156200023757600080fd5b50620002468682870162000135565b604086015190935090506001600160a01b03811681146200026657600080fd5b809150509250925092565b600181811c908216806200028657607f821691505b602082108103620002a757634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002fb57600081815260208120601f850160051c81016020861015620002d65750805b601f850160051c820191505b81811015620002f757828155600101620002e2565b5050505b505050565b81516001600160401b038111156200031c576200031c6200011f565b62000334816200032d845462000271565b84620002ad565b602080601f8311600181146200036c5760008415620003535750858301515b600019600386901b1c1916600185901b178555620002f7565b600085815260208120601f198616915b828110156200039d578886015182559484019460019091019084016200037c565b5085821015620003bc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612a0880620003dc6000396000f3fe608060405234801561001057600080fd5b50600436106102415760003560e01c806355f804b31161014557806396ce0795116100bd578063b88d4fde1161008c578063c87b56dd11610071578063c87b56dd146104eb578063d5391393146104fe578063e985e9c51461052557600080fd5b8063b88d4fde146104c0578063bf7e214f146104d357600080fd5b806396ce07951461045c578063a144819414610487578063a22cb4651461049a578063ab51e23a146104ad57600080fd5b80636c0360eb116101145780637a9e5e4b116100f95780637a9e5e4b146104395780638456cb591461044c57806395d89b411461045457600080fd5b80636c0360eb1461041e57806370a082311461042657600080fd5b806355f804b3146103da5780635944c753146103ed5780635c975abb146104005780636352211e1461040b57600080fd5b806323b872dd116101d85780633f4ba83a116101a757806342842e0e1161018c57806342842e0e146103a157806342966c68146103b45780634f6ccce7146103c757600080fd5b80633f4ba83a14610386578063422627c31461038e57600080fd5b806323b872dd1461031b5780632a55205a1461032e5780632f745c591461036057806337f8649e1461037357600080fd5b8063081812fc11610214578063081812fc146102ab578063095ea7b3146102d657806318160ddd146102e95780631c9ad5b1146102fb57600080fd5b806301ffc9a71461024657806304634d8d1461026e578063067b61f21461028357806306fdde0314610296575b600080fd5b610259610254366004612273565b610561565b60405190151581526020015b60405180910390f35b61028161027c3660046122c3565b610572565b005b6102816102913660046122f8565b610588565b61029e61059a565b604051610265919061236a565b6102be6102b936600461237d565b61062c565b6040516001600160a01b039091168152602001610265565b6102816102e4366004612396565b610653565b600a545b604051908152602001610265565b6102ed61030936600461237d565b600f6020526000908152604090205481565b6102816103293660046123c2565b61076d565b61034161033c3660046122f8565b6107e6565b604080516001600160a01b039093168352602083019190915201610265565b6102ed61036e366004612396565b610892565b6102ed610381366004612403565b61093a565b6102816109ea565b6102ed61039c36600461237d565b6109fc565b6102816103af3660046123c2565b610a8b565b6102816103c236600461237d565b610aa6565b6102ed6103d536600461237d565b610b1e565b61029e6103e83660046124ac565b610bc2565b6102816103fb3660046124f5565b610ca4565b600c5460ff16610259565b6102be61041936600461237d565b610cb7565b61029e610d1c565b6102ed610434366004612403565b610daa565b610281610447366004612403565b610e44565b610281610ebf565b61029e610ecf565b600e5461046f906001600160601b031681565b6040516001600160601b039091168152602001610265565b610281610495366004612396565b610ede565b6102816104a8366004612533565b610f15565b61046f6104bb366004612571565b610f20565b6102816104ce36600461258c565b610f91565b600c546102be9061010090046001600160a01b031681565b61029e6104f936600461237d565b611010565b6102ed7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61025961053336600461260c565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b600061056c826110eb565b92915050565b61057a6110f6565b61058482826111bc565b5050565b6105906110f6565b61058482826112b9565b6060600280546105a99061263a565b80601f01602080910402602001604051908101604052809291908181526020018280546105d59061263a565b80156106225780601f106105f757610100808354040283529160200191610622565b820191906000526020600020905b81548152906001019060200180831161060557829003601f168201915b5050505050905090565b600061063782611308565b506000908152600660205260409020546001600160a01b031690565b600061065e82610cb7565b9050806001600160a01b0316836001600160a01b0316036106d05760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806106ec57506106ec8133610533565b61075e5760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016106c7565b610768838361136c565b505050565b610778335b826113da565b6107db5760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b60648201526084016106c7565b610768838383611459565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b031692820192909252829161085b5750604080518082019091526000546001600160a01b0381168252600160a01b90046001600160601b031660208201525b60208101516000906127109061087a906001600160601b031687612684565b61088491906126b9565b915196919550909350505050565b600061089d83610daa565b82106109115760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e647300000000000000000000000000000000000000000060648201526084016106c7565b506001600160a01b03919091166000908152600860209081526040808320938352929052205490565b60007f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661096681611618565b600061097160105490565b9050610981601080546001019055565b604080514460208083019190915242828401524360608084019190915241901b6bffffffffffffffffffffffff1916608083015282518083036074018152609490920190925280519101206109d682826112b9565b6109e085836116c5565b5091505b50919050565b6109f26110f6565b6109fa6116df565b565b6000818152600460205260408120546001600160a01b0316610a785760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016106c7565b506000908152600f602052604090205490565b61076883838360405180602001604052806000815250610f91565b610aaf33610772565b610b125760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b60648201526084016106c7565b610b1b81611731565b50565b6000610b29600a5490565b8210610b9d5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e6473000000000000000000000000000000000000000060648201526084016106c7565b600a8281548110610bb057610bb06126cd565b90600052602060002001549050919050565b6060610bcc6110f6565b600d610bd88382612731565b507f5411e8ebf1636d9e83d5fc4900bf80cbac82e8790da2a4c94db4895e889eedf6600d604051610c0991906127f1565b60405180910390a1600d8054610c1e9061263a565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4a9061263a565b8015610c975780601f10610c6c57610100808354040283529160200191610c97565b820191906000526020600020905b815481529060010190602001808311610c7a57829003601f168201915b505050505090505b919050565b610cac6110f6565b61076883838361174b565b6000818152600460205260408120546001600160a01b03168061056c5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016106c7565b600d8054610d299061263a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d559061263a565b8015610da25780601f10610d7757610100808354040283529160200191610da2565b820191906000526020600020905b815481529060010190602001808311610d8557829003601f168201915b505050505081565b60006001600160a01b038216610e285760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e6572000000000000000000000000000000000000000000000060648201526084016106c7565b506001600160a01b031660009081526005602052604090205490565b610e4c6110f6565b600c80547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b038416908102919091179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a150565b610ec76110f6565b6109fa611859565b6060600380546105a99061263a565b610ee66110f6565b6000610ef160105490565b9050610f01601080546001019055565b610f0b81836112b9565b61076883826116c5565b610584338383611896565b6000610f2a6110f6565b600e80546bffffffffffffffffffffffff19166001600160601b0384169081179091556040519081527f601b85aa9305dbcfbfc81aa2d4b5126c1ce24afdd1bad47d6880e5b6df081f579060200160405180910390a15050600e546001600160601b031690565b610f9b33836113da565b610ffe5760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b60648201526084016106c7565b61100a84848484611964565b50505050565b6000818152600460205260409020546060906001600160a01b031661108f5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016106c7565b6000600d805461109e9061263a565b9050116110ba576040518060200160405280600081525061056c565b600d6110c5836119e2565b6040516020016110d692919061287c565b60405160208183030381529060405292915050565b600061056c82611afb565b600c60019054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611149573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116d9190612903565b6001600160a01b0316336001600160a01b0316146109fa5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064016106c7565b6127106001600160601b038216111561122a5760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b60648201526084016106c7565b6001600160a01b0382166112805760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c69642072656365697665720000000000000060448201526064016106c7565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600055565b6000828152600f602090815260409182902083905581518481529081018390527f4e26044f7fb3724a9375deb74974fdc2f4e07f265efce87f93cfced354258487910160405180910390a15050565b6000818152600460205260409020546001600160a01b0316610b1b5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016106c7565b600081815260066020526040902080546001600160a01b0319166001600160a01b03841690811790915581906113a182610cb7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806113e683610cb7565b9050806001600160a01b0316846001600160a01b0316148061142d57506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b806114515750836001600160a01b03166114468461062c565b6001600160a01b0316145b949350505050565b826001600160a01b031661146c82610cb7565b6001600160a01b0316146114e85760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016106c7565b6001600160a01b03821661154a5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106c7565b611555838383611b20565b61156060008261136c565b6001600160a01b0383166000908152600560205260408120805460019290611589908490612920565b90915550506001600160a01b03821660009081526005602052604081208054600192906115b7908490612933565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600c54604051634c9ba32160e11b8152336004820152829161010090046001600160a01b031690639937464290602401602060405180830381865afa158015611665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116899190612946565b14610b1b5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064016106c7565b610584828260405180602001604052806000815250611b33565b6116e7611bb1565b600c805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b61173a81611c03565b600090815260016020526040812055565b6127106001600160601b03821611156117b95760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b60648201526084016106c7565b6001600160a01b03821661180f5760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d6574657273000000000060448201526064016106c7565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600190529190942093519051909116600160a01b029116179055565b611861611c0c565b600c805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117143390565b816001600160a01b0316836001600160a01b0316036118f75760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016106c7565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61196f848484611459565b61197b84848484611c5f565b61100a5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016106c7565b606081600003611a095750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611a335780611a1d8161295f565b9150611a2c9050600a836126b9565b9150611a0d565b60008167ffffffffffffffff811115611a4e57611a4e612420565b6040519080825280601f01601f191660200182016040528015611a78576020820181803683370190505b5090505b841561145157611a8d600183612920565b9150611a9a600a86612978565b611aa5906030612933565b60f81b818381518110611aba57611aba6126cd565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611af4600a866126b9565b9450611a7c565b60006001600160e01b0319821663780e9d6360e01b148061056c575061056c82611dab565b611b28611c0c565b610768838383611deb565b611b3d8383611ea3565b611b4a6000848484611c5f565b6107685760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016106c7565b600c5460ff166109fa5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016106c7565b61173a81611ff1565b600c5460ff16156109fa5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016106c7565b60006001600160a01b0384163b15611da057604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611ca390339089908890889060040161298c565b6020604051808303816000875af1925050508015611cde575060408051601f3d908101601f19168201909252611cdb918101906129c8565b60015b611d86573d808015611d0c576040519150601f19603f3d011682016040523d82523d6000602084013e611d11565b606091505b508051600003611d7e5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016106c7565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611451565b506001949350505050565b60006001600160e01b031982166380ac58cd60e01b1480611ddc57506001600160e01b03198216635b5e139f60e01b145b8061056c575061056c82612098565b6001600160a01b038316611e4657611e4181600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b611e69565b816001600160a01b0316836001600160a01b031614611e6957611e6983826120cd565b6001600160a01b038216611e80576107688161216a565b826001600160a01b0316826001600160a01b031614610768576107688282612219565b6001600160a01b038216611ef95760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106c7565b6000818152600460205260409020546001600160a01b031615611f5e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106c7565b611f6a60008383611b20565b6001600160a01b0382166000908152600560205260408120805460019290611f93908490612933565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000611ffc82610cb7565b905061200a81600084611b20565b61201560008361136c565b6001600160a01b038116600090815260056020526040812080546001929061203e908490612920565b909155505060008281526004602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60006001600160e01b0319821663152a902d60e11b148061056c57506301ffc9a760e01b6001600160e01b031983161461056c565b600060016120da84610daa565b6120e49190612920565b600083815260096020526040902054909150808214612137576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a5460009061217c90600190612920565b6000838152600b6020526040812054600a80549394509092849081106121a4576121a46126cd565b9060005260206000200154905080600a83815481106121c5576121c56126cd565b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a8054806121fd576121fd6129e5565b6001900381819060005260206000200160009055905550505050565b600061222483610daa565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b6001600160e01b031981168114610b1b57600080fd5b60006020828403121561228557600080fd5b81356122908161225d565b9392505050565b6001600160a01b0381168114610b1b57600080fd5b80356001600160601b0381168114610c9f57600080fd5b600080604083850312156122d657600080fd5b82356122e181612297565b91506122ef602084016122ac565b90509250929050565b6000806040838503121561230b57600080fd5b50508035926020909101359150565b60005b8381101561233557818101518382015260200161231d565b50506000910152565b6000815180845261235681602086016020860161231a565b601f01601f19169290920160200192915050565b602081526000612290602083018461233e565b60006020828403121561238f57600080fd5b5035919050565b600080604083850312156123a957600080fd5b82356123b481612297565b946020939093013593505050565b6000806000606084860312156123d757600080fd5b83356123e281612297565b925060208401356123f281612297565b929592945050506040919091013590565b60006020828403121561241557600080fd5b813561229081612297565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561245157612451612420565b604051601f8501601f19908116603f0116810190828211818310171561247957612479612420565b8160405280935085815286868601111561249257600080fd5b858560208301376000602087830101525050509392505050565b6000602082840312156124be57600080fd5b813567ffffffffffffffff8111156124d557600080fd5b8201601f810184136124e657600080fd5b61145184823560208401612436565b60008060006060848603121561250a57600080fd5b83359250602084013561251c81612297565b915061252a604085016122ac565b90509250925092565b6000806040838503121561254657600080fd5b823561255181612297565b91506020830135801515811461256657600080fd5b809150509250929050565b60006020828403121561258357600080fd5b612290826122ac565b600080600080608085870312156125a257600080fd5b84356125ad81612297565b935060208501356125bd81612297565b925060408501359150606085013567ffffffffffffffff8111156125e057600080fd5b8501601f810187136125f157600080fd5b61260087823560208401612436565b91505092959194509250565b6000806040838503121561261f57600080fd5b823561262a81612297565b9150602083013561256681612297565b600181811c9082168061264e57607f821691505b6020821081036109e457634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561269e5761269e61266e565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826126c8576126c86126a3565b500490565b634e487b7160e01b600052603260045260246000fd5b601f82111561076857600081815260208120601f850160051c8101602086101561270a5750805b601f850160051c820191505b8181101561272957828155600101612716565b505050505050565b815167ffffffffffffffff81111561274b5761274b612420565b61275f81612759845461263a565b846126e3565b602080601f831160018114612794576000841561277c5750858301515b600019600386901b1c1916600185901b178555612729565b600085815260208120601f198616915b828110156127c3578886015182559484019460019091019084016127a4565b50858210156127e15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020808352600084546128058161263a565b8084870152604060018084166000811461282657600181146128405761286e565b60ff1985168984015283151560051b89018301955061286e565b896000528660002060005b858110156128665781548b820186015290830190880161284b565b8a0184019650505b509398975050505050505050565b600080845461288a8161263a565b600182811680156128a257600181146128b7576128e6565b60ff19841687528215158302870194506128e6565b8860005260208060002060005b858110156128dd5781548a8201529084019082016128c4565b50505082870194505b5050505083516128fa81836020880161231a565b01949350505050565b60006020828403121561291557600080fd5b815161229081612297565b8181038181111561056c5761056c61266e565b8082018082111561056c5761056c61266e565b60006020828403121561295857600080fd5b5051919050565b6000600182016129715761297161266e565b5060010190565b600082612987576129876126a3565b500690565b60006001600160a01b038087168352808616602084015250836040830152608060608301526129be608083018461233e565b9695505050505050565b6000602082840312156129da57600080fd5b81516122908161225d565b634e487b7160e01b600052603160045260246000fdfea164736f6c6343000810000a",
      "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102415760003560e01c806355f804b31161014557806396ce0795116100bd578063b88d4fde1161008c578063c87b56dd11610071578063c87b56dd146104eb578063d5391393146104fe578063e985e9c51461052557600080fd5b8063b88d4fde146104c0578063bf7e214f146104d357600080fd5b806396ce07951461045c578063a144819414610487578063a22cb4651461049a578063ab51e23a146104ad57600080fd5b80636c0360eb116101145780637a9e5e4b116100f95780637a9e5e4b146104395780638456cb591461044c57806395d89b411461045457600080fd5b80636c0360eb1461041e57806370a082311461042657600080fd5b806355f804b3146103da5780635944c753146103ed5780635c975abb146104005780636352211e1461040b57600080fd5b806323b872dd116101d85780633f4ba83a116101a757806342842e0e1161018c57806342842e0e146103a157806342966c68146103b45780634f6ccce7146103c757600080fd5b80633f4ba83a14610386578063422627c31461038e57600080fd5b806323b872dd1461031b5780632a55205a1461032e5780632f745c591461036057806337f8649e1461037357600080fd5b8063081812fc11610214578063081812fc146102ab578063095ea7b3146102d657806318160ddd146102e95780631c9ad5b1146102fb57600080fd5b806301ffc9a71461024657806304634d8d1461026e578063067b61f21461028357806306fdde0314610296575b600080fd5b610259610254366004612273565b610561565b60405190151581526020015b60405180910390f35b61028161027c3660046122c3565b610572565b005b6102816102913660046122f8565b610588565b61029e61059a565b604051610265919061236a565b6102be6102b936600461237d565b61062c565b6040516001600160a01b039091168152602001610265565b6102816102e4366004612396565b610653565b600a545b604051908152602001610265565b6102ed61030936600461237d565b600f6020526000908152604090205481565b6102816103293660046123c2565b61076d565b61034161033c3660046122f8565b6107e6565b604080516001600160a01b039093168352602083019190915201610265565b6102ed61036e366004612396565b610892565b6102ed610381366004612403565b61093a565b6102816109ea565b6102ed61039c36600461237d565b6109fc565b6102816103af3660046123c2565b610a8b565b6102816103c236600461237d565b610aa6565b6102ed6103d536600461237d565b610b1e565b61029e6103e83660046124ac565b610bc2565b6102816103fb3660046124f5565b610ca4565b600c5460ff16610259565b6102be61041936600461237d565b610cb7565b61029e610d1c565b6102ed610434366004612403565b610daa565b610281610447366004612403565b610e44565b610281610ebf565b61029e610ecf565b600e5461046f906001600160601b031681565b6040516001600160601b039091168152602001610265565b610281610495366004612396565b610ede565b6102816104a8366004612533565b610f15565b61046f6104bb366004612571565b610f20565b6102816104ce36600461258c565b610f91565b600c546102be9061010090046001600160a01b031681565b61029e6104f936600461237d565b611010565b6102ed7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61025961053336600461260c565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b600061056c826110eb565b92915050565b61057a6110f6565b61058482826111bc565b5050565b6105906110f6565b61058482826112b9565b6060600280546105a99061263a565b80601f01602080910402602001604051908101604052809291908181526020018280546105d59061263a565b80156106225780601f106105f757610100808354040283529160200191610622565b820191906000526020600020905b81548152906001019060200180831161060557829003601f168201915b5050505050905090565b600061063782611308565b506000908152600660205260409020546001600160a01b031690565b600061065e82610cb7565b9050806001600160a01b0316836001600160a01b0316036106d05760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806106ec57506106ec8133610533565b61075e5760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016106c7565b610768838361136c565b505050565b610778335b826113da565b6107db5760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b60648201526084016106c7565b610768838383611459565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b031692820192909252829161085b5750604080518082019091526000546001600160a01b0381168252600160a01b90046001600160601b031660208201525b60208101516000906127109061087a906001600160601b031687612684565b61088491906126b9565b915196919550909350505050565b600061089d83610daa565b82106109115760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e647300000000000000000000000000000000000000000060648201526084016106c7565b506001600160a01b03919091166000908152600860209081526040808320938352929052205490565b60007f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661096681611618565b600061097160105490565b9050610981601080546001019055565b604080514460208083019190915242828401524360608084019190915241901b6bffffffffffffffffffffffff1916608083015282518083036074018152609490920190925280519101206109d682826112b9565b6109e085836116c5565b5091505b50919050565b6109f26110f6565b6109fa6116df565b565b6000818152600460205260408120546001600160a01b0316610a785760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016106c7565b506000908152600f602052604090205490565b61076883838360405180602001604052806000815250610f91565b610aaf33610772565b610b125760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b60648201526084016106c7565b610b1b81611731565b50565b6000610b29600a5490565b8210610b9d5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e6473000000000000000000000000000000000000000060648201526084016106c7565b600a8281548110610bb057610bb06126cd565b90600052602060002001549050919050565b6060610bcc6110f6565b600d610bd88382612731565b507f5411e8ebf1636d9e83d5fc4900bf80cbac82e8790da2a4c94db4895e889eedf6600d604051610c0991906127f1565b60405180910390a1600d8054610c1e9061263a565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4a9061263a565b8015610c975780601f10610c6c57610100808354040283529160200191610c97565b820191906000526020600020905b815481529060010190602001808311610c7a57829003601f168201915b505050505090505b919050565b610cac6110f6565b61076883838361174b565b6000818152600460205260408120546001600160a01b03168061056c5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016106c7565b600d8054610d299061263a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d559061263a565b8015610da25780601f10610d7757610100808354040283529160200191610da2565b820191906000526020600020905b815481529060010190602001808311610d8557829003601f168201915b505050505081565b60006001600160a01b038216610e285760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e6572000000000000000000000000000000000000000000000060648201526084016106c7565b506001600160a01b031660009081526005602052604090205490565b610e4c6110f6565b600c80547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b038416908102919091179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a150565b610ec76110f6565b6109fa611859565b6060600380546105a99061263a565b610ee66110f6565b6000610ef160105490565b9050610f01601080546001019055565b610f0b81836112b9565b61076883826116c5565b610584338383611896565b6000610f2a6110f6565b600e80546bffffffffffffffffffffffff19166001600160601b0384169081179091556040519081527f601b85aa9305dbcfbfc81aa2d4b5126c1ce24afdd1bad47d6880e5b6df081f579060200160405180910390a15050600e546001600160601b031690565b610f9b33836113da565b610ffe5760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b60648201526084016106c7565b61100a84848484611964565b50505050565b6000818152600460205260409020546060906001600160a01b031661108f5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016106c7565b6000600d805461109e9061263a565b9050116110ba576040518060200160405280600081525061056c565b600d6110c5836119e2565b6040516020016110d692919061287c565b60405160208183030381529060405292915050565b600061056c82611afb565b600c60019054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611149573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116d9190612903565b6001600160a01b0316336001600160a01b0316146109fa5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064016106c7565b6127106001600160601b038216111561122a5760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b60648201526084016106c7565b6001600160a01b0382166112805760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c69642072656365697665720000000000000060448201526064016106c7565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600055565b6000828152600f602090815260409182902083905581518481529081018390527f4e26044f7fb3724a9375deb74974fdc2f4e07f265efce87f93cfced354258487910160405180910390a15050565b6000818152600460205260409020546001600160a01b0316610b1b5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016106c7565b600081815260066020526040902080546001600160a01b0319166001600160a01b03841690811790915581906113a182610cb7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806113e683610cb7565b9050806001600160a01b0316846001600160a01b0316148061142d57506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b806114515750836001600160a01b03166114468461062c565b6001600160a01b0316145b949350505050565b826001600160a01b031661146c82610cb7565b6001600160a01b0316146114e85760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016106c7565b6001600160a01b03821661154a5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106c7565b611555838383611b20565b61156060008261136c565b6001600160a01b0383166000908152600560205260408120805460019290611589908490612920565b90915550506001600160a01b03821660009081526005602052604081208054600192906115b7908490612933565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600c54604051634c9ba32160e11b8152336004820152829161010090046001600160a01b031690639937464290602401602060405180830381865afa158015611665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116899190612946565b14610b1b5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064016106c7565b610584828260405180602001604052806000815250611b33565b6116e7611bb1565b600c805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b61173a81611c03565b600090815260016020526040812055565b6127106001600160601b03821611156117b95760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b60648201526084016106c7565b6001600160a01b03821661180f5760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d6574657273000000000060448201526064016106c7565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600190529190942093519051909116600160a01b029116179055565b611861611c0c565b600c805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117143390565b816001600160a01b0316836001600160a01b0316036118f75760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016106c7565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61196f848484611459565b61197b84848484611c5f565b61100a5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016106c7565b606081600003611a095750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611a335780611a1d8161295f565b9150611a2c9050600a836126b9565b9150611a0d565b60008167ffffffffffffffff811115611a4e57611a4e612420565b6040519080825280601f01601f191660200182016040528015611a78576020820181803683370190505b5090505b841561145157611a8d600183612920565b9150611a9a600a86612978565b611aa5906030612933565b60f81b818381518110611aba57611aba6126cd565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611af4600a866126b9565b9450611a7c565b60006001600160e01b0319821663780e9d6360e01b148061056c575061056c82611dab565b611b28611c0c565b610768838383611deb565b611b3d8383611ea3565b611b4a6000848484611c5f565b6107685760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016106c7565b600c5460ff166109fa5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016106c7565b61173a81611ff1565b600c5460ff16156109fa5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016106c7565b60006001600160a01b0384163b15611da057604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611ca390339089908890889060040161298c565b6020604051808303816000875af1925050508015611cde575060408051601f3d908101601f19168201909252611cdb918101906129c8565b60015b611d86573d808015611d0c576040519150601f19603f3d011682016040523d82523d6000602084013e611d11565b606091505b508051600003611d7e5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016106c7565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611451565b506001949350505050565b60006001600160e01b031982166380ac58cd60e01b1480611ddc57506001600160e01b03198216635b5e139f60e01b145b8061056c575061056c82612098565b6001600160a01b038316611e4657611e4181600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b611e69565b816001600160a01b0316836001600160a01b031614611e6957611e6983826120cd565b6001600160a01b038216611e80576107688161216a565b826001600160a01b0316826001600160a01b031614610768576107688282612219565b6001600160a01b038216611ef95760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106c7565b6000818152600460205260409020546001600160a01b031615611f5e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106c7565b611f6a60008383611b20565b6001600160a01b0382166000908152600560205260408120805460019290611f93908490612933565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000611ffc82610cb7565b905061200a81600084611b20565b61201560008361136c565b6001600160a01b038116600090815260056020526040812080546001929061203e908490612920565b909155505060008281526004602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60006001600160e01b0319821663152a902d60e11b148061056c57506301ffc9a760e01b6001600160e01b031983161461056c565b600060016120da84610daa565b6120e49190612920565b600083815260096020526040902054909150808214612137576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a5460009061217c90600190612920565b6000838152600b6020526040812054600a80549394509092849081106121a4576121a46126cd565b9060005260206000200154905080600a83815481106121c5576121c56126cd565b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a8054806121fd576121fd6129e5565b6001900381819060005260206000200160009055905550505050565b600061222483610daa565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b6001600160e01b031981168114610b1b57600080fd5b60006020828403121561228557600080fd5b81356122908161225d565b9392505050565b6001600160a01b0381168114610b1b57600080fd5b80356001600160601b0381168114610c9f57600080fd5b600080604083850312156122d657600080fd5b82356122e181612297565b91506122ef602084016122ac565b90509250929050565b6000806040838503121561230b57600080fd5b50508035926020909101359150565b60005b8381101561233557818101518382015260200161231d565b50506000910152565b6000815180845261235681602086016020860161231a565b601f01601f19169290920160200192915050565b602081526000612290602083018461233e565b60006020828403121561238f57600080fd5b5035919050565b600080604083850312156123a957600080fd5b82356123b481612297565b946020939093013593505050565b6000806000606084860312156123d757600080fd5b83356123e281612297565b925060208401356123f281612297565b929592945050506040919091013590565b60006020828403121561241557600080fd5b813561229081612297565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561245157612451612420565b604051601f8501601f19908116603f0116810190828211818310171561247957612479612420565b8160405280935085815286868601111561249257600080fd5b858560208301376000602087830101525050509392505050565b6000602082840312156124be57600080fd5b813567ffffffffffffffff8111156124d557600080fd5b8201601f810184136124e657600080fd5b61145184823560208401612436565b60008060006060848603121561250a57600080fd5b83359250602084013561251c81612297565b915061252a604085016122ac565b90509250925092565b6000806040838503121561254657600080fd5b823561255181612297565b91506020830135801515811461256657600080fd5b809150509250929050565b60006020828403121561258357600080fd5b612290826122ac565b600080600080608085870312156125a257600080fd5b84356125ad81612297565b935060208501356125bd81612297565b925060408501359150606085013567ffffffffffffffff8111156125e057600080fd5b8501601f810187136125f157600080fd5b61260087823560208401612436565b91505092959194509250565b6000806040838503121561261f57600080fd5b823561262a81612297565b9150602083013561256681612297565b600181811c9082168061264e57607f821691505b6020821081036109e457634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561269e5761269e61266e565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826126c8576126c86126a3565b500490565b634e487b7160e01b600052603260045260246000fd5b601f82111561076857600081815260208120601f850160051c8101602086101561270a5750805b601f850160051c820191505b8181101561272957828155600101612716565b505050505050565b815167ffffffffffffffff81111561274b5761274b612420565b61275f81612759845461263a565b846126e3565b602080601f831160018114612794576000841561277c5750858301515b600019600386901b1c1916600185901b178555612729565b600085815260208120601f198616915b828110156127c3578886015182559484019460019091019084016127a4565b50858210156127e15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020808352600084546128058161263a565b8084870152604060018084166000811461282657600181146128405761286e565b60ff1985168984015283151560051b89018301955061286e565b896000528660002060005b858110156128665781548b820186015290830190880161284b565b8a0184019650505b509398975050505050505050565b600080845461288a8161263a565b600182811680156128a257600181146128b7576128e6565b60ff19841687528215158302870194506128e6565b8860005260208060002060005b858110156128dd5781548a8201529084019082016128c4565b50505082870194505b5050505083516128fa81836020880161231a565b01949350505050565b60006020828403121561291557600080fd5b815161229081612297565b8181038181111561056c5761056c61266e565b8082018082111561056c5761056c61266e565b60006020828403121561295857600080fd5b5051919050565b6000600182016129715761297161266e565b5060010190565b600082612987576129876126a3565b500690565b60006001600160a01b038087168352808616602084015250836040830152608060608301526129be608083018461233e565b9695505050505050565b6000602082840312156129da57600080fd5b81516122908161225d565b634e487b7160e01b600052603160045260246000fdfea164736f6c6343000810000a",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {
          "approve(address,uint256)": {
            "details": "See {IERC721-approve}."
          },
          "balanceOf(address)": {
            "details": "See {IERC721-balanceOf}."
          },
          "burn(uint256)": {
            "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
          },
          "getApproved(uint256)": {
            "details": "See {IERC721-getApproved}."
          },
          "isApprovedForAll(address,address)": {
            "details": "See {IERC721-isApprovedForAll}."
          },
          "name()": {
            "details": "See {IERC721Metadata-name}."
          },
          "ownerOf(uint256)": {
            "details": "See {IERC721-ownerOf}."
          },
          "paused()": {
            "details": "Returns true if the contract is paused, and false otherwise."
          },
          "royaltyInfo(uint256,uint256)": {
            "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "setApprovalForAll(address,bool)": {
            "details": "See {IERC721-setApprovalForAll}."
          },
          "symbol()": {
            "details": "See {IERC721Metadata-symbol}."
          },
          "tokenByIndex(uint256)": {
            "details": "See {IERC721Enumerable-tokenByIndex}."
          },
          "tokenOfOwnerByIndex(address,uint256)": {
            "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
          },
          "tokenURI(uint256)": {
            "details": "See {IERC721Metadata-tokenURI}."
          },
          "totalSupply()": {
            "details": "See {IERC721Enumerable-totalSupply}."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC721-transferFrom}."
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_158": {
              "entryPoint": null,
              "id": 158,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_2392": {
              "entryPoint": null,
              "id": 2392,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_5974": {
              "entryPoint": null,
              "id": 5974,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_9648": {
              "entryPoint": null,
              "id": 9648,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "abi_decode_string_fromMemory": {
              "entryPoint": 309,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_address_fromMemory": {
              "entryPoint": 484,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_encode_tuple_t_contract$_IAuthority_$9130__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_b1a71d3192862eb666fdec520e77974efac165e87a68852d6d48ebee7fdef0c0__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_dataslot_string_storage": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "clean_up_bytearray_end_slots_string_storage": {
              "entryPoint": 685,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
              "entryPoint": 768,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "extract_byte_array_length": {
              "entryPoint": 625,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "extract_used_part_and_set_length_of_short_byte_array": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "panic_error_0x41": {
              "entryPoint": 287,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:4899:47",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:47",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "46:95:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "63:1:47",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "70:3:47",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "75:10:47",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "66:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "66:20:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "56:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "56:31:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "56:31:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "103:1:47",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "106:4:47",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "96:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "96:15:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "96:15:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "127:1:47",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "130:4:47",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "120:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "120:15:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "120:15:47"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "14:127:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "210:776:47",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "259:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "268:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "271:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "261:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "261:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "261:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "238:6:47"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "246:4:47",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "234:3:47"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "234:17:47"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "253:3:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "230:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "230:27:47"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "223:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "223:35:47"
                          },
                          "nodeType": "YulIf",
                          "src": "220:55:47"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "284:23:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "300:6:47"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "294:5:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "294:13:47"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "288:2:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "316:28:47",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "334:2:47",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "338:1:47",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "330:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "330:10:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "342:1:47",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "326:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "326:18:47"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "320:2:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "367:22:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "369:16:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "369:18:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "369:18:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "359:2:47"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "363:2:47"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "356:2:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "356:10:47"
                          },
                          "nodeType": "YulIf",
                          "src": "353:36:47"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "398:17:47",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "412:2:47",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "408:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "408:7:47"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "402:2:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "424:23:47",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "444:2:47",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "438:5:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "438:9:47"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "428:6:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "456:71:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "478:6:47"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "502:2:47"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "506:4:47",
                                                "type": "",
                                                "value": "0x1f"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "498:3:47"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "498:13:47"
                                          },
                                          {
                                            "name": "_3",
                                            "nodeType": "YulIdentifier",
                                            "src": "513:2:47"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "494:3:47"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "494:22:47"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "518:2:47",
                                        "type": "",
                                        "value": "63"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "490:3:47"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "490:31:47"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "523:2:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "486:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "486:40:47"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "474:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "474:53:47"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "460:10:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "586:22:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "588:16:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "588:18:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "588:18:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "545:10:47"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "557:2:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "542:2:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "542:18:47"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "565:10:47"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "577:6:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "562:2:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "562:22:47"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "539:2:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "539:46:47"
                          },
                          "nodeType": "YulIf",
                          "src": "536:72:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "624:2:47",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "628:10:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "617:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "617:22:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "617:22:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "655:6:47"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "663:2:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "648:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "648:18:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "648:18:47"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "675:14:47",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "685:4:47",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "_4",
                              "nodeType": "YulTypedName",
                              "src": "679:2:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "735:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "744:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "747:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "737:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "737:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "737:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "712:6:47"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "720:2:47"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "708:3:47"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "708:15:47"
                                  },
                                  {
                                    "name": "_4",
                                    "nodeType": "YulIdentifier",
                                    "src": "725:2:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "704:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "704:24:47"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "730:3:47"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "701:2:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "701:33:47"
                          },
                          "nodeType": "YulIf",
                          "src": "698:53:47"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "760:10:47",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "769:1:47",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "764:1:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "825:87:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "memPtr",
                                              "nodeType": "YulIdentifier",
                                              "src": "854:6:47"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "862:1:47"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "850:3:47"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "850:14:47"
                                        },
                                        {
                                          "name": "_4",
                                          "nodeType": "YulIdentifier",
                                          "src": "866:2:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "846:3:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "846:23:47"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "offset",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "885:6:47"
                                                },
                                                {
                                                  "name": "i",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "893:1:47"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "881:3:47"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "881:14:47"
                                            },
                                            {
                                              "name": "_4",
                                              "nodeType": "YulIdentifier",
                                              "src": "897:2:47"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "877:3:47"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "877:23:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "871:5:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "871:30:47"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "839:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "839:63:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "839:63:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "790:1:47"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "793:2:47"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "787:2:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "787:9:47"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "797:19:47",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "799:15:47",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "808:1:47"
                                    },
                                    {
                                      "name": "_4",
                                      "nodeType": "YulIdentifier",
                                      "src": "811:2:47"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "804:3:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "804:10:47"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "799:1:47"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "783:3:47",
                            "statements": []
                          },
                          "src": "779:133:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "memPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "936:6:47"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "944:2:47"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "932:3:47"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "932:15:47"
                                  },
                                  {
                                    "name": "_4",
                                    "nodeType": "YulIdentifier",
                                    "src": "949:2:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "928:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "928:24:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "954:1:47",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "921:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "921:35:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "921:35:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "965:15:47",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "974:6:47"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "965:5:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_string_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "184:6:47",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "192:3:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "200:5:47",
                        "type": ""
                      }
                    ],
                    "src": "146:840:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1126:594:47",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1172:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1181:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1184:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1174:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1174:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1174:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1147:7:47"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1156:9:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1143:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1143:23:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1168:2:47",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1139:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1139:32:47"
                          },
                          "nodeType": "YulIf",
                          "src": "1136:52:47"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1197:30:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1217:9:47"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1211:5:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1211:16:47"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "1201:6:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1236:28:47",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1254:2:47",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1258:1:47",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "1250:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1250:10:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1262:1:47",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "1246:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1246:18:47"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "1240:2:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1291:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1300:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1303:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1293:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1293:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1293:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1279:6:47"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1287:2:47"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1276:2:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1276:14:47"
                          },
                          "nodeType": "YulIf",
                          "src": "1273:34:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1316:71:47",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1359:9:47"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "1370:6:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1355:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1355:22:47"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1379:7:47"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_string_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "1326:28:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1326:61:47"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1316:6:47"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1396:41:47",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1422:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1433:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1418:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1418:18:47"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1412:5:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1412:25:47"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "1400:8:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1466:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1475:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1478:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1468:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1468:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1468:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "1452:8:47"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1462:2:47"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1449:2:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1449:16:47"
                          },
                          "nodeType": "YulIf",
                          "src": "1446:36:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1491:73:47",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1534:9:47"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1545:8:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1530:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1530:24:47"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1556:7:47"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_string_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "1501:28:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1501:63:47"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1491:6:47"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1573:38:47",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1596:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1607:2:47",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1592:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1592:18:47"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1586:5:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1586:25:47"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "1577:5:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1674:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1683:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1686:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1676:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1676:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1676:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1633:5:47"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "1644:5:47"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1659:3:47",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1664:1:47",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "1655:3:47"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1655:11:47"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1668:1:47",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "1651:3:47"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1651:19:47"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1640:3:47"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1640:31:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "1630:2:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1630:42:47"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1623:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1623:50:47"
                          },
                          "nodeType": "YulIf",
                          "src": "1620:70:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1699:15:47",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1709:5:47"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "1699:6:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1076:9:47",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1087:7:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1099:6:47",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1107:6:47",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "1115:6:47",
                        "type": ""
                      }
                    ],
                    "src": "991:729:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1780:325:47",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1790:22:47",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1804:1:47",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "1807:4:47"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "1800:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1800:12:47"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "1790:6:47"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1821:38:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "1851:4:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1857:1:47",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "1847:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1847:12:47"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "1825:18:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1898:31:47",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "1900:27:47",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "1914:6:47"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1922:4:47",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "1910:3:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1910:17:47"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "1900:6:47"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "1878:18:47"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1871:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1871:26:47"
                          },
                          "nodeType": "YulIf",
                          "src": "1868:61:47"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1988:111:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2009:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2016:3:47",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2021:10:47",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "2012:3:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2012:20:47"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2002:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2002:31:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2002:31:47"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2053:1:47",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2056:4:47",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2046:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2046:15:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2046:15:47"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2081:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2084:4:47",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2074:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2074:15:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2074:15:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "1944:18:47"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "1967:6:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1975:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1964:2:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1964:14:47"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "1941:2:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1941:38:47"
                          },
                          "nodeType": "YulIf",
                          "src": "1938:161:47"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "1760:4:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "1769:6:47",
                        "type": ""
                      }
                    ],
                    "src": "1725:380:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2166:65:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2183:1:47",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "name": "ptr",
                                "nodeType": "YulIdentifier",
                                "src": "2186:3:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2176:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2176:14:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2176:14:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2199:26:47",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2217:1:47",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2220:4:47",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "keccak256",
                              "nodeType": "YulIdentifier",
                              "src": "2207:9:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2207:18:47"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nodeType": "YulIdentifier",
                              "src": "2199:4:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_dataslot_string_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nodeType": "YulTypedName",
                        "src": "2149:3:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "2157:4:47",
                        "type": ""
                      }
                    ],
                    "src": "2110:121:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2317:464:47",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2350:425:47",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "2364:11:47",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2374:1:47",
                                  "type": "",
                                  "value": "0"
                                },
                                "variables": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulTypedName",
                                    "src": "2368:2:47",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2395:2:47"
                                    },
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "2399:5:47"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2388:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2388:17:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2388:17:47"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "2418:31:47",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2440:2:47"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2444:4:47",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "keccak256",
                                    "nodeType": "YulIdentifier",
                                    "src": "2430:9:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2430:19:47"
                                },
                                "variables": [
                                  {
                                    "name": "data",
                                    "nodeType": "YulTypedName",
                                    "src": "2422:4:47",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "2462:57:47",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "data",
                                      "nodeType": "YulIdentifier",
                                      "src": "2485:4:47"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2495:1:47",
                                          "type": "",
                                          "value": "5"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "startIndex",
                                              "nodeType": "YulIdentifier",
                                              "src": "2502:10:47"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "2514:2:47",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "2498:3:47"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2498:19:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shr",
                                        "nodeType": "YulIdentifier",
                                        "src": "2491:3:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2491:27:47"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "2481:3:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2481:38:47"
                                },
                                "variables": [
                                  {
                                    "name": "deleteStart",
                                    "nodeType": "YulTypedName",
                                    "src": "2466:11:47",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "2556:23:47",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "2558:19:47",
                                      "value": {
                                        "name": "data",
                                        "nodeType": "YulIdentifier",
                                        "src": "2573:4:47"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "deleteStart",
                                          "nodeType": "YulIdentifier",
                                          "src": "2558:11:47"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "startIndex",
                                      "nodeType": "YulIdentifier",
                                      "src": "2538:10:47"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2550:4:47",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nodeType": "YulIdentifier",
                                    "src": "2535:2:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2535:20:47"
                                },
                                "nodeType": "YulIf",
                                "src": "2532:47:47"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "2592:41:47",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "data",
                                      "nodeType": "YulIdentifier",
                                      "src": "2606:4:47"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2616:1:47",
                                          "type": "",
                                          "value": "5"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "len",
                                              "nodeType": "YulIdentifier",
                                              "src": "2623:3:47"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "2628:2:47",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "2619:3:47"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2619:12:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shr",
                                        "nodeType": "YulIdentifier",
                                        "src": "2612:3:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2612:20:47"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "2602:3:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2602:31:47"
                                },
                                "variables": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulTypedName",
                                    "src": "2596:2:47",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "2646:24:47",
                                "value": {
                                  "name": "deleteStart",
                                  "nodeType": "YulIdentifier",
                                  "src": "2659:11:47"
                                },
                                "variables": [
                                  {
                                    "name": "start",
                                    "nodeType": "YulTypedName",
                                    "src": "2650:5:47",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "2744:21:47",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "start",
                                            "nodeType": "YulIdentifier",
                                            "src": "2753:5:47"
                                          },
                                          {
                                            "name": "_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "2760:2:47"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sstore",
                                          "nodeType": "YulIdentifier",
                                          "src": "2746:6:47"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2746:17:47"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "2746:17:47"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "start",
                                      "nodeType": "YulIdentifier",
                                      "src": "2694:5:47"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "2701:2:47"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nodeType": "YulIdentifier",
                                    "src": "2691:2:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2691:13:47"
                                },
                                "nodeType": "YulForLoop",
                                "post": {
                                  "nodeType": "YulBlock",
                                  "src": "2705:26:47",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "2707:22:47",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "start",
                                            "nodeType": "YulIdentifier",
                                            "src": "2720:5:47"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2727:1:47",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2716:3:47"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2716:13:47"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "start",
                                          "nodeType": "YulIdentifier",
                                          "src": "2707:5:47"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "pre": {
                                  "nodeType": "YulBlock",
                                  "src": "2687:3:47",
                                  "statements": []
                                },
                                "src": "2683:82:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "len",
                                "nodeType": "YulIdentifier",
                                "src": "2333:3:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2338:2:47",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2330:2:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2330:11:47"
                          },
                          "nodeType": "YulIf",
                          "src": "2327:448:47"
                        }
                      ]
                    },
                    "name": "clean_up_bytearray_end_slots_string_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "2289:5:47",
                        "type": ""
                      },
                      {
                        "name": "len",
                        "nodeType": "YulTypedName",
                        "src": "2296:3:47",
                        "type": ""
                      },
                      {
                        "name": "startIndex",
                        "nodeType": "YulTypedName",
                        "src": "2301:10:47",
                        "type": ""
                      }
                    ],
                    "src": "2236:545:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2871:81:47",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2881:65:47",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "data",
                                    "nodeType": "YulIdentifier",
                                    "src": "2896:4:47"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "2914:1:47",
                                                "type": "",
                                                "value": "3"
                                              },
                                              {
                                                "name": "len",
                                                "nodeType": "YulIdentifier",
                                                "src": "2917:3:47"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "2910:3:47"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2910:11:47"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "2927:1:47",
                                                "type": "",
                                                "value": "0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "not",
                                              "nodeType": "YulIdentifier",
                                              "src": "2923:3:47"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2923:6:47"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shr",
                                          "nodeType": "YulIdentifier",
                                          "src": "2906:3:47"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2906:24:47"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "2902:3:47"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2902:29:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2892:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2892:40:47"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2938:1:47",
                                    "type": "",
                                    "value": "1"
                                  },
                                  {
                                    "name": "len",
                                    "nodeType": "YulIdentifier",
                                    "src": "2941:3:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "2934:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2934:11:47"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "2889:2:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2889:57:47"
                          },
                          "variableNames": [
                            {
                              "name": "used",
                              "nodeType": "YulIdentifier",
                              "src": "2881:4:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "extract_used_part_and_set_length_of_short_byte_array",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "2848:4:47",
                        "type": ""
                      },
                      {
                        "name": "len",
                        "nodeType": "YulTypedName",
                        "src": "2854:3:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "used",
                        "nodeType": "YulTypedName",
                        "src": "2862:4:47",
                        "type": ""
                      }
                    ],
                    "src": "2786:166:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3053:1256:47",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3063:24:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "3083:3:47"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3077:5:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3077:10:47"
                          },
                          "variables": [
                            {
                              "name": "newLen",
                              "nodeType": "YulTypedName",
                              "src": "3067:6:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3130:22:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "3132:16:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3132:18:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3132:18:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nodeType": "YulIdentifier",
                                "src": "3102:6:47"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3118:2:47",
                                        "type": "",
                                        "value": "64"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3122:1:47",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "3114:3:47"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3114:10:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3126:1:47",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3110:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3110:18:47"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3099:2:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3099:30:47"
                          },
                          "nodeType": "YulIf",
                          "src": "3096:56:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "slot",
                                "nodeType": "YulIdentifier",
                                "src": "3205:4:47"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "slot",
                                        "nodeType": "YulIdentifier",
                                        "src": "3243:4:47"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sload",
                                      "nodeType": "YulIdentifier",
                                      "src": "3237:5:47"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3237:11:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "extract_byte_array_length",
                                  "nodeType": "YulIdentifier",
                                  "src": "3211:25:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3211:38:47"
                              },
                              {
                                "name": "newLen",
                                "nodeType": "YulIdentifier",
                                "src": "3251:6:47"
                              }
                            ],
                            "functionName": {
                              "name": "clean_up_bytearray_end_slots_string_storage",
                              "nodeType": "YulIdentifier",
                              "src": "3161:43:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3161:97:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3161:97:47"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3267:18:47",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3284:1:47",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "srcOffset",
                              "nodeType": "YulTypedName",
                              "src": "3271:9:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3294:23:47",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3313:4:47",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "srcOffset_1",
                              "nodeType": "YulTypedName",
                              "src": "3298:11:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3326:24:47",
                          "value": {
                            "name": "srcOffset_1",
                            "nodeType": "YulIdentifier",
                            "src": "3339:11:47"
                          },
                          "variableNames": [
                            {
                              "name": "srcOffset",
                              "nodeType": "YulIdentifier",
                              "src": "3326:9:47"
                            }
                          ]
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3396:656:47",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "3410:35:47",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "newLen",
                                          "nodeType": "YulIdentifier",
                                          "src": "3429:6:47"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "3441:2:47",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "not",
                                            "nodeType": "YulIdentifier",
                                            "src": "3437:3:47"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3437:7:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nodeType": "YulIdentifier",
                                        "src": "3425:3:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3425:20:47"
                                    },
                                    "variables": [
                                      {
                                        "name": "loopEnd",
                                        "nodeType": "YulTypedName",
                                        "src": "3414:7:47",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "3458:49:47",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nodeType": "YulIdentifier",
                                          "src": "3502:4:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "array_dataslot_string_storage",
                                        "nodeType": "YulIdentifier",
                                        "src": "3472:29:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3472:35:47"
                                    },
                                    "variables": [
                                      {
                                        "name": "dstPtr",
                                        "nodeType": "YulTypedName",
                                        "src": "3462:6:47",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "3520:10:47",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3529:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulTypedName",
                                        "src": "3524:1:47",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "3607:172:47",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "3632:6:47"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "src",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "3650:3:47"
                                                      },
                                                      {
                                                        "name": "srcOffset",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "3655:9:47"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "add",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "3646:3:47"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "3646:19:47"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "mload",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "3640:5:47"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "3640:26:47"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "3625:6:47"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "3625:42:47"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "3625:42:47"
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "3684:24:47",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "3698:6:47"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "3706:1:47",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "3694:3:47"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "3694:14:47"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "dstPtr",
                                              "nodeType": "YulIdentifier",
                                              "src": "3684:6:47"
                                            }
                                          ]
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "3725:40:47",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "srcOffset",
                                                "nodeType": "YulIdentifier",
                                                "src": "3742:9:47"
                                              },
                                              {
                                                "name": "srcOffset_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "3753:11:47"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "3738:3:47"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "3738:27:47"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "srcOffset",
                                              "nodeType": "YulIdentifier",
                                              "src": "3725:9:47"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "3554:1:47"
                                        },
                                        {
                                          "name": "loopEnd",
                                          "nodeType": "YulIdentifier",
                                          "src": "3557:7:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "3551:2:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3551:14:47"
                                    },
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nodeType": "YulBlock",
                                      "src": "3566:28:47",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "3568:24:47",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i",
                                                "nodeType": "YulIdentifier",
                                                "src": "3577:1:47"
                                              },
                                              {
                                                "name": "srcOffset_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "3580:11:47"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "3573:3:47"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "3573:19:47"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "3568:1:47"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nodeType": "YulBlock",
                                      "src": "3547:3:47",
                                      "statements": []
                                    },
                                    "src": "3543:236:47"
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "3827:166:47",
                                      "statements": [
                                        {
                                          "nodeType": "YulVariableDeclaration",
                                          "src": "3845:43:47",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "3872:3:47"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "3877:9:47"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "3868:3:47"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "3868:19:47"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "3862:5:47"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "3862:26:47"
                                          },
                                          "variables": [
                                            {
                                              "name": "lastValue",
                                              "nodeType": "YulTypedName",
                                              "src": "3849:9:47",
                                              "type": ""
                                            }
                                          ]
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "3912:6:47"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "lastValue",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "3924:9:47"
                                                  },
                                                  {
                                                    "arguments": [
                                                      {
                                                        "arguments": [
                                                          {
                                                            "arguments": [
                                                              {
                                                                "arguments": [
                                                                  {
                                                                    "kind": "number",
                                                                    "nodeType": "YulLiteral",
                                                                    "src": "3951:1:47",
                                                                    "type": "",
                                                                    "value": "3"
                                                                  },
                                                                  {
                                                                    "name": "newLen",
                                                                    "nodeType": "YulIdentifier",
                                                                    "src": "3954:6:47"
                                                                  }
                                                                ],
                                                                "functionName": {
                                                                  "name": "shl",
                                                                  "nodeType": "YulIdentifier",
                                                                  "src": "3947:3:47"
                                                                },
                                                                "nodeType": "YulFunctionCall",
                                                                "src": "3947:14:47"
                                                              },
                                                              {
                                                                "kind": "number",
                                                                "nodeType": "YulLiteral",
                                                                "src": "3963:3:47",
                                                                "type": "",
                                                                "value": "248"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "and",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "3943:3:47"
                                                            },
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "3943:24:47"
                                                          },
                                                          {
                                                            "arguments": [
                                                              {
                                                                "kind": "number",
                                                                "nodeType": "YulLiteral",
                                                                "src": "3973:1:47",
                                                                "type": "",
                                                                "value": "0"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "not",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "3969:3:47"
                                                            },
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "3969:6:47"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "shr",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "3939:3:47"
                                                        },
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "3939:37:47"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "not",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "3935:3:47"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "3935:42:47"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "and",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "3920:3:47"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "3920:58:47"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "3905:6:47"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "3905:74:47"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "3905:74:47"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "loopEnd",
                                          "nodeType": "YulIdentifier",
                                          "src": "3798:7:47"
                                        },
                                        {
                                          "name": "newLen",
                                          "nodeType": "YulIdentifier",
                                          "src": "3807:6:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "3795:2:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3795:19:47"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "3792:201:47"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nodeType": "YulIdentifier",
                                          "src": "4013:4:47"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "4027:1:47",
                                                  "type": "",
                                                  "value": "1"
                                                },
                                                {
                                                  "name": "newLen",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "4030:6:47"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nodeType": "YulIdentifier",
                                                "src": "4023:3:47"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "4023:14:47"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "4039:1:47",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "4019:3:47"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "4019:22:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "4006:6:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4006:36:47"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4006:36:47"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "3389:663:47",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3394:1:47",
                                "type": "",
                                "value": "1"
                              }
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "4069:234:47",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "4083:14:47",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4096:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulTypedName",
                                        "src": "4087:5:47",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "4132:67:47",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "4150:35:47",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "4169:3:47"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "4174:9:47"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "4165:3:47"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "4165:19:47"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "4159:5:47"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "4159:26:47"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "value",
                                              "nodeType": "YulIdentifier",
                                              "src": "4150:5:47"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "name": "newLen",
                                      "nodeType": "YulIdentifier",
                                      "src": "4113:6:47"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "4110:89:47"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nodeType": "YulIdentifier",
                                          "src": "4219:4:47"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "value",
                                              "nodeType": "YulIdentifier",
                                              "src": "4278:5:47"
                                            },
                                            {
                                              "name": "newLen",
                                              "nodeType": "YulIdentifier",
                                              "src": "4285:6:47"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "extract_used_part_and_set_length_of_short_byte_array",
                                            "nodeType": "YulIdentifier",
                                            "src": "4225:52:47"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "4225:67:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "4212:6:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4212:81:47"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4212:81:47"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "4061:242:47",
                              "value": "default"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nodeType": "YulIdentifier",
                                "src": "3369:6:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3377:2:47",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3366:2:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3366:14:47"
                          },
                          "nodeType": "YulSwitch",
                          "src": "3359:944:47"
                        }
                      ]
                    },
                    "name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "slot",
                        "nodeType": "YulTypedName",
                        "src": "3038:4:47",
                        "type": ""
                      },
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "3044:3:47",
                        "type": ""
                      }
                    ],
                    "src": "2957:1352:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4488:182:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4505:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4516:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4498:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4498:21:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4498:21:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4539:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4550:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4535:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4535:18:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4555:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4528:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4528:30:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4528:30:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4578:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4589:2:47",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4574:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4574:18:47"
                              },
                              {
                                "hexValue": "417574686f726974792063616e6e6f74206265207a65726f2061646472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "4594:34:47",
                                "type": "",
                                "value": "Authority cannot be zero address"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4567:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4567:62:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4567:62:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4638:26:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4650:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4661:2:47",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4646:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4646:18:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4638:4:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_b1a71d3192862eb666fdec520e77974efac165e87a68852d6d48ebee7fdef0c0__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4465:9:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4479:4:47",
                        "type": ""
                      }
                    ],
                    "src": "4314:356:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4795:102:47",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "4805:26:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4817:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4828:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4813:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4813:18:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4805:4:47"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4847:9:47"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "4862:6:47"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "4878:3:47",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "4883:1:47",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "4874:3:47"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4874:11:47"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4887:1:47",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "4870:3:47"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4870:19:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "4858:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4858:32:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4840:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4840:51:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4840:51:47"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_IAuthority_$9130__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4764:9:47",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4775:6:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4786:4:47",
                        "type": ""
                      }
                    ],
                    "src": "4675:222:47"
                  }
                ]
              },
              "contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        mstore(add(add(memPtr, _1), _4), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_address_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n        let value := mload(add(headStart, 64))\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value2 := value\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_b1a71d3192862eb666fdec520e77974efac165e87a68852d6d48ebee7fdef0c0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Authority cannot be zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_contract$_IAuthority_$9130__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n}",
              "id": 47,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "60806040523480156200001157600080fd5b5060405162002de438038062002de48339810160408190526200003491620001e4565b808383600262000045838262000300565b50600362000054828262000300565b5050600c805460ff19169055506001600160a01b038116620000bc5760405162461bcd60e51b815260206004820181905260248201527f417574686f726974792063616e6e6f74206265207a65726f2061646472657373604482015260640160405180910390fd5b600c8054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a150505050620003cc565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200014757600080fd5b81516001600160401b03808211156200016457620001646200011f565b604051601f8301601f19908116603f011681019082821181831017156200018f576200018f6200011f565b81604052838152602092508683858801011115620001ac57600080fd5b600091505b83821015620001d05785820183015181830184015290820190620001b1565b600093810190920192909252949350505050565b600080600060608486031215620001fa57600080fd5b83516001600160401b03808211156200021257600080fd5b620002208783880162000135565b945060208601519150808211156200023757600080fd5b50620002468682870162000135565b604086015190935090506001600160a01b03811681146200026657600080fd5b809150509250925092565b600181811c908216806200028657607f821691505b602082108103620002a757634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002fb57600081815260208120601f850160051c81016020861015620002d65750805b601f850160051c820191505b81811015620002f757828155600101620002e2565b5050505b505050565b81516001600160401b038111156200031c576200031c6200011f565b62000334816200032d845462000271565b84620002ad565b602080601f8311600181146200036c5760008415620003535750858301515b600019600386901b1c1916600185901b178555620002f7565b600085815260208120601f198616915b828110156200039d578886015182559484019460019091019084016200037c565b5085821015620003bc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612a0880620003dc6000396000f3fe608060405234801561001057600080fd5b50600436106102415760003560e01c806355f804b31161014557806396ce0795116100bd578063b88d4fde1161008c578063c87b56dd11610071578063c87b56dd146104eb578063d5391393146104fe578063e985e9c51461052557600080fd5b8063b88d4fde146104c0578063bf7e214f146104d357600080fd5b806396ce07951461045c578063a144819414610487578063a22cb4651461049a578063ab51e23a146104ad57600080fd5b80636c0360eb116101145780637a9e5e4b116100f95780637a9e5e4b146104395780638456cb591461044c57806395d89b411461045457600080fd5b80636c0360eb1461041e57806370a082311461042657600080fd5b806355f804b3146103da5780635944c753146103ed5780635c975abb146104005780636352211e1461040b57600080fd5b806323b872dd116101d85780633f4ba83a116101a757806342842e0e1161018c57806342842e0e146103a157806342966c68146103b45780634f6ccce7146103c757600080fd5b80633f4ba83a14610386578063422627c31461038e57600080fd5b806323b872dd1461031b5780632a55205a1461032e5780632f745c591461036057806337f8649e1461037357600080fd5b8063081812fc11610214578063081812fc146102ab578063095ea7b3146102d657806318160ddd146102e95780631c9ad5b1146102fb57600080fd5b806301ffc9a71461024657806304634d8d1461026e578063067b61f21461028357806306fdde0314610296575b600080fd5b610259610254366004612273565b610561565b60405190151581526020015b60405180910390f35b61028161027c3660046122c3565b610572565b005b6102816102913660046122f8565b610588565b61029e61059a565b604051610265919061236a565b6102be6102b936600461237d565b61062c565b6040516001600160a01b039091168152602001610265565b6102816102e4366004612396565b610653565b600a545b604051908152602001610265565b6102ed61030936600461237d565b600f6020526000908152604090205481565b6102816103293660046123c2565b61076d565b61034161033c3660046122f8565b6107e6565b604080516001600160a01b039093168352602083019190915201610265565b6102ed61036e366004612396565b610892565b6102ed610381366004612403565b61093a565b6102816109ea565b6102ed61039c36600461237d565b6109fc565b6102816103af3660046123c2565b610a8b565b6102816103c236600461237d565b610aa6565b6102ed6103d536600461237d565b610b1e565b61029e6103e83660046124ac565b610bc2565b6102816103fb3660046124f5565b610ca4565b600c5460ff16610259565b6102be61041936600461237d565b610cb7565b61029e610d1c565b6102ed610434366004612403565b610daa565b610281610447366004612403565b610e44565b610281610ebf565b61029e610ecf565b600e5461046f906001600160601b031681565b6040516001600160601b039091168152602001610265565b610281610495366004612396565b610ede565b6102816104a8366004612533565b610f15565b61046f6104bb366004612571565b610f20565b6102816104ce36600461258c565b610f91565b600c546102be9061010090046001600160a01b031681565b61029e6104f936600461237d565b611010565b6102ed7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61025961053336600461260c565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b600061056c826110eb565b92915050565b61057a6110f6565b61058482826111bc565b5050565b6105906110f6565b61058482826112b9565b6060600280546105a99061263a565b80601f01602080910402602001604051908101604052809291908181526020018280546105d59061263a565b80156106225780601f106105f757610100808354040283529160200191610622565b820191906000526020600020905b81548152906001019060200180831161060557829003601f168201915b5050505050905090565b600061063782611308565b506000908152600660205260409020546001600160a01b031690565b600061065e82610cb7565b9050806001600160a01b0316836001600160a01b0316036106d05760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806106ec57506106ec8133610533565b61075e5760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016106c7565b610768838361136c565b505050565b610778335b826113da565b6107db5760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b60648201526084016106c7565b610768838383611459565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b031692820192909252829161085b5750604080518082019091526000546001600160a01b0381168252600160a01b90046001600160601b031660208201525b60208101516000906127109061087a906001600160601b031687612684565b61088491906126b9565b915196919550909350505050565b600061089d83610daa565b82106109115760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e647300000000000000000000000000000000000000000060648201526084016106c7565b506001600160a01b03919091166000908152600860209081526040808320938352929052205490565b60007f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661096681611618565b600061097160105490565b9050610981601080546001019055565b604080514460208083019190915242828401524360608084019190915241901b6bffffffffffffffffffffffff1916608083015282518083036074018152609490920190925280519101206109d682826112b9565b6109e085836116c5565b5091505b50919050565b6109f26110f6565b6109fa6116df565b565b6000818152600460205260408120546001600160a01b0316610a785760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016106c7565b506000908152600f602052604090205490565b61076883838360405180602001604052806000815250610f91565b610aaf33610772565b610b125760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b60648201526084016106c7565b610b1b81611731565b50565b6000610b29600a5490565b8210610b9d5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e6473000000000000000000000000000000000000000060648201526084016106c7565b600a8281548110610bb057610bb06126cd565b90600052602060002001549050919050565b6060610bcc6110f6565b600d610bd88382612731565b507f5411e8ebf1636d9e83d5fc4900bf80cbac82e8790da2a4c94db4895e889eedf6600d604051610c0991906127f1565b60405180910390a1600d8054610c1e9061263a565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4a9061263a565b8015610c975780601f10610c6c57610100808354040283529160200191610c97565b820191906000526020600020905b815481529060010190602001808311610c7a57829003601f168201915b505050505090505b919050565b610cac6110f6565b61076883838361174b565b6000818152600460205260408120546001600160a01b03168061056c5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016106c7565b600d8054610d299061263a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d559061263a565b8015610da25780601f10610d7757610100808354040283529160200191610da2565b820191906000526020600020905b815481529060010190602001808311610d8557829003601f168201915b505050505081565b60006001600160a01b038216610e285760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e6572000000000000000000000000000000000000000000000060648201526084016106c7565b506001600160a01b031660009081526005602052604090205490565b610e4c6110f6565b600c80547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b038416908102919091179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a150565b610ec76110f6565b6109fa611859565b6060600380546105a99061263a565b610ee66110f6565b6000610ef160105490565b9050610f01601080546001019055565b610f0b81836112b9565b61076883826116c5565b610584338383611896565b6000610f2a6110f6565b600e80546bffffffffffffffffffffffff19166001600160601b0384169081179091556040519081527f601b85aa9305dbcfbfc81aa2d4b5126c1ce24afdd1bad47d6880e5b6df081f579060200160405180910390a15050600e546001600160601b031690565b610f9b33836113da565b610ffe5760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b60648201526084016106c7565b61100a84848484611964565b50505050565b6000818152600460205260409020546060906001600160a01b031661108f5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016106c7565b6000600d805461109e9061263a565b9050116110ba576040518060200160405280600081525061056c565b600d6110c5836119e2565b6040516020016110d692919061287c565b60405160208183030381529060405292915050565b600061056c82611afb565b600c60019054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611149573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116d9190612903565b6001600160a01b0316336001600160a01b0316146109fa5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064016106c7565b6127106001600160601b038216111561122a5760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b60648201526084016106c7565b6001600160a01b0382166112805760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c69642072656365697665720000000000000060448201526064016106c7565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600055565b6000828152600f602090815260409182902083905581518481529081018390527f4e26044f7fb3724a9375deb74974fdc2f4e07f265efce87f93cfced354258487910160405180910390a15050565b6000818152600460205260409020546001600160a01b0316610b1b5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016106c7565b600081815260066020526040902080546001600160a01b0319166001600160a01b03841690811790915581906113a182610cb7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806113e683610cb7565b9050806001600160a01b0316846001600160a01b0316148061142d57506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b806114515750836001600160a01b03166114468461062c565b6001600160a01b0316145b949350505050565b826001600160a01b031661146c82610cb7565b6001600160a01b0316146114e85760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016106c7565b6001600160a01b03821661154a5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106c7565b611555838383611b20565b61156060008261136c565b6001600160a01b0383166000908152600560205260408120805460019290611589908490612920565b90915550506001600160a01b03821660009081526005602052604081208054600192906115b7908490612933565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600c54604051634c9ba32160e11b8152336004820152829161010090046001600160a01b031690639937464290602401602060405180830381865afa158015611665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116899190612946565b14610b1b5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064016106c7565b610584828260405180602001604052806000815250611b33565b6116e7611bb1565b600c805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b61173a81611c03565b600090815260016020526040812055565b6127106001600160601b03821611156117b95760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b60648201526084016106c7565b6001600160a01b03821661180f5760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d6574657273000000000060448201526064016106c7565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600190529190942093519051909116600160a01b029116179055565b611861611c0c565b600c805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117143390565b816001600160a01b0316836001600160a01b0316036118f75760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016106c7565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61196f848484611459565b61197b84848484611c5f565b61100a5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016106c7565b606081600003611a095750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611a335780611a1d8161295f565b9150611a2c9050600a836126b9565b9150611a0d565b60008167ffffffffffffffff811115611a4e57611a4e612420565b6040519080825280601f01601f191660200182016040528015611a78576020820181803683370190505b5090505b841561145157611a8d600183612920565b9150611a9a600a86612978565b611aa5906030612933565b60f81b818381518110611aba57611aba6126cd565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611af4600a866126b9565b9450611a7c565b60006001600160e01b0319821663780e9d6360e01b148061056c575061056c82611dab565b611b28611c0c565b610768838383611deb565b611b3d8383611ea3565b611b4a6000848484611c5f565b6107685760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016106c7565b600c5460ff166109fa5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016106c7565b61173a81611ff1565b600c5460ff16156109fa5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016106c7565b60006001600160a01b0384163b15611da057604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611ca390339089908890889060040161298c565b6020604051808303816000875af1925050508015611cde575060408051601f3d908101601f19168201909252611cdb918101906129c8565b60015b611d86573d808015611d0c576040519150601f19603f3d011682016040523d82523d6000602084013e611d11565b606091505b508051600003611d7e5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016106c7565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611451565b506001949350505050565b60006001600160e01b031982166380ac58cd60e01b1480611ddc57506001600160e01b03198216635b5e139f60e01b145b8061056c575061056c82612098565b6001600160a01b038316611e4657611e4181600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b611e69565b816001600160a01b0316836001600160a01b031614611e6957611e6983826120cd565b6001600160a01b038216611e80576107688161216a565b826001600160a01b0316826001600160a01b031614610768576107688282612219565b6001600160a01b038216611ef95760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106c7565b6000818152600460205260409020546001600160a01b031615611f5e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106c7565b611f6a60008383611b20565b6001600160a01b0382166000908152600560205260408120805460019290611f93908490612933565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000611ffc82610cb7565b905061200a81600084611b20565b61201560008361136c565b6001600160a01b038116600090815260056020526040812080546001929061203e908490612920565b909155505060008281526004602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60006001600160e01b0319821663152a902d60e11b148061056c57506301ffc9a760e01b6001600160e01b031983161461056c565b600060016120da84610daa565b6120e49190612920565b600083815260096020526040902054909150808214612137576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a5460009061217c90600190612920565b6000838152600b6020526040812054600a80549394509092849081106121a4576121a46126cd565b9060005260206000200154905080600a83815481106121c5576121c56126cd565b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a8054806121fd576121fd6129e5565b6001900381819060005260206000200160009055905550505050565b600061222483610daa565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b6001600160e01b031981168114610b1b57600080fd5b60006020828403121561228557600080fd5b81356122908161225d565b9392505050565b6001600160a01b0381168114610b1b57600080fd5b80356001600160601b0381168114610c9f57600080fd5b600080604083850312156122d657600080fd5b82356122e181612297565b91506122ef602084016122ac565b90509250929050565b6000806040838503121561230b57600080fd5b50508035926020909101359150565b60005b8381101561233557818101518382015260200161231d565b50506000910152565b6000815180845261235681602086016020860161231a565b601f01601f19169290920160200192915050565b602081526000612290602083018461233e565b60006020828403121561238f57600080fd5b5035919050565b600080604083850312156123a957600080fd5b82356123b481612297565b946020939093013593505050565b6000806000606084860312156123d757600080fd5b83356123e281612297565b925060208401356123f281612297565b929592945050506040919091013590565b60006020828403121561241557600080fd5b813561229081612297565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561245157612451612420565b604051601f8501601f19908116603f0116810190828211818310171561247957612479612420565b8160405280935085815286868601111561249257600080fd5b858560208301376000602087830101525050509392505050565b6000602082840312156124be57600080fd5b813567ffffffffffffffff8111156124d557600080fd5b8201601f810184136124e657600080fd5b61145184823560208401612436565b60008060006060848603121561250a57600080fd5b83359250602084013561251c81612297565b915061252a604085016122ac565b90509250925092565b6000806040838503121561254657600080fd5b823561255181612297565b91506020830135801515811461256657600080fd5b809150509250929050565b60006020828403121561258357600080fd5b612290826122ac565b600080600080608085870312156125a257600080fd5b84356125ad81612297565b935060208501356125bd81612297565b925060408501359150606085013567ffffffffffffffff8111156125e057600080fd5b8501601f810187136125f157600080fd5b61260087823560208401612436565b91505092959194509250565b6000806040838503121561261f57600080fd5b823561262a81612297565b9150602083013561256681612297565b600181811c9082168061264e57607f821691505b6020821081036109e457634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561269e5761269e61266e565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826126c8576126c86126a3565b500490565b634e487b7160e01b600052603260045260246000fd5b601f82111561076857600081815260208120601f850160051c8101602086101561270a5750805b601f850160051c820191505b8181101561272957828155600101612716565b505050505050565b815167ffffffffffffffff81111561274b5761274b612420565b61275f81612759845461263a565b846126e3565b602080601f831160018114612794576000841561277c5750858301515b600019600386901b1c1916600185901b178555612729565b600085815260208120601f198616915b828110156127c3578886015182559484019460019091019084016127a4565b50858210156127e15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020808352600084546128058161263a565b8084870152604060018084166000811461282657600181146128405761286e565b60ff1985168984015283151560051b89018301955061286e565b896000528660002060005b858110156128665781548b820186015290830190880161284b565b8a0184019650505b509398975050505050505050565b600080845461288a8161263a565b600182811680156128a257600181146128b7576128e6565b60ff19841687528215158302870194506128e6565b8860005260208060002060005b858110156128dd5781548a8201529084019082016128c4565b50505082870194505b5050505083516128fa81836020880161231a565b01949350505050565b60006020828403121561291557600080fd5b815161229081612297565b8181038181111561056c5761056c61266e565b8082018082111561056c5761056c61266e565b60006020828403121561295857600080fd5b5051919050565b6000600182016129715761297161266e565b5060010190565b600082612987576129876126a3565b500690565b60006001600160a01b038087168352808616602084015250836040830152608060608301526129be608083018461233e565b9695505050505050565b6000602082840312156129da57600080fd5b81516122908161225d565b634e487b7160e01b600052603160045260246000fdfea164736f6c6343000810000a",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2DE4 CODESIZE SUB DUP1 PUSH3 0x2DE4 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1E4 JUMP JUMPDEST DUP1 DUP4 DUP4 PUSH1 0x2 PUSH3 0x45 DUP4 DUP3 PUSH3 0x300 JUMP JUMPDEST POP PUSH1 0x3 PUSH3 0x54 DUP3 DUP3 PUSH3 0x300 JUMP JUMPDEST POP POP PUSH1 0xC DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0xBC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x417574686F726974792063616E6E6F74206265207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xC DUP1 SLOAD PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND PUSH2 0x100 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x2F658B440C35314F52658EA8A740E05B284CDC84DC9AE01E891F21B8933E7CAD SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP PUSH3 0x3CC JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x164 JUMPI PUSH3 0x164 PUSH3 0x11F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x18F JUMPI PUSH3 0x18F PUSH3 0x11F JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x1AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x1D0 JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x1B1 JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP2 ADD SWAP1 SWAP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x1FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x220 DUP8 DUP4 DUP9 ADD PUSH3 0x135 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x237 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x246 DUP7 DUP3 DUP8 ADD PUSH3 0x135 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD SWAP1 SWAP4 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x286 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x2A7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x2FB JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x2D6 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x2F7 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x2E2 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x31C JUMPI PUSH3 0x31C PUSH3 0x11F JUMP JUMPDEST PUSH3 0x334 DUP2 PUSH3 0x32D DUP5 SLOAD PUSH3 0x271 JUMP JUMPDEST DUP5 PUSH3 0x2AD JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x36C JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x353 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x2F7 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x39D JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x37C JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x3BC JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x2A08 DUP1 PUSH3 0x3DC PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x241 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x55F804B3 GT PUSH2 0x145 JUMPI DUP1 PUSH4 0x96CE0795 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x4EB JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x4FE JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x525 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x4C0 JUMPI DUP1 PUSH4 0xBF7E214F EQ PUSH2 0x4D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x96CE0795 EQ PUSH2 0x45C JUMPI DUP1 PUSH4 0xA1448194 EQ PUSH2 0x487 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x49A JUMPI DUP1 PUSH4 0xAB51E23A EQ PUSH2 0x4AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6C0360EB GT PUSH2 0x114 JUMPI DUP1 PUSH4 0x7A9E5E4B GT PUSH2 0xF9 JUMPI DUP1 PUSH4 0x7A9E5E4B EQ PUSH2 0x439 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x44C JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x454 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6C0360EB EQ PUSH2 0x41E JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x426 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x55F804B3 EQ PUSH2 0x3DA JUMPI DUP1 PUSH4 0x5944C753 EQ PUSH2 0x3ED JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x400 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x40B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x1D8 JUMPI DUP1 PUSH4 0x3F4BA83A GT PUSH2 0x1A7 JUMPI DUP1 PUSH4 0x42842E0E GT PUSH2 0x18C JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x3A1 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x3B4 JUMPI DUP1 PUSH4 0x4F6CCCE7 EQ PUSH2 0x3C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x386 JUMPI DUP1 PUSH4 0x422627C3 EQ PUSH2 0x38E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD EQ PUSH2 0x31B JUMPI DUP1 PUSH4 0x2A55205A EQ PUSH2 0x32E JUMPI DUP1 PUSH4 0x2F745C59 EQ PUSH2 0x360 JUMPI DUP1 PUSH4 0x37F8649E EQ PUSH2 0x373 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x81812FC GT PUSH2 0x214 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x2AB JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x2D6 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0x1C9AD5B1 EQ PUSH2 0x2FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x246 JUMPI DUP1 PUSH4 0x4634D8D EQ PUSH2 0x26E JUMPI DUP1 PUSH4 0x67B61F2 EQ PUSH2 0x283 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x296 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x259 PUSH2 0x254 CALLDATASIZE PUSH1 0x4 PUSH2 0x2273 JUMP JUMPDEST PUSH2 0x561 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x281 PUSH2 0x27C CALLDATASIZE PUSH1 0x4 PUSH2 0x22C3 JUMP JUMPDEST PUSH2 0x572 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x281 PUSH2 0x291 CALLDATASIZE PUSH1 0x4 PUSH2 0x22F8 JUMP JUMPDEST PUSH2 0x588 JUMP JUMPDEST PUSH2 0x29E PUSH2 0x59A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x265 SWAP2 SWAP1 PUSH2 0x236A JUMP JUMPDEST PUSH2 0x2BE PUSH2 0x2B9 CALLDATASIZE PUSH1 0x4 PUSH2 0x237D JUMP JUMPDEST PUSH2 0x62C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x265 JUMP JUMPDEST PUSH2 0x281 PUSH2 0x2E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2396 JUMP JUMPDEST PUSH2 0x653 JUMP JUMPDEST PUSH1 0xA SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x265 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x309 CALLDATASIZE PUSH1 0x4 PUSH2 0x237D JUMP JUMPDEST PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x281 PUSH2 0x329 CALLDATASIZE PUSH1 0x4 PUSH2 0x23C2 JUMP JUMPDEST PUSH2 0x76D JUMP JUMPDEST PUSH2 0x341 PUSH2 0x33C CALLDATASIZE PUSH1 0x4 PUSH2 0x22F8 JUMP JUMPDEST PUSH2 0x7E6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x265 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x36E CALLDATASIZE PUSH1 0x4 PUSH2 0x2396 JUMP JUMPDEST PUSH2 0x892 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x381 CALLDATASIZE PUSH1 0x4 PUSH2 0x2403 JUMP JUMPDEST PUSH2 0x93A JUMP JUMPDEST PUSH2 0x281 PUSH2 0x9EA JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x39C CALLDATASIZE PUSH1 0x4 PUSH2 0x237D JUMP JUMPDEST PUSH2 0x9FC JUMP JUMPDEST PUSH2 0x281 PUSH2 0x3AF CALLDATASIZE PUSH1 0x4 PUSH2 0x23C2 JUMP JUMPDEST PUSH2 0xA8B JUMP JUMPDEST PUSH2 0x281 PUSH2 0x3C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x237D JUMP JUMPDEST PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x3D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x237D JUMP JUMPDEST PUSH2 0xB1E JUMP JUMPDEST PUSH2 0x29E PUSH2 0x3E8 CALLDATASIZE PUSH1 0x4 PUSH2 0x24AC JUMP JUMPDEST PUSH2 0xBC2 JUMP JUMPDEST PUSH2 0x281 PUSH2 0x3FB CALLDATASIZE PUSH1 0x4 PUSH2 0x24F5 JUMP JUMPDEST PUSH2 0xCA4 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0xFF AND PUSH2 0x259 JUMP JUMPDEST PUSH2 0x2BE PUSH2 0x419 CALLDATASIZE PUSH1 0x4 PUSH2 0x237D JUMP JUMPDEST PUSH2 0xCB7 JUMP JUMPDEST PUSH2 0x29E PUSH2 0xD1C JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x434 CALLDATASIZE PUSH1 0x4 PUSH2 0x2403 JUMP JUMPDEST PUSH2 0xDAA JUMP JUMPDEST PUSH2 0x281 PUSH2 0x447 CALLDATASIZE PUSH1 0x4 PUSH2 0x2403 JUMP JUMPDEST PUSH2 0xE44 JUMP JUMPDEST PUSH2 0x281 PUSH2 0xEBF JUMP JUMPDEST PUSH2 0x29E PUSH2 0xECF JUMP JUMPDEST PUSH1 0xE SLOAD PUSH2 0x46F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x265 JUMP JUMPDEST PUSH2 0x281 PUSH2 0x495 CALLDATASIZE PUSH1 0x4 PUSH2 0x2396 JUMP JUMPDEST PUSH2 0xEDE JUMP JUMPDEST PUSH2 0x281 PUSH2 0x4A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x2533 JUMP JUMPDEST PUSH2 0xF15 JUMP JUMPDEST PUSH2 0x46F PUSH2 0x4BB CALLDATASIZE PUSH1 0x4 PUSH2 0x2571 JUMP JUMPDEST PUSH2 0xF20 JUMP JUMPDEST PUSH2 0x281 PUSH2 0x4CE CALLDATASIZE PUSH1 0x4 PUSH2 0x258C JUMP JUMPDEST PUSH2 0xF91 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH2 0x2BE SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x29E PUSH2 0x4F9 CALLDATASIZE PUSH1 0x4 PUSH2 0x237D JUMP JUMPDEST PUSH2 0x1010 JUMP JUMPDEST PUSH2 0x2ED PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 JUMP JUMPDEST PUSH2 0x259 PUSH2 0x533 CALLDATASIZE PUSH1 0x4 PUSH2 0x260C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x56C DUP3 PUSH2 0x10EB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x57A PUSH2 0x10F6 JUMP JUMPDEST PUSH2 0x584 DUP3 DUP3 PUSH2 0x11BC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x590 PUSH2 0x10F6 JUMP JUMPDEST PUSH2 0x584 DUP3 DUP3 PUSH2 0x12B9 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x5A9 SWAP1 PUSH2 0x263A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5D5 SWAP1 PUSH2 0x263A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x622 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5F7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x622 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x605 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x637 DUP3 PUSH2 0x1308 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x65E DUP3 PUSH2 0xCB7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x6D0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x6EC JUMPI POP PUSH2 0x6EC DUP2 CALLER PUSH2 0x533 JUMP JUMPDEST PUSH2 0x75E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206E6F7220617070726F76656420666F7220616C6C0000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH2 0x768 DUP4 DUP4 PUSH2 0x136C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x778 CALLER JUMPDEST DUP3 PUSH2 0x13DA JUMP JUMPDEST PUSH2 0x7DB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x1C881B9BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH2 0x768 DUP4 DUP4 DUP4 PUSH2 0x1459 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD DUP1 DUP4 ADD SWAP1 SWAP3 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 SWAP2 PUSH2 0x85B JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x20 DUP3 ADD MSTORE JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 PUSH2 0x2710 SWAP1 PUSH2 0x87A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP8 PUSH2 0x2684 JUMP JUMPDEST PUSH2 0x884 SWAP2 SWAP1 PUSH2 0x26B9 JUMP JUMPDEST SWAP2 MLOAD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x89D DUP4 PUSH2 0xDAA JUMP JUMPDEST DUP3 LT PUSH2 0x911 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243373231456E756D657261626C653A206F776E657220696E646578206F75 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x74206F6620626F756E6473000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 PUSH2 0x966 DUP2 PUSH2 0x1618 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x971 PUSH1 0x10 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0x981 PUSH1 0x10 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DIFFICULTY PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE TIMESTAMP DUP3 DUP5 ADD MSTORE NUMBER PUSH1 0x60 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE COINBASE SWAP1 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x80 DUP4 ADD MSTORE DUP3 MLOAD DUP1 DUP4 SUB PUSH1 0x74 ADD DUP2 MSTORE PUSH1 0x94 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 PUSH2 0x9D6 DUP3 DUP3 PUSH2 0x12B9 JUMP JUMPDEST PUSH2 0x9E0 DUP6 DUP4 PUSH2 0x16C5 JUMP JUMPDEST POP SWAP2 POP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9F2 PUSH2 0x10F6 JUMP JUMPDEST PUSH2 0x9FA PUSH2 0x16DF JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA78 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732314D657461646174613A2055524920717565727920666F72206E6F PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x3732BC34B9BA32B73A103A37B5B2B7 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x768 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xF91 JUMP JUMPDEST PUSH2 0xAAF CALLER PUSH2 0x772 JUMP JUMPDEST PUSH2 0xB12 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x1C881B9BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH2 0xB1B DUP2 PUSH2 0x1731 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB29 PUSH1 0xA SLOAD SWAP1 JUMP JUMPDEST DUP3 LT PUSH2 0xB9D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243373231456E756D657261626C653A20676C6F62616C20696E646578206F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7574206F6620626F756E64730000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH1 0xA DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xBB0 JUMPI PUSH2 0xBB0 PUSH2 0x26CD JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xBCC PUSH2 0x10F6 JUMP JUMPDEST PUSH1 0xD PUSH2 0xBD8 DUP4 DUP3 PUSH2 0x2731 JUMP JUMPDEST POP PUSH32 0x5411E8EBF1636D9E83D5FC4900BF80CBAC82E8790DA2A4C94DB4895E889EEDF6 PUSH1 0xD PUSH1 0x40 MLOAD PUSH2 0xC09 SWAP2 SWAP1 PUSH2 0x27F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0xD DUP1 SLOAD PUSH2 0xC1E SWAP1 PUSH2 0x263A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xC4A SWAP1 PUSH2 0x263A JUMP JUMPDEST DUP1 ISZERO PUSH2 0xC97 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xC6C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xC97 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xC7A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCAC PUSH2 0x10F6 JUMP JUMPDEST PUSH2 0x768 DUP4 DUP4 DUP4 PUSH2 0x174B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x56C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH1 0xD DUP1 SLOAD PUSH2 0xD29 SWAP1 PUSH2 0x263A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xD55 SWAP1 PUSH2 0x263A JUMP JUMPDEST DUP1 ISZERO PUSH2 0xDA2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xD77 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xDA2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xD85 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xE28 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xE4C PUSH2 0x10F6 JUMP JUMPDEST PUSH1 0xC DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FF AND PUSH2 0x100 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x2F658B440C35314F52658EA8A740E05B284CDC84DC9AE01E891F21B8933E7CAD SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0xEC7 PUSH2 0x10F6 JUMP JUMPDEST PUSH2 0x9FA PUSH2 0x1859 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x5A9 SWAP1 PUSH2 0x263A JUMP JUMPDEST PUSH2 0xEE6 PUSH2 0x10F6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEF1 PUSH1 0x10 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0xF01 PUSH1 0x10 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xF0B DUP2 DUP4 PUSH2 0x12B9 JUMP JUMPDEST PUSH2 0x768 DUP4 DUP3 PUSH2 0x16C5 JUMP JUMPDEST PUSH2 0x584 CALLER DUP4 DUP4 PUSH2 0x1896 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF2A PUSH2 0x10F6 JUMP JUMPDEST PUSH1 0xE DUP1 SLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x601B85AA9305DBCFBFC81AA2D4B5126C1CE24AFDD1BAD47D6880E5B6DF081F57 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP PUSH1 0xE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xF9B CALLER DUP4 PUSH2 0x13DA JUMP JUMPDEST PUSH2 0xFFE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x1C881B9BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH2 0x100A DUP5 DUP5 DUP5 DUP5 PUSH2 0x1964 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x108F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732314D657461646174613A2055524920717565727920666F72206E6F PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x3732BC34B9BA32B73A103A37B5B2B7 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xD DUP1 SLOAD PUSH2 0x109E SWAP1 PUSH2 0x263A JUMP JUMPDEST SWAP1 POP GT PUSH2 0x10BA JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x56C JUMP JUMPDEST PUSH1 0xD PUSH2 0x10C5 DUP4 PUSH2 0x19E2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x10D6 SWAP3 SWAP2 SWAP1 PUSH2 0x287C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x56C DUP3 PUSH2 0x1AFB JUMP JUMPDEST PUSH1 0xC PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC340A24 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1149 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x116D SWAP2 SWAP1 PUSH2 0x2903 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x9FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x15539055551213D492569151 PUSH1 0xA2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH2 0x2710 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP3 AND GT ISZERO PUSH2 0x122A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243323938313A20726F79616C7479206665652077696C6C20657863656564 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x2073616C655072696365 PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1280 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243323938313A20696E76616C696420726563656976657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 SWAP2 AND PUSH1 0x20 SWAP1 SWAP3 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 MUL OR PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE DUP2 MLOAD DUP5 DUP2 MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0x4E26044F7FB3724A9375DEB74974FDC2F4E07F265EFCE87F93CFCED354258487 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB1B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x13A1 DUP3 PUSH2 0xCB7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x13E6 DUP4 PUSH2 0xCB7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x142D JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST DUP1 PUSH2 0x1451 JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1446 DUP5 PUSH2 0x62C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x146C DUP3 PUSH2 0xCB7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x14E8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x154A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH2 0x1555 DUP4 DUP4 DUP4 PUSH2 0x1B20 JUMP JUMPDEST PUSH2 0x1560 PUSH1 0x0 DUP3 PUSH2 0x136C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x1589 SWAP1 DUP5 SWAP1 PUSH2 0x2920 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x15B7 SWAP1 DUP5 SWAP1 PUSH2 0x2933 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP5 SWAP4 SWAP2 DUP8 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x40 MLOAD PUSH4 0x4C9BA321 PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE DUP3 SWAP2 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x99374642 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1665 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1689 SWAP2 SWAP1 PUSH2 0x2946 JUMP JUMPDEST EQ PUSH2 0xB1B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x15539055551213D492569151 PUSH1 0xA2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH2 0x584 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1B33 JUMP JUMPDEST PUSH2 0x16E7 PUSH2 0x1BB1 JUMP JUMPDEST PUSH1 0xC DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x173A DUP2 PUSH2 0x1C03 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH2 0x2710 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP3 AND GT ISZERO PUSH2 0x17B9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243323938313A20726F79616C7479206665652077696C6C20657863656564 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x2073616C655072696365 PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x180F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243323938313A20496E76616C696420706172616D65746572730000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE PUSH1 0x0 SWAP7 DUP8 MSTORE PUSH1 0x1 SWAP1 MSTORE SWAP2 SWAP1 SWAP5 KECCAK256 SWAP4 MLOAD SWAP1 MLOAD SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xA0 SHL MUL SWAP2 AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1861 PUSH2 0x1C0C JUMP JUMPDEST PUSH1 0xC DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x1714 CALLER SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x18F7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x196F DUP5 DUP5 DUP5 PUSH2 0x1459 JUMP JUMPDEST PUSH2 0x197B DUP5 DUP5 DUP5 DUP5 PUSH2 0x1C5F JUMP JUMPDEST PUSH2 0x100A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 SUB PUSH2 0x1A09 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0x1A33 JUMPI DUP1 PUSH2 0x1A1D DUP2 PUSH2 0x295F JUMP JUMPDEST SWAP2 POP PUSH2 0x1A2C SWAP1 POP PUSH1 0xA DUP4 PUSH2 0x26B9 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A0D JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1A4E JUMPI PUSH2 0x1A4E PUSH2 0x2420 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1A78 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0x1451 JUMPI PUSH2 0x1A8D PUSH1 0x1 DUP4 PUSH2 0x2920 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A9A PUSH1 0xA DUP7 PUSH2 0x2978 JUMP JUMPDEST PUSH2 0x1AA5 SWAP1 PUSH1 0x30 PUSH2 0x2933 JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1ABA JUMPI PUSH2 0x1ABA PUSH2 0x26CD JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0x1AF4 PUSH1 0xA DUP7 PUSH2 0x26B9 JUMP JUMPDEST SWAP5 POP PUSH2 0x1A7C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x780E9D63 PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x56C JUMPI POP PUSH2 0x56C DUP3 PUSH2 0x1DAB JUMP JUMPDEST PUSH2 0x1B28 PUSH2 0x1C0C JUMP JUMPDEST PUSH2 0x768 DUP4 DUP4 DUP4 PUSH2 0x1DEB JUMP JUMPDEST PUSH2 0x1B3D DUP4 DUP4 PUSH2 0x1EA3 JUMP JUMPDEST PUSH2 0x1B4A PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x1C5F JUMP JUMPDEST PUSH2 0x768 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0xFF AND PUSH2 0x9FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH2 0x173A DUP2 PUSH2 0x1FF1 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x9FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x1DA0 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x1CA3 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x298C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1CDE JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1CDB SWAP2 DUP2 ADD SWAP1 PUSH2 0x29C8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1D86 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1D0C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1D11 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1D7E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0x1451 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x1DDC JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x56C JUMPI POP PUSH2 0x56C DUP3 PUSH2 0x2098 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1E46 JUMPI PUSH2 0x1E41 DUP2 PUSH1 0xA DUP1 SLOAD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP3 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD DUP4 SSTORE SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xC65A7BB8D6351C1CF70C95A316CC6A92839C986682D98BC35F958F4883F9D2A8 ADD SSTORE JUMP JUMPDEST PUSH2 0x1E69 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1E69 JUMPI PUSH2 0x1E69 DUP4 DUP3 PUSH2 0x20CD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1E80 JUMPI PUSH2 0x768 DUP2 PUSH2 0x216A JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x768 JUMPI PUSH2 0x768 DUP3 DUP3 PUSH2 0x2219 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1EF9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x1F5E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH2 0x1F6A PUSH1 0x0 DUP4 DUP4 PUSH2 0x1B20 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x1F93 SWAP1 DUP5 SWAP1 PUSH2 0x2933 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP4 SWAP3 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FFC DUP3 PUSH2 0xCB7 JUMP JUMPDEST SWAP1 POP PUSH2 0x200A DUP2 PUSH1 0x0 DUP5 PUSH2 0x1B20 JUMP JUMPDEST PUSH2 0x2015 PUSH1 0x0 DUP4 PUSH2 0x136C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x203E SWAP1 DUP5 SWAP1 PUSH2 0x2920 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE MLOAD DUP4 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP4 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x152A902D PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x56C JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x56C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x20DA DUP5 PUSH2 0xDAA JUMP JUMPDEST PUSH2 0x20E4 SWAP2 SWAP1 PUSH2 0x2920 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP1 DUP3 EQ PUSH2 0x2137 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SLOAD DUP5 DUP5 MSTORE DUP2 DUP5 KECCAK256 DUP2 SWAP1 SSTORE DUP4 MSTORE PUSH1 0x9 SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP2 SWAP1 SSTORE JUMPDEST POP PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP4 MSTORE PUSH1 0x8 DUP2 MSTORE DUP4 DUP4 KECCAK256 SWAP2 DUP4 MSTORE MSTORE SWAP1 DUP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x0 SWAP1 PUSH2 0x217C SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x2920 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xA DUP1 SLOAD SWAP4 SWAP5 POP SWAP1 SWAP3 DUP5 SWAP1 DUP2 LT PUSH2 0x21A4 JUMPI PUSH2 0x21A4 PUSH2 0x26CD JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 PUSH1 0xA DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x21C5 JUMPI PUSH2 0x21C5 PUSH2 0x26CD JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE DUP3 DUP2 MSTORE PUSH1 0xB SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP5 SWAP1 SSTORE DUP6 DUP3 MSTORE DUP2 KECCAK256 SSTORE PUSH1 0xA DUP1 SLOAD DUP1 PUSH2 0x21FD JUMPI PUSH2 0x21FD PUSH2 0x29E5 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2224 DUP4 PUSH2 0xDAA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 SWAP1 SSTORE SWAP4 DUP3 MSTORE PUSH1 0x9 SWAP1 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xB1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2285 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2290 DUP2 PUSH2 0x225D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xB1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xC9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x22D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x22E1 DUP2 PUSH2 0x2297 JUMP JUMPDEST SWAP2 POP PUSH2 0x22EF PUSH1 0x20 DUP5 ADD PUSH2 0x22AC JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x230B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2335 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x231D JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2356 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x231A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2290 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x233E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x238F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x23A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x23B4 DUP2 PUSH2 0x2297 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x23D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x23E2 DUP2 PUSH2 0x2297 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x23F2 DUP2 PUSH2 0x2297 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2415 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2290 DUP2 PUSH2 0x2297 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 GT ISZERO PUSH2 0x2451 JUMPI PUSH2 0x2451 PUSH2 0x2420 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP6 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x2479 JUMPI PUSH2 0x2479 PUSH2 0x2420 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP1 SWAP4 POP DUP6 DUP2 MSTORE DUP7 DUP7 DUP7 ADD GT ISZERO PUSH2 0x2492 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP8 DUP4 ADD ADD MSTORE POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x24BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x24E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1451 DUP5 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x2436 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x250A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x251C DUP2 PUSH2 0x2297 JUMP JUMPDEST SWAP2 POP PUSH2 0x252A PUSH1 0x40 DUP6 ADD PUSH2 0x22AC JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2546 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2551 DUP2 PUSH2 0x2297 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2566 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2583 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2290 DUP3 PUSH2 0x22AC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x25A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x25AD DUP2 PUSH2 0x2297 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x25BD DUP2 PUSH2 0x2297 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x25E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x25F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2600 DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x2436 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x261F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x262A DUP2 PUSH2 0x2297 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2566 DUP2 PUSH2 0x2297 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x264E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x9E4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x269E JUMPI PUSH2 0x269E PUSH2 0x266E JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x26C8 JUMPI PUSH2 0x26C8 PUSH2 0x26A3 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x768 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x270A JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2729 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2716 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x274B JUMPI PUSH2 0x274B PUSH2 0x2420 JUMP JUMPDEST PUSH2 0x275F DUP2 PUSH2 0x2759 DUP5 SLOAD PUSH2 0x263A JUMP JUMPDEST DUP5 PUSH2 0x26E3 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2794 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x277C JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x2729 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x27C3 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x27A4 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x27E1 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE PUSH1 0x0 DUP5 SLOAD PUSH2 0x2805 DUP2 PUSH2 0x263A JUMP JUMPDEST DUP1 DUP5 DUP8 ADD MSTORE PUSH1 0x40 PUSH1 0x1 DUP1 DUP5 AND PUSH1 0x0 DUP2 EQ PUSH2 0x2826 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x2840 JUMPI PUSH2 0x286E JUMP JUMPDEST PUSH1 0xFF NOT DUP6 AND DUP10 DUP5 ADD MSTORE DUP4 ISZERO ISZERO PUSH1 0x5 SHL DUP10 ADD DUP4 ADD SWAP6 POP PUSH2 0x286E JUMP JUMPDEST DUP10 PUSH1 0x0 MSTORE DUP7 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x2866 JUMPI DUP2 SLOAD DUP12 DUP3 ADD DUP7 ADD MSTORE SWAP1 DUP4 ADD SWAP1 DUP9 ADD PUSH2 0x284B JUMP JUMPDEST DUP11 ADD DUP5 ADD SWAP7 POP POP JUMPDEST POP SWAP4 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 SLOAD PUSH2 0x288A DUP2 PUSH2 0x263A JUMP JUMPDEST PUSH1 0x1 DUP3 DUP2 AND DUP1 ISZERO PUSH2 0x28A2 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x28B7 JUMPI PUSH2 0x28E6 JUMP JUMPDEST PUSH1 0xFF NOT DUP5 AND DUP8 MSTORE DUP3 ISZERO ISZERO DUP4 MUL DUP8 ADD SWAP5 POP PUSH2 0x28E6 JUMP JUMPDEST DUP9 PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x28DD JUMPI DUP2 SLOAD DUP11 DUP3 ADD MSTORE SWAP1 DUP5 ADD SWAP1 DUP3 ADD PUSH2 0x28C4 JUMP JUMPDEST POP POP POP DUP3 DUP8 ADD SWAP5 POP JUMPDEST POP POP POP POP DUP4 MLOAD PUSH2 0x28FA DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x231A JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2915 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2290 DUP2 PUSH2 0x2297 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x56C JUMPI PUSH2 0x56C PUSH2 0x266E JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x56C JUMPI PUSH2 0x56C PUSH2 0x266E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2958 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2971 JUMPI PUSH2 0x2971 PUSH2 0x266E JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2987 JUMPI PUSH2 0x2987 PUSH2 0x26A3 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x29BE PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x233E JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x29DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2290 DUP2 PUSH2 0x225D JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP EXP ",
          "sourceMap": "564:3942:28:-:0;;;1154:168;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1301:10;1247:5;1254:7;1456:5:10;:13;1247:5:28;1456::10;:13;:::i;:::-;-1:-1:-1;1479:7:10;:17;1489:7;1479;:17;:::i;:::-;-1:-1:-1;;996:7:2;:15;;-1:-1:-1;;996:15:2;;;-1:-1:-1;;;;;;649:33:45;;641:78;;;;-1:-1:-1;;;641:78:45;;4516:2:47;641:78:45;;;4498:21:47;;;4535:18;;;4528:30;4594:34;4574:18;;;4567:62;4646:18;;641:78:45;;;;;;;;730:9;:22;;-1:-1:-1;;;;;;730:22:45;;-1:-1:-1;;;;;730:22:45;;;;;;;;;;;;768:28;;4840:51:47;;;768:28:45;;4828:2:47;4813:18;768:28:45;;;;;;;595:209;1154:168:28;;;564:3942;;14:127:47;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:840;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:47;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:47;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;954:1;932:15;;;928:24;;;921:35;;;;936:6;146:840;-1:-1:-1;;;;146:840:47:o;991:729::-;1099:6;1107;1115;1168:2;1156:9;1147:7;1143:23;1139:32;1136:52;;;1184:1;1181;1174:12;1136:52;1211:16;;-1:-1:-1;;;;;1276:14:47;;;1273:34;;;1303:1;1300;1293:12;1273:34;1326:61;1379:7;1370:6;1359:9;1355:22;1326:61;:::i;:::-;1316:71;;1433:2;1422:9;1418:18;1412:25;1396:41;;1462:2;1452:8;1449:16;1446:36;;;1478:1;1475;1468:12;1446:36;;1501:63;1556:7;1545:8;1534:9;1530:24;1501:63;:::i;:::-;1607:2;1592:18;;1586:25;1491:73;;-1:-1:-1;1586:25:47;-1:-1:-1;;;;;;1640:31:47;;1630:42;;1620:70;;1686:1;1683;1676:12;1620:70;1709:5;1699:15;;;991:729;;;;;:::o;1725:380::-;1804:1;1800:12;;;;1847;;;1868:61;;1922:4;1914:6;1910:17;1900:27;;1868:61;1975:2;1967:6;1964:14;1944:18;1941:38;1938:161;;2021:10;2016:3;2012:20;2009:1;2002:31;2056:4;2053:1;2046:15;2084:4;2081:1;2074:15;1938:161;;1725:380;;;:::o;2236:545::-;2338:2;2333:3;2330:11;2327:448;;;2374:1;2399:5;2395:2;2388:17;2444:4;2440:2;2430:19;2514:2;2502:10;2498:19;2495:1;2491:27;2485:4;2481:38;2550:4;2538:10;2535:20;2532:47;;;-1:-1:-1;2573:4:47;2532:47;2628:2;2623:3;2619:12;2616:1;2612:20;2606:4;2602:31;2592:41;;2683:82;2701:2;2694:5;2691:13;2683:82;;;2746:17;;;2727:1;2716:13;2683:82;;;2687:3;;;2327:448;2236:545;;;:::o;2957:1352::-;3077:10;;-1:-1:-1;;;;;3099:30:47;;3096:56;;;3132:18;;:::i;:::-;3161:97;3251:6;3211:38;3243:4;3237:11;3211:38;:::i;:::-;3205:4;3161:97;:::i;:::-;3313:4;;3377:2;3366:14;;3394:1;3389:663;;;;4096:1;4113:6;4110:89;;;-1:-1:-1;4165:19:47;;;4159:26;4110:89;-1:-1:-1;;2914:1:47;2910:11;;;2906:24;2902:29;2892:40;2938:1;2934:11;;;2889:57;4212:81;;3359:944;;3389:663;2183:1;2176:14;;;2220:4;2207:18;;-1:-1:-1;;3425:20:47;;;3543:236;3557:7;3554:1;3551:14;3543:236;;;3646:19;;;3640:26;3625:42;;3738:27;;;;3706:1;3694:14;;;;3573:19;;3543:236;;;3547:3;3807:6;3798:7;3795:19;3792:201;;;3868:19;;;3862:26;-1:-1:-1;;3951:1:47;3947:14;;;3963:3;3943:24;3939:37;3935:42;3920:58;3905:74;;3792:201;-1:-1:-1;;;;;4039:1:47;4023:14;;;4019:22;4006:36;;-1:-1:-1;2957:1352:47:o;4675:222::-;564:3942:28;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@MINTER_ROLE_5944": {
              "entryPoint": null,
              "id": 5944,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_addTokenToAllTokensEnumeration_3586": {
              "entryPoint": null,
              "id": 3586,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_addTokenToOwnerEnumeration_3566": {
              "entryPoint": 8729,
              "id": 3566,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_afterTokenTransfer_3195": {
              "entryPoint": null,
              "id": 3195,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_approve_3065": {
              "entryPoint": 4972,
              "id": 3065,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_beforeTokenTransfer_3184": {
              "entryPoint": null,
              "id": 3184,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_beforeTokenTransfer_3536": {
              "entryPoint": 7659,
              "id": 3536,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_beforeTokenTransfer_6281": {
              "entryPoint": 6944,
              "id": 6281,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_burn_2966": {
              "entryPoint": 8177,
              "id": 2966,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_burn_3743": {
              "entryPoint": 7171,
              "id": 3743,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_burn_6300": {
              "entryPoint": 5937,
              "id": 6300,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_checkOnERC721Received_3173": {
              "entryPoint": 7263,
              "id": 3173,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@_exists_2762": {
              "entryPoint": null,
              "id": 2762,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_feeDenominator_3907": {
              "entryPoint": null,
              "id": 3907,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_isApprovedOrOwner_2796": {
              "entryPoint": 5082,
              "id": 2796,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_mint_2906": {
              "entryPoint": 7843,
              "id": 2906,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_msgSender_4307": {
              "entryPoint": null,
              "id": 4307,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_onlyGovernor_9745": {
              "entryPoint": 4342,
              "id": 9745,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_onlyRole_9804": {
              "entryPoint": 5656,
              "id": 9804,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_pause_222": {
              "entryPoint": 6233,
              "id": 222,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_random_6230": {
              "entryPoint": null,
              "id": 6230,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_removeTokenFromAllTokensEnumeration_3697": {
              "entryPoint": 8554,
              "id": 3697,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_removeTokenFromOwnerEnumeration_3649": {
              "entryPoint": 8397,
              "id": 3649,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_requireMinted_3111": {
              "entryPoint": 4872,
              "id": 3111,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_requireNotPaused_195": {
              "entryPoint": 7180,
              "id": 195,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_requirePaused_206": {
              "entryPoint": 7089,
              "id": 206,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_resetTokenRoyalty_3999": {
              "entryPoint": null,
              "id": 3999,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_safeMint_2811": {
              "entryPoint": 5829,
              "id": 2811,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_safeMint_2840": {
              "entryPoint": 6963,
              "id": 2840,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_safeTransfer_2744": {
              "entryPoint": 6500,
              "id": 2744,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@_setApprovalForAll_3097": {
              "entryPoint": 6294,
              "id": 3097,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_setDefaultRoyalty_3941": {
              "entryPoint": 4540,
              "id": 3941,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_setDna_6258": {
              "entryPoint": 4793,
              "id": 6258,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_setTokenRoyalty_3987": {
              "entryPoint": 5963,
              "id": 3987,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_transfer_3041": {
              "entryPoint": 5209,
              "id": 3041,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_unpause_238": {
              "entryPoint": 5855,
              "id": 238,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@approve_2586": {
              "entryPoint": 1619,
              "id": 2586,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@authority_9620": {
              "entryPoint": null,
              "id": 9620,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@automaticMint_6173": {
              "entryPoint": 2362,
              "id": 6173,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@balanceOf_2447": {
              "entryPoint": 3498,
              "id": 2447,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@baseURI_5946": {
              "entryPoint": 3356,
              "id": 5946,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@burn_3359": {
              "entryPoint": 2726,
              "id": 3359,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@changeDenominator_5994": {
              "entryPoint": 3872,
              "id": 5994,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@current_4335": {
              "entryPoint": null,
              "id": 4335,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@denominator_5948": {
              "entryPoint": null,
              "id": 5948,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@getApproved_2604": {
              "entryPoint": 1580,
              "id": 2604,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getDna_6207": {
              "entryPoint": 2556,
              "id": 6207,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@increment_4349": {
              "entryPoint": null,
              "id": 4349,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@indexDna_5952": {
              "entryPoint": null,
              "id": 5952,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@isApprovedForAll_2639": {
              "entryPoint": null,
              "id": 2639,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@isContract_4018": {
              "entryPoint": null,
              "id": 4018,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@name_2485": {
              "entryPoint": 1434,
              "id": 2485,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@ownerOf_2475": {
              "entryPoint": 3255,
              "id": 2475,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@pause_6094": {
              "entryPoint": 3775,
              "id": 6094,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@paused_183": {
              "entryPoint": null,
              "id": 183,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@royaltyInfo_3898": {
              "entryPoint": 2022,
              "id": 3898,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "@safeMint_6134": {
              "entryPoint": 3806,
              "id": 6134,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@safeTransferFrom_2685": {
              "entryPoint": 2699,
              "id": 2685,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@safeTransferFrom_2715": {
              "entryPoint": 3985,
              "id": 2715,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@setApprovalForAll_2621": {
              "entryPoint": 3861,
              "id": 2621,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@setAuthority_9731": {
              "entryPoint": 3652,
              "id": 9731,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setBaseURI_6047": {
              "entryPoint": 3010,
              "id": 6047,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@setDefaultRoyalty_6009": {
              "entryPoint": 1394,
              "id": 6009,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@setDna_6188": {
              "entryPoint": 1416,
              "id": 6188,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@setTokenRoyalty_6027": {
              "entryPoint": 3236,
              "id": 6027,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@supportsInterface_2423": {
              "entryPoint": 7595,
              "id": 2423,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@supportsInterface_3410": {
              "entryPoint": 6907,
              "id": 3410,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@supportsInterface_3725": {
              "entryPoint": 4331,
              "id": 3725,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@supportsInterface_3848": {
              "entryPoint": 8344,
              "id": 3848,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@supportsInterface_5142": {
              "entryPoint": null,
              "id": 5142,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@supportsInterface_6317": {
              "entryPoint": 1377,
              "id": 6317,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@symbol_2495": {
              "entryPoint": 3791,
              "id": 2495,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@toString_4479": {
              "entryPoint": 6626,
              "id": 4479,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@tokenByIndex_3472": {
              "entryPoint": 2846,
              "id": 3472,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@tokenOfOwnerByIndex_3438": {
              "entryPoint": 2194,
              "id": 3438,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@tokenURI_6085": {
              "entryPoint": 4112,
              "id": 6085,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@totalSupply_3449": {
              "entryPoint": null,
              "id": 3449,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@transferFrom_2666": {
              "entryPoint": 1901,
              "id": 2666,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@unpause_6103": {
              "entryPoint": 2538,
              "id": 6103,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "abi_decode_available_length_string": {
              "entryPoint": 9270,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": 9219,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address_fromMemory": {
              "entryPoint": 10499,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_addresst_address": {
              "entryPoint": 9740,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_addresst_uint256": {
              "entryPoint": 9154,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr": {
              "entryPoint": 9612,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_decode_tuple_t_addresst_bool": {
              "entryPoint": 9523,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_uint256": {
              "entryPoint": 9110,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_uint96": {
              "entryPoint": 8899,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_bytes32_fromMemory": {
              "entryPoint": 10566,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes4": {
              "entryPoint": 8819,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes4_fromMemory": {
              "entryPoint": 10696,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_contract$_IAuthority_$9130": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_string_memory_ptr": {
              "entryPoint": 9388,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256": {
              "entryPoint": 9085,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256t_addresst_uint96": {
              "entryPoint": 9461,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_uint256t_uint256": {
              "entryPoint": 8952,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_uint96": {
              "entryPoint": 9585,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_uint96": {
              "entryPoint": 8876,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_string": {
              "entryPoint": 9022,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 10364,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_uint256_t_uint256_t_uint256_t_address_payable__to_t_uint256_t_uint256_t_uint256_t_address_payable__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
              "entryPoint": 10636,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_IAuthority_$9130__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 9066,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_storage__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 10225,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_d20a09dd8b4080dbbc254e38d9f607ef83a2c7a38b671ae8f8f162ffe46e2084__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint96__to_t_uint96__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "array_dataslot_string_storage": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "checked_add_t_uint256": {
              "entryPoint": 10547,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_div_t_uint256": {
              "entryPoint": 9913,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_mul_t_uint256": {
              "entryPoint": 9860,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint256": {
              "entryPoint": 10528,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "clean_up_bytearray_end_slots_string_storage": {
              "entryPoint": 9955,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
              "entryPoint": 10033,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "copy_memory_to_memory_with_cleanup": {
              "entryPoint": 8986,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "extract_byte_array_length": {
              "entryPoint": 9786,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "extract_used_part_and_set_length_of_short_byte_array": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "increment_t_uint256": {
              "entryPoint": 10591,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "mod_t_uint256": {
              "entryPoint": 10616,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "panic_error_0x11": {
              "entryPoint": 9838,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x12": {
              "entryPoint": 9891,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x31": {
              "entryPoint": 10725,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x32": {
              "entryPoint": 9933,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 9248,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "validator_revert_address": {
              "entryPoint": 8855,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_bytes4": {
              "entryPoint": 8797,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:24087:47",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:47",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "58:87:47",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "123:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "132:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "135:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "125:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "125:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "125:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "81:5:47"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "92:5:47"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "103:3:47",
                                            "type": "",
                                            "value": "224"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "108:10:47",
                                            "type": "",
                                            "value": "0xffffffff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "99:3:47"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "99:20:47"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "88:3:47"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "88:32:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "78:2:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "78:43:47"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "71:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "71:51:47"
                          },
                          "nodeType": "YulIf",
                          "src": "68:71:47"
                        }
                      ]
                    },
                    "name": "validator_revert_bytes4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "47:5:47",
                        "type": ""
                      }
                    ],
                    "src": "14:131:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "219:176:47",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "265:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "274:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "277:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "267:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "267:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "267:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "240:7:47"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "249:9:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "236:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "236:23:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "261:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "232:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "232:32:47"
                          },
                          "nodeType": "YulIf",
                          "src": "229:52:47"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "290:36:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "316:9:47"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "303:12:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "303:23:47"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "294:5:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "359:5:47"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bytes4",
                              "nodeType": "YulIdentifier",
                              "src": "335:23:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "335:30:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "335:30:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "374:15:47",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "384:5:47"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "374:6:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "185:9:47",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "196:7:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "208:6:47",
                        "type": ""
                      }
                    ],
                    "src": "150:245:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "495:92:47",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "505:26:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "517:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "528:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "513:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "513:18:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "505:4:47"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "547:9:47"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "572:6:47"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "565:6:47"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "565:14:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "558:6:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "558:22:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "540:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "540:41:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "540:41:47"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "464:9:47",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "475:6:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "486:4:47",
                        "type": ""
                      }
                    ],
                    "src": "400:187:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "637:109:47",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "724:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "733:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "736:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "726:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "726:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "726:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "660:5:47"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "671:5:47"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "678:42:47",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "667:3:47"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "667:54:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "657:2:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "657:65:47"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "650:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "650:73:47"
                          },
                          "nodeType": "YulIf",
                          "src": "647:93:47"
                        }
                      ]
                    },
                    "name": "validator_revert_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "626:5:47",
                        "type": ""
                      }
                    ],
                    "src": "592:154:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "799:131:47",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "809:29:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "831:6:47"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "818:12:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "818:20:47"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "809:5:47"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "908:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "917:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "920:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "910:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "910:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "910:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "860:5:47"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "871:5:47"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "878:26:47",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "867:3:47"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "867:38:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "857:2:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "857:49:47"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "850:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "850:57:47"
                          },
                          "nodeType": "YulIf",
                          "src": "847:77:47"
                        }
                      ]
                    },
                    "name": "abi_decode_uint96",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "778:6:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "789:5:47",
                        "type": ""
                      }
                    ],
                    "src": "751:179:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1021:233:47",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1067:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1076:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1079:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1069:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1069:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1069:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1042:7:47"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1051:9:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1038:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1038:23:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1063:2:47",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1034:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1034:32:47"
                          },
                          "nodeType": "YulIf",
                          "src": "1031:52:47"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1092:36:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1118:9:47"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1105:12:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1105:23:47"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "1096:5:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1162:5:47"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "1137:24:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1137:31:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1137:31:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1177:15:47",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1187:5:47"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1177:6:47"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1201:47:47",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1233:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1244:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1229:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1229:18:47"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint96",
                              "nodeType": "YulIdentifier",
                              "src": "1211:17:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1211:37:47"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1201:6:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint96",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "979:9:47",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "990:7:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1002:6:47",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1010:6:47",
                        "type": ""
                      }
                    ],
                    "src": "935:319:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1346:161:47",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1392:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1401:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1404:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1394:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1394:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1394:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1367:7:47"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1376:9:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1363:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1363:23:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1388:2:47",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1359:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1359:32:47"
                          },
                          "nodeType": "YulIf",
                          "src": "1356:52:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1417:33:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1440:9:47"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1427:12:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1427:23:47"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1417:6:47"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1459:42:47",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1486:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1497:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1482:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1482:18:47"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1469:12:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1469:32:47"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1459:6:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1304:9:47",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1315:7:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1327:6:47",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1335:6:47",
                        "type": ""
                      }
                    ],
                    "src": "1259:248:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1578:184:47",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1588:10:47",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1597:1:47",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "1592:1:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1657:63:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "1682:3:47"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "1687:1:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1678:3:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1678:11:47"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "1701:3:47"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "1706:1:47"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "1697:3:47"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1697:11:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "1691:5:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1691:18:47"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "1671:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1671:39:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1671:39:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "1618:1:47"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1621:6:47"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "1615:2:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1615:13:47"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "1629:19:47",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "1631:15:47",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "1640:1:47"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1643:2:47",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "1636:3:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1636:10:47"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "1631:1:47"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "1611:3:47",
                            "statements": []
                          },
                          "src": "1607:113:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "1740:3:47"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "1745:6:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1736:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1736:16:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1754:1:47",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1729:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1729:27:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1729:27:47"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory_with_cleanup",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "1556:3:47",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "1561:3:47",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "1566:6:47",
                        "type": ""
                      }
                    ],
                    "src": "1512:250:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1817:221:47",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1827:26:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1847:5:47"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1841:5:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1841:12:47"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "1831:6:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "1869:3:47"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1874:6:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1862:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1862:19:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1862:19:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1929:5:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1936:4:47",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1925:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1925:16:47"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "1947:3:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1952:4:47",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1943:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1943:14:47"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1959:6:47"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nodeType": "YulIdentifier",
                              "src": "1890:34:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1890:76:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1890:76:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1975:57:47",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "1990:3:47"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "2003:6:47"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2011:2:47",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "1999:3:47"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1999:15:47"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2020:2:47",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "2016:3:47"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2016:7:47"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1995:3:47"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1995:29:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1986:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1986:39:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2027:4:47",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1982:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1982:50:47"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "1975:3:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_string",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1794:5:47",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "1801:3:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "1809:3:47",
                        "type": ""
                      }
                    ],
                    "src": "1767:271:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2164:99:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2181:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2192:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2174:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2174:21:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2174:21:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2204:53:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "2230:6:47"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2242:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2253:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2238:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2238:18:47"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "2212:17:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2212:45:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2204:4:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2133:9:47",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2144:6:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2155:4:47",
                        "type": ""
                      }
                    ],
                    "src": "2043:220:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2338:110:47",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2384:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2393:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2396:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2386:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2386:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2386:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2359:7:47"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2368:9:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2355:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2355:23:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2380:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2351:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2351:32:47"
                          },
                          "nodeType": "YulIf",
                          "src": "2348:52:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2409:33:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2432:9:47"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2419:12:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2419:23:47"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2409:6:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2304:9:47",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2315:7:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2327:6:47",
                        "type": ""
                      }
                    ],
                    "src": "2268:180:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2554:125:47",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2564:26:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2576:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2587:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2572:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2572:18:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2564:4:47"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2606:9:47"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "2621:6:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2629:42:47",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2617:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2617:55:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2599:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2599:74:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2599:74:47"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2523:9:47",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2534:6:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2545:4:47",
                        "type": ""
                      }
                    ],
                    "src": "2453:226:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2771:228:47",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2817:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2826:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2829:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2819:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2819:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2819:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2792:7:47"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2801:9:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2788:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2788:23:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2813:2:47",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2784:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2784:32:47"
                          },
                          "nodeType": "YulIf",
                          "src": "2781:52:47"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2842:36:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2868:9:47"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2855:12:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2855:23:47"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "2846:5:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2912:5:47"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "2887:24:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2887:31:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2887:31:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2927:15:47",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2937:5:47"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2927:6:47"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2951:42:47",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2978:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2989:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2974:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2974:18:47"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2961:12:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2961:32:47"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "2951:6:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2729:9:47",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2740:7:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2752:6:47",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2760:6:47",
                        "type": ""
                      }
                    ],
                    "src": "2684:315:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3105:76:47",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3115:26:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3127:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3138:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3123:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3123:18:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3115:4:47"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3157:9:47"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "3168:6:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3150:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3150:25:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3150:25:47"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3074:9:47",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3085:6:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3096:4:47",
                        "type": ""
                      }
                    ],
                    "src": "3004:177:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3290:352:47",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3336:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3345:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3348:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3338:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3338:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3338:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3311:7:47"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3320:9:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3307:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3307:23:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3332:2:47",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3303:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3303:32:47"
                          },
                          "nodeType": "YulIf",
                          "src": "3300:52:47"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3361:36:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3387:9:47"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3374:12:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3374:23:47"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "3365:5:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3431:5:47"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "3406:24:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3406:31:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3406:31:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3446:15:47",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "3456:5:47"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3446:6:47"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3470:47:47",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3502:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3513:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3498:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3498:18:47"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3485:12:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3485:32:47"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "3474:7:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "3551:7:47"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "3526:24:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3526:33:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3526:33:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3568:17:47",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "3578:7:47"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "3568:6:47"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3594:42:47",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3621:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3632:2:47",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3617:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3617:18:47"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3604:12:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3604:32:47"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "3594:6:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3240:9:47",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3251:7:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3263:6:47",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "3271:6:47",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "3279:6:47",
                        "type": ""
                      }
                    ],
                    "src": "3186:456:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3776:168:47",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3786:26:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3798:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3809:2:47",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3794:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3794:18:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3786:4:47"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3828:9:47"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "3843:6:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3851:42:47",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "3839:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3839:55:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3821:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3821:74:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3821:74:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3915:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3926:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3911:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3911:18:47"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "3931:6:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3904:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3904:34:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3904:34:47"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3737:9:47",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "3748:6:47",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3756:6:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3767:4:47",
                        "type": ""
                      }
                    ],
                    "src": "3647:297:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4019:177:47",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4065:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4074:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4077:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4067:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4067:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4067:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4040:7:47"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4049:9:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4036:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4036:23:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4061:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4032:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4032:32:47"
                          },
                          "nodeType": "YulIf",
                          "src": "4029:52:47"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4090:36:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4116:9:47"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4103:12:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4103:23:47"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "4094:5:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "4160:5:47"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "4135:24:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4135:31:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4135:31:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4175:15:47",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "4185:5:47"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4175:6:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3985:9:47",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3996:7:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4008:6:47",
                        "type": ""
                      }
                    ],
                    "src": "3949:247:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4233:95:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4250:1:47",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4257:3:47",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4262:10:47",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "4253:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4253:20:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4243:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4243:31:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4243:31:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4290:1:47",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4293:4:47",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4283:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4283:15:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4283:15:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4314:1:47",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4317:4:47",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "4307:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4307:15:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4307:15:47"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "4201:127:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4408:557:47",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4418:28:47",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4428:18:47",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "4422:2:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4473:22:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "4475:16:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4475:18:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4475:18:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "4461:6:47"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4469:2:47"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4458:2:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4458:14:47"
                          },
                          "nodeType": "YulIf",
                          "src": "4455:40:47"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4504:17:47",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4518:2:47",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "4514:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4514:7:47"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "4508:2:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4530:23:47",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4550:2:47",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "4544:5:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4544:9:47"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "4534:6:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4562:73:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "4584:6:47"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "length",
                                                "nodeType": "YulIdentifier",
                                                "src": "4608:6:47"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "4616:2:47",
                                                "type": "",
                                                "value": "31"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "4604:3:47"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "4604:15:47"
                                          },
                                          {
                                            "name": "_2",
                                            "nodeType": "YulIdentifier",
                                            "src": "4621:2:47"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "4600:3:47"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4600:24:47"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4626:2:47",
                                        "type": "",
                                        "value": "63"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4596:3:47"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4596:33:47"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "4631:2:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "4592:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4592:42:47"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4580:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4580:55:47"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "4566:10:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4694:22:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "4696:16:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4696:18:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4696:18:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "4653:10:47"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4665:2:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "4650:2:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4650:18:47"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "4673:10:47"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "4685:6:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "4670:2:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4670:22:47"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "4647:2:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4647:46:47"
                          },
                          "nodeType": "YulIf",
                          "src": "4644:72:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4732:2:47",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "4736:10:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4725:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4725:22:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4725:22:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4756:15:47",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "4765:6:47"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "4756:5:47"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "4787:6:47"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "4795:6:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4780:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4780:22:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4780:22:47"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4840:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4849:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4852:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4842:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4842:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4842:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "4821:3:47"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "4826:6:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4817:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4817:16:47"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "4835:3:47"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4814:2:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4814:25:47"
                          },
                          "nodeType": "YulIf",
                          "src": "4811:45:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "4882:6:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4890:4:47",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4878:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4878:17:47"
                              },
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "4897:3:47"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "4902:6:47"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "4865:12:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4865:44:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4865:44:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "memPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "4933:6:47"
                                      },
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "4941:6:47"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4929:3:47"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4929:19:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4950:4:47",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4925:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4925:30:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4957:1:47",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4918:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4918:41:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4918:41:47"
                        }
                      ]
                    },
                    "name": "abi_decode_available_length_string",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "4377:3:47",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "4382:6:47",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "4390:3:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "4398:5:47",
                        "type": ""
                      }
                    ],
                    "src": "4333:632:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5050:371:47",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5096:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5105:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5108:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5098:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5098:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5098:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5071:7:47"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5080:9:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5067:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5067:23:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5092:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5063:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5063:32:47"
                          },
                          "nodeType": "YulIf",
                          "src": "5060:52:47"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5121:37:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5148:9:47"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5135:12:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5135:23:47"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "5125:6:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5201:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5210:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5213:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5203:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5203:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5203:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "5173:6:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5181:18:47",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "5170:2:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5170:30:47"
                          },
                          "nodeType": "YulIf",
                          "src": "5167:50:47"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5226:32:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5240:9:47"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "5251:6:47"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5236:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5236:22:47"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "5230:2:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5306:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5315:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5318:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5308:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5308:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5308:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "5285:2:47"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5289:4:47",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5281:3:47"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5281:13:47"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5296:7:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "5277:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5277:27:47"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "5270:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5270:35:47"
                          },
                          "nodeType": "YulIf",
                          "src": "5267:55:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5331:84:47",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5380:2:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5384:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5376:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5376:11:47"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5402:2:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "5389:12:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5389:16:47"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "5407:7:47"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_available_length_string",
                              "nodeType": "YulIdentifier",
                              "src": "5341:34:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5341:74:47"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5331:6:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_string_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5016:9:47",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5027:7:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5039:6:47",
                        "type": ""
                      }
                    ],
                    "src": "4970:451:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5529:284:47",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5575:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5584:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5587:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5577:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5577:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5577:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5550:7:47"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5559:9:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5546:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5546:23:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5571:2:47",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5542:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5542:32:47"
                          },
                          "nodeType": "YulIf",
                          "src": "5539:52:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5600:33:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5623:9:47"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5610:12:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5610:23:47"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5600:6:47"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5642:45:47",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5672:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5683:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5668:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5668:18:47"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5655:12:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5655:32:47"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "5646:5:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "5721:5:47"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "5696:24:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5696:31:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5696:31:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5736:15:47",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "5746:5:47"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "5736:6:47"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5760:47:47",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5792:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5803:2:47",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5788:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5788:18:47"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint96",
                              "nodeType": "YulIdentifier",
                              "src": "5770:17:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5770:37:47"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "5760:6:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_addresst_uint96",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5479:9:47",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5490:7:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5502:6:47",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "5510:6:47",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "5518:6:47",
                        "type": ""
                      }
                    ],
                    "src": "5426:387:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5907:177:47",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5953:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5962:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5965:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5955:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5955:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5955:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5928:7:47"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5937:9:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5924:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5924:23:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5949:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5920:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5920:32:47"
                          },
                          "nodeType": "YulIf",
                          "src": "5917:52:47"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5978:36:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6004:9:47"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5991:12:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5991:23:47"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "5982:5:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "6048:5:47"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "6023:24:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6023:31:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6023:31:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6063:15:47",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "6073:5:47"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "6063:6:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_contract$_IAuthority_$9130",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5873:9:47",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5884:7:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5896:6:47",
                        "type": ""
                      }
                    ],
                    "src": "5818:266:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6188:109:47",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6198:26:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6210:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6221:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6206:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6206:18:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6198:4:47"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6240:9:47"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "6255:6:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6263:26:47",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "6251:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6251:39:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6233:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6233:58:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6233:58:47"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint96__to_t_uint96__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6157:9:47",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6168:6:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6179:4:47",
                        "type": ""
                      }
                    ],
                    "src": "6089:208:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6386:332:47",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6432:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6441:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6444:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6434:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6434:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6434:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6407:7:47"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6416:9:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6403:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6403:23:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6428:2:47",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "6399:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6399:32:47"
                          },
                          "nodeType": "YulIf",
                          "src": "6396:52:47"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6457:36:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6483:9:47"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6470:12:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6470:23:47"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "6461:5:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "6527:5:47"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "6502:24:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6502:31:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6502:31:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6542:15:47",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "6552:5:47"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "6542:6:47"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6566:47:47",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6598:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6609:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6594:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6594:18:47"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6581:12:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6581:32:47"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "6570:7:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6670:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6679:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6682:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6672:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6672:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6672:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6635:7:47"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "6658:7:47"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "6651:6:47"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6651:15:47"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "6644:6:47"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6644:23:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "6632:2:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6632:36:47"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "6625:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6625:44:47"
                          },
                          "nodeType": "YulIf",
                          "src": "6622:64:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6695:17:47",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "6705:7:47"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "6695:6:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_bool",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6344:9:47",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "6355:7:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6367:6:47",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "6375:6:47",
                        "type": ""
                      }
                    ],
                    "src": "6302:416:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6792:115:47",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6838:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6847:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6850:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6840:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6840:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6840:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6813:7:47"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6822:9:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6809:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6809:23:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6834:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "6805:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6805:32:47"
                          },
                          "nodeType": "YulIf",
                          "src": "6802:52:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6863:38:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6891:9:47"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint96",
                              "nodeType": "YulIdentifier",
                              "src": "6873:17:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6873:28:47"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "6863:6:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint96",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6758:9:47",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "6769:7:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6781:6:47",
                        "type": ""
                      }
                    ],
                    "src": "6723:184:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7042:665:47",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7089:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7098:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7101:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7091:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7091:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7091:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7063:7:47"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7072:9:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "7059:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7059:23:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7084:3:47",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "7055:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7055:33:47"
                          },
                          "nodeType": "YulIf",
                          "src": "7052:53:47"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7114:36:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7140:9:47"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7127:12:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7127:23:47"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "7118:5:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "7184:5:47"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "7159:24:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7159:31:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7159:31:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7199:15:47",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "7209:5:47"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "7199:6:47"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7223:47:47",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7255:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7266:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7251:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7251:18:47"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7238:12:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7238:32:47"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "7227:7:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "7304:7:47"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "7279:24:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7279:33:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7279:33:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7321:17:47",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "7331:7:47"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "7321:6:47"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7347:42:47",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7374:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7385:2:47",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7370:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7370:18:47"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7357:12:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7357:32:47"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "7347:6:47"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7398:46:47",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7429:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7440:2:47",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7425:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7425:18:47"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7412:12:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7412:32:47"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "7402:6:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7487:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7496:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7499:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7489:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7489:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7489:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "7459:6:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7467:18:47",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "7456:2:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7456:30:47"
                          },
                          "nodeType": "YulIf",
                          "src": "7453:50:47"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7512:32:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7526:9:47"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "7537:6:47"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7522:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7522:22:47"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "7516:2:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7592:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7601:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7604:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7594:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7594:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7594:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "7571:2:47"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7575:4:47",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7567:3:47"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7567:13:47"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7582:7:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "7563:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7563:27:47"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "7556:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7556:35:47"
                          },
                          "nodeType": "YulIf",
                          "src": "7553:55:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7617:84:47",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7666:2:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7670:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7662:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7662:11:47"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7688:2:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "7675:12:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7675:16:47"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "7693:7:47"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_available_length_string",
                              "nodeType": "YulIdentifier",
                              "src": "7627:34:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7627:74:47"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "7617:6:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6984:9:47",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "6995:7:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7007:6:47",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "7015:6:47",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "7023:6:47",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "7031:6:47",
                        "type": ""
                      }
                    ],
                    "src": "6912:795:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7832:125:47",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7842:26:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7854:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7865:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7850:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7850:18:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7842:4:47"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7884:9:47"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "7899:6:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7907:42:47",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7895:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7895:55:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7877:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7877:74:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7877:74:47"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_IAuthority_$9130__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7801:9:47",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7812:6:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7823:4:47",
                        "type": ""
                      }
                    ],
                    "src": "7712:245:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8063:76:47",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8073:26:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8085:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8096:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8081:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8081:18:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8073:4:47"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8115:9:47"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "8126:6:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8108:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8108:25:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8108:25:47"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8032:9:47",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8043:6:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8054:4:47",
                        "type": ""
                      }
                    ],
                    "src": "7962:177:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8231:301:47",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8277:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8286:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8289:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8279:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8279:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8279:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "8252:7:47"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8261:9:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "8248:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8248:23:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8273:2:47",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "8244:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8244:32:47"
                          },
                          "nodeType": "YulIf",
                          "src": "8241:52:47"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8302:36:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8328:9:47"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8315:12:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8315:23:47"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "8306:5:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "8372:5:47"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "8347:24:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8347:31:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8347:31:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8387:15:47",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "8397:5:47"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "8387:6:47"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8411:47:47",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8443:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8454:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8439:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8439:18:47"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8426:12:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8426:32:47"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "8415:7:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "8492:7:47"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "8467:24:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8467:33:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8467:33:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8509:17:47",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "8519:7:47"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "8509:6:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8189:9:47",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "8200:7:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8212:6:47",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "8220:6:47",
                        "type": ""
                      }
                    ],
                    "src": "8144:388:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8592:325:47",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8602:22:47",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8616:1:47",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "8619:4:47"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "8612:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8612:12:47"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "8602:6:47"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8633:38:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "8663:4:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8669:1:47",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "8659:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8659:12:47"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "8637:18:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8710:31:47",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "8712:27:47",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "8726:6:47"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8734:4:47",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "8722:3:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8722:17:47"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "8712:6:47"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "8690:18:47"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "8683:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8683:26:47"
                          },
                          "nodeType": "YulIf",
                          "src": "8680:61:47"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8800:111:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8821:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "8828:3:47",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "8833:10:47",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "8824:3:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8824:20:47"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "8814:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8814:31:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8814:31:47"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8865:1:47",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8868:4:47",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "8858:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8858:15:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8858:15:47"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8893:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8896:4:47",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8886:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8886:15:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8886:15:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "8756:18:47"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "8779:6:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8787:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "8776:2:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8776:14:47"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "8753:2:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8753:38:47"
                          },
                          "nodeType": "YulIf",
                          "src": "8750:161:47"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "8572:4:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "8581:6:47",
                        "type": ""
                      }
                    ],
                    "src": "8537:380:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9096:223:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9113:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9124:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9106:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9106:21:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9106:21:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9147:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9158:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9143:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9143:18:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9163:2:47",
                                "type": "",
                                "value": "33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9136:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9136:30:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9136:30:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9186:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9197:2:47",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9182:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9182:18:47"
                              },
                              {
                                "hexValue": "4552433732313a20617070726f76616c20746f2063757272656e74206f776e65",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9202:34:47",
                                "type": "",
                                "value": "ERC721: approval to current owne"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9175:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9175:62:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9175:62:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9257:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9268:2:47",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9253:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9253:18:47"
                              },
                              {
                                "hexValue": "72",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9273:3:47",
                                "type": "",
                                "value": "r"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9246:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9246:31:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9246:31:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9286:27:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9298:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9309:3:47",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9294:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9294:19:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9286:4:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9073:9:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9087:4:47",
                        "type": ""
                      }
                    ],
                    "src": "8922:397:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9498:252:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9515:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9526:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9508:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9508:21:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9508:21:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9549:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9560:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9545:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9545:18:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9565:2:47",
                                "type": "",
                                "value": "62"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9538:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9538:30:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9538:30:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9588:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9599:2:47",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9584:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9584:18:47"
                              },
                              {
                                "hexValue": "4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9604:34:47",
                                "type": "",
                                "value": "ERC721: approve caller is not to"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9577:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9577:62:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9577:62:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9659:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9670:2:47",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9655:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9655:18:47"
                              },
                              {
                                "hexValue": "6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9675:32:47",
                                "type": "",
                                "value": "ken owner nor approved for all"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9648:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9648:60:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9648:60:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9717:27:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9729:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9740:3:47",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9725:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9725:19:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9717:4:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9475:9:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9489:4:47",
                        "type": ""
                      }
                    ],
                    "src": "9324:426:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9929:236:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9946:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9957:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9939:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9939:21:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9939:21:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9980:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9991:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9976:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9976:18:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9996:2:47",
                                "type": "",
                                "value": "46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9969:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9969:30:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9969:30:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10019:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10030:2:47",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10015:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10015:18:47"
                              },
                              {
                                "hexValue": "4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10035:34:47",
                                "type": "",
                                "value": "ERC721: caller is not token owne"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10008:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10008:62:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10008:62:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10090:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10101:2:47",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10086:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10086:18:47"
                              },
                              {
                                "hexValue": "72206e6f7220617070726f766564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10106:16:47",
                                "type": "",
                                "value": "r nor approved"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10079:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10079:44:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10079:44:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10132:27:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10144:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10155:3:47",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10140:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10140:19:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10132:4:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9906:9:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9920:4:47",
                        "type": ""
                      }
                    ],
                    "src": "9755:410:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10202:95:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10219:1:47",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10226:3:47",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10231:10:47",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "10222:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10222:20:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10212:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10212:31:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10212:31:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10259:1:47",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10262:4:47",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10252:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10252:15:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10252:15:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10283:1:47",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10286:4:47",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "10276:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10276:15:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10276:15:47"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "10170:127:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10354:116:47",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10413:22:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "10415:16:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10415:18:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10415:18:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "10385:1:47"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "10378:6:47"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10378:9:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "10371:6:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10371:17:47"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "10393:1:47"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "10404:1:47",
                                            "type": "",
                                            "value": "0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "10400:3:47"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "10400:6:47"
                                      },
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "10408:1:47"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "div",
                                      "nodeType": "YulIdentifier",
                                      "src": "10396:3:47"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10396:14:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "10390:2:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10390:21:47"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "10367:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10367:45:47"
                          },
                          "nodeType": "YulIf",
                          "src": "10364:71:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10444:20:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "10459:1:47"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "10462:1:47"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "10455:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10455:9:47"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "10444:7:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "10333:1:47",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "10336:1:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "10342:7:47",
                        "type": ""
                      }
                    ],
                    "src": "10302:168:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10507:95:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10524:1:47",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10531:3:47",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10536:10:47",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "10527:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10527:20:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10517:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10517:31:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10517:31:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10564:1:47",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10567:4:47",
                                "type": "",
                                "value": "0x12"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10557:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10557:15:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10557:15:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10588:1:47",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10591:4:47",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "10581:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10581:15:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10581:15:47"
                        }
                      ]
                    },
                    "name": "panic_error_0x12",
                    "nodeType": "YulFunctionDefinition",
                    "src": "10475:127:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10653:74:47",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10676:22:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "10678:16:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10678:18:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10678:18:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "10673:1:47"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "10666:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10666:9:47"
                          },
                          "nodeType": "YulIf",
                          "src": "10663:35:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10707:14:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "10716:1:47"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "10719:1:47"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "10712:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10712:9:47"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "10707:1:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_div_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "10638:1:47",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "10641:1:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "10647:1:47",
                        "type": ""
                      }
                    ],
                    "src": "10607:120:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10906:233:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10923:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10934:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10916:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10916:21:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10916:21:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10957:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10968:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10953:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10953:18:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10973:2:47",
                                "type": "",
                                "value": "43"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10946:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10946:30:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10946:30:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10996:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11007:2:47",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10992:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10992:18:47"
                              },
                              {
                                "hexValue": "455243373231456e756d657261626c653a206f776e657220696e646578206f75",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11012:34:47",
                                "type": "",
                                "value": "ERC721Enumerable: owner index ou"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10985:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10985:62:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10985:62:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11067:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11078:2:47",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11063:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11063:18:47"
                              },
                              {
                                "hexValue": "74206f6620626f756e6473",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11083:13:47",
                                "type": "",
                                "value": "t of bounds"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11056:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11056:41:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11056:41:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11106:27:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11118:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11129:3:47",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11114:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11114:19:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11106:4:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10883:9:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10897:4:47",
                        "type": ""
                      }
                    ],
                    "src": "10732:407:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11318:237:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11335:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11346:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11328:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11328:21:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11328:21:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11369:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11380:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11365:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11365:18:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11385:2:47",
                                "type": "",
                                "value": "47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11358:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11358:30:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11358:30:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11408:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11419:2:47",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11404:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11404:18:47"
                              },
                              {
                                "hexValue": "4552433732314d657461646174613a2055524920717565727920666f72206e6f",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11424:34:47",
                                "type": "",
                                "value": "ERC721Metadata: URI query for no"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11397:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11397:62:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11397:62:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11479:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11490:2:47",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11475:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11475:18:47"
                              },
                              {
                                "hexValue": "6e6578697374656e7420746f6b656e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11495:17:47",
                                "type": "",
                                "value": "nexistent token"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11468:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11468:45:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11468:45:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11522:27:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11534:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11545:3:47",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11530:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11530:19:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11522:4:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11295:9:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11309:4:47",
                        "type": ""
                      }
                    ],
                    "src": "11144:411:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11734:234:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11751:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11762:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11744:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11744:21:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11744:21:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11785:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11796:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11781:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11781:18:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11801:2:47",
                                "type": "",
                                "value": "44"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11774:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11774:30:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11774:30:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11824:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11835:2:47",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11820:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11820:18:47"
                              },
                              {
                                "hexValue": "455243373231456e756d657261626c653a20676c6f62616c20696e646578206f",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11840:34:47",
                                "type": "",
                                "value": "ERC721Enumerable: global index o"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11813:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11813:62:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11813:62:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11895:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11906:2:47",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11891:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11891:18:47"
                              },
                              {
                                "hexValue": "7574206f6620626f756e6473",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11911:14:47",
                                "type": "",
                                "value": "ut of bounds"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11884:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11884:42:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11884:42:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11935:27:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11947:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11958:3:47",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11943:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11943:19:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11935:4:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11711:9:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11725:4:47",
                        "type": ""
                      }
                    ],
                    "src": "11560:408:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12005:95:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12022:1:47",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12029:3:47",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12034:10:47",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "12025:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12025:20:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12015:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12015:31:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12015:31:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12062:1:47",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12065:4:47",
                                "type": "",
                                "value": "0x32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12055:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12055:15:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12055:15:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12086:1:47",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12089:4:47",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "12079:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12079:15:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12079:15:47"
                        }
                      ]
                    },
                    "name": "panic_error_0x32",
                    "nodeType": "YulFunctionDefinition",
                    "src": "11973:127:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12161:65:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12178:1:47",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "name": "ptr",
                                "nodeType": "YulIdentifier",
                                "src": "12181:3:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12171:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12171:14:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12171:14:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12194:26:47",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12212:1:47",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12215:4:47",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "keccak256",
                              "nodeType": "YulIdentifier",
                              "src": "12202:9:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12202:18:47"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nodeType": "YulIdentifier",
                              "src": "12194:4:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_dataslot_string_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nodeType": "YulTypedName",
                        "src": "12144:3:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "12152:4:47",
                        "type": ""
                      }
                    ],
                    "src": "12105:121:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12312:464:47",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12345:425:47",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "12359:11:47",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "12369:1:47",
                                  "type": "",
                                  "value": "0"
                                },
                                "variables": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulTypedName",
                                    "src": "12363:2:47",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "12390:2:47"
                                    },
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "12394:5:47"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "12383:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12383:17:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12383:17:47"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "12413:31:47",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "12435:2:47"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12439:4:47",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "keccak256",
                                    "nodeType": "YulIdentifier",
                                    "src": "12425:9:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12425:19:47"
                                },
                                "variables": [
                                  {
                                    "name": "data",
                                    "nodeType": "YulTypedName",
                                    "src": "12417:4:47",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "12457:57:47",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "data",
                                      "nodeType": "YulIdentifier",
                                      "src": "12480:4:47"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "12490:1:47",
                                          "type": "",
                                          "value": "5"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "startIndex",
                                              "nodeType": "YulIdentifier",
                                              "src": "12497:10:47"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "12509:2:47",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "12493:3:47"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "12493:19:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shr",
                                        "nodeType": "YulIdentifier",
                                        "src": "12486:3:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "12486:27:47"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "12476:3:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12476:38:47"
                                },
                                "variables": [
                                  {
                                    "name": "deleteStart",
                                    "nodeType": "YulTypedName",
                                    "src": "12461:11:47",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "12551:23:47",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "12553:19:47",
                                      "value": {
                                        "name": "data",
                                        "nodeType": "YulIdentifier",
                                        "src": "12568:4:47"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "deleteStart",
                                          "nodeType": "YulIdentifier",
                                          "src": "12553:11:47"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "startIndex",
                                      "nodeType": "YulIdentifier",
                                      "src": "12533:10:47"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12545:4:47",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nodeType": "YulIdentifier",
                                    "src": "12530:2:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12530:20:47"
                                },
                                "nodeType": "YulIf",
                                "src": "12527:47:47"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "12587:41:47",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "data",
                                      "nodeType": "YulIdentifier",
                                      "src": "12601:4:47"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "12611:1:47",
                                          "type": "",
                                          "value": "5"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "len",
                                              "nodeType": "YulIdentifier",
                                              "src": "12618:3:47"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "12623:2:47",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "12614:3:47"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "12614:12:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shr",
                                        "nodeType": "YulIdentifier",
                                        "src": "12607:3:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "12607:20:47"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "12597:3:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12597:31:47"
                                },
                                "variables": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulTypedName",
                                    "src": "12591:2:47",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "12641:24:47",
                                "value": {
                                  "name": "deleteStart",
                                  "nodeType": "YulIdentifier",
                                  "src": "12654:11:47"
                                },
                                "variables": [
                                  {
                                    "name": "start",
                                    "nodeType": "YulTypedName",
                                    "src": "12645:5:47",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "12739:21:47",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "start",
                                            "nodeType": "YulIdentifier",
                                            "src": "12748:5:47"
                                          },
                                          {
                                            "name": "_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "12755:2:47"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sstore",
                                          "nodeType": "YulIdentifier",
                                          "src": "12741:6:47"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "12741:17:47"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "12741:17:47"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "start",
                                      "nodeType": "YulIdentifier",
                                      "src": "12689:5:47"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "12696:2:47"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nodeType": "YulIdentifier",
                                    "src": "12686:2:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12686:13:47"
                                },
                                "nodeType": "YulForLoop",
                                "post": {
                                  "nodeType": "YulBlock",
                                  "src": "12700:26:47",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "12702:22:47",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "start",
                                            "nodeType": "YulIdentifier",
                                            "src": "12715:5:47"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "12722:1:47",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "12711:3:47"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "12711:13:47"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "start",
                                          "nodeType": "YulIdentifier",
                                          "src": "12702:5:47"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "pre": {
                                  "nodeType": "YulBlock",
                                  "src": "12682:3:47",
                                  "statements": []
                                },
                                "src": "12678:82:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "len",
                                "nodeType": "YulIdentifier",
                                "src": "12328:3:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12333:2:47",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "12325:2:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12325:11:47"
                          },
                          "nodeType": "YulIf",
                          "src": "12322:448:47"
                        }
                      ]
                    },
                    "name": "clean_up_bytearray_end_slots_string_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "12284:5:47",
                        "type": ""
                      },
                      {
                        "name": "len",
                        "nodeType": "YulTypedName",
                        "src": "12291:3:47",
                        "type": ""
                      },
                      {
                        "name": "startIndex",
                        "nodeType": "YulTypedName",
                        "src": "12296:10:47",
                        "type": ""
                      }
                    ],
                    "src": "12231:545:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12866:81:47",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "12876:65:47",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "data",
                                    "nodeType": "YulIdentifier",
                                    "src": "12891:4:47"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "12909:1:47",
                                                "type": "",
                                                "value": "3"
                                              },
                                              {
                                                "name": "len",
                                                "nodeType": "YulIdentifier",
                                                "src": "12912:3:47"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "12905:3:47"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "12905:11:47"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "12922:1:47",
                                                "type": "",
                                                "value": "0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "not",
                                              "nodeType": "YulIdentifier",
                                              "src": "12918:3:47"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "12918:6:47"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shr",
                                          "nodeType": "YulIdentifier",
                                          "src": "12901:3:47"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "12901:24:47"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "12897:3:47"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12897:29:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "12887:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12887:40:47"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12933:1:47",
                                    "type": "",
                                    "value": "1"
                                  },
                                  {
                                    "name": "len",
                                    "nodeType": "YulIdentifier",
                                    "src": "12936:3:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "12929:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12929:11:47"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "12884:2:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12884:57:47"
                          },
                          "variableNames": [
                            {
                              "name": "used",
                              "nodeType": "YulIdentifier",
                              "src": "12876:4:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "extract_used_part_and_set_length_of_short_byte_array",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "12843:4:47",
                        "type": ""
                      },
                      {
                        "name": "len",
                        "nodeType": "YulTypedName",
                        "src": "12849:3:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "used",
                        "nodeType": "YulTypedName",
                        "src": "12857:4:47",
                        "type": ""
                      }
                    ],
                    "src": "12781:166:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13048:1256:47",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13058:24:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "13078:3:47"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "13072:5:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13072:10:47"
                          },
                          "variables": [
                            {
                              "name": "newLen",
                              "nodeType": "YulTypedName",
                              "src": "13062:6:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13125:22:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "13127:16:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13127:18:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13127:18:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nodeType": "YulIdentifier",
                                "src": "13097:6:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13105:18:47",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "13094:2:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13094:30:47"
                          },
                          "nodeType": "YulIf",
                          "src": "13091:56:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "slot",
                                "nodeType": "YulIdentifier",
                                "src": "13200:4:47"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "slot",
                                        "nodeType": "YulIdentifier",
                                        "src": "13238:4:47"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sload",
                                      "nodeType": "YulIdentifier",
                                      "src": "13232:5:47"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13232:11:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "extract_byte_array_length",
                                  "nodeType": "YulIdentifier",
                                  "src": "13206:25:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13206:38:47"
                              },
                              {
                                "name": "newLen",
                                "nodeType": "YulIdentifier",
                                "src": "13246:6:47"
                              }
                            ],
                            "functionName": {
                              "name": "clean_up_bytearray_end_slots_string_storage",
                              "nodeType": "YulIdentifier",
                              "src": "13156:43:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13156:97:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13156:97:47"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13262:18:47",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13279:1:47",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "srcOffset",
                              "nodeType": "YulTypedName",
                              "src": "13266:9:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13289:23:47",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13308:4:47",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "srcOffset_1",
                              "nodeType": "YulTypedName",
                              "src": "13293:11:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13321:24:47",
                          "value": {
                            "name": "srcOffset_1",
                            "nodeType": "YulIdentifier",
                            "src": "13334:11:47"
                          },
                          "variableNames": [
                            {
                              "name": "srcOffset",
                              "nodeType": "YulIdentifier",
                              "src": "13321:9:47"
                            }
                          ]
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "13391:656:47",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "13405:35:47",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "newLen",
                                          "nodeType": "YulIdentifier",
                                          "src": "13424:6:47"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "13436:2:47",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "not",
                                            "nodeType": "YulIdentifier",
                                            "src": "13432:3:47"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "13432:7:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nodeType": "YulIdentifier",
                                        "src": "13420:3:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13420:20:47"
                                    },
                                    "variables": [
                                      {
                                        "name": "loopEnd",
                                        "nodeType": "YulTypedName",
                                        "src": "13409:7:47",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "13453:49:47",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nodeType": "YulIdentifier",
                                          "src": "13497:4:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "array_dataslot_string_storage",
                                        "nodeType": "YulIdentifier",
                                        "src": "13467:29:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13467:35:47"
                                    },
                                    "variables": [
                                      {
                                        "name": "dstPtr",
                                        "nodeType": "YulTypedName",
                                        "src": "13457:6:47",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "13515:10:47",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13524:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulTypedName",
                                        "src": "13519:1:47",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "13602:172:47",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "13627:6:47"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "src",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "13645:3:47"
                                                      },
                                                      {
                                                        "name": "srcOffset",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "13650:9:47"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "add",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "13641:3:47"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "13641:19:47"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "mload",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "13635:5:47"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "13635:26:47"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "13620:6:47"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "13620:42:47"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "13620:42:47"
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "13679:24:47",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "13693:6:47"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "13701:1:47",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "13689:3:47"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "13689:14:47"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "dstPtr",
                                              "nodeType": "YulIdentifier",
                                              "src": "13679:6:47"
                                            }
                                          ]
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "13720:40:47",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "srcOffset",
                                                "nodeType": "YulIdentifier",
                                                "src": "13737:9:47"
                                              },
                                              {
                                                "name": "srcOffset_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "13748:11:47"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "13733:3:47"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "13733:27:47"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "srcOffset",
                                              "nodeType": "YulIdentifier",
                                              "src": "13720:9:47"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "13549:1:47"
                                        },
                                        {
                                          "name": "loopEnd",
                                          "nodeType": "YulIdentifier",
                                          "src": "13552:7:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "13546:2:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13546:14:47"
                                    },
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nodeType": "YulBlock",
                                      "src": "13561:28:47",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "13563:24:47",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i",
                                                "nodeType": "YulIdentifier",
                                                "src": "13572:1:47"
                                              },
                                              {
                                                "name": "srcOffset_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "13575:11:47"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "13568:3:47"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "13568:19:47"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "13563:1:47"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nodeType": "YulBlock",
                                      "src": "13542:3:47",
                                      "statements": []
                                    },
                                    "src": "13538:236:47"
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "13822:166:47",
                                      "statements": [
                                        {
                                          "nodeType": "YulVariableDeclaration",
                                          "src": "13840:43:47",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "13867:3:47"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "13872:9:47"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "13863:3:47"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "13863:19:47"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "13857:5:47"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "13857:26:47"
                                          },
                                          "variables": [
                                            {
                                              "name": "lastValue",
                                              "nodeType": "YulTypedName",
                                              "src": "13844:9:47",
                                              "type": ""
                                            }
                                          ]
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "13907:6:47"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "lastValue",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "13919:9:47"
                                                  },
                                                  {
                                                    "arguments": [
                                                      {
                                                        "arguments": [
                                                          {
                                                            "arguments": [
                                                              {
                                                                "arguments": [
                                                                  {
                                                                    "kind": "number",
                                                                    "nodeType": "YulLiteral",
                                                                    "src": "13946:1:47",
                                                                    "type": "",
                                                                    "value": "3"
                                                                  },
                                                                  {
                                                                    "name": "newLen",
                                                                    "nodeType": "YulIdentifier",
                                                                    "src": "13949:6:47"
                                                                  }
                                                                ],
                                                                "functionName": {
                                                                  "name": "shl",
                                                                  "nodeType": "YulIdentifier",
                                                                  "src": "13942:3:47"
                                                                },
                                                                "nodeType": "YulFunctionCall",
                                                                "src": "13942:14:47"
                                                              },
                                                              {
                                                                "kind": "number",
                                                                "nodeType": "YulLiteral",
                                                                "src": "13958:3:47",
                                                                "type": "",
                                                                "value": "248"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "and",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "13938:3:47"
                                                            },
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "13938:24:47"
                                                          },
                                                          {
                                                            "arguments": [
                                                              {
                                                                "kind": "number",
                                                                "nodeType": "YulLiteral",
                                                                "src": "13968:1:47",
                                                                "type": "",
                                                                "value": "0"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "not",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "13964:3:47"
                                                            },
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "13964:6:47"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "shr",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "13934:3:47"
                                                        },
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "13934:37:47"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "not",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "13930:3:47"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "13930:42:47"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "and",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "13915:3:47"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "13915:58:47"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "13900:6:47"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "13900:74:47"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "13900:74:47"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "loopEnd",
                                          "nodeType": "YulIdentifier",
                                          "src": "13793:7:47"
                                        },
                                        {
                                          "name": "newLen",
                                          "nodeType": "YulIdentifier",
                                          "src": "13802:6:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "13790:2:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13790:19:47"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "13787:201:47"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nodeType": "YulIdentifier",
                                          "src": "14008:4:47"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "14022:1:47",
                                                  "type": "",
                                                  "value": "1"
                                                },
                                                {
                                                  "name": "newLen",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "14025:6:47"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nodeType": "YulIdentifier",
                                                "src": "14018:3:47"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "14018:14:47"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "14034:1:47",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "14014:3:47"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "14014:22:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "14001:6:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14001:36:47"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "14001:36:47"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "13384:663:47",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13389:1:47",
                                "type": "",
                                "value": "1"
                              }
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "14064:234:47",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "14078:14:47",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14091:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulTypedName",
                                        "src": "14082:5:47",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "14127:67:47",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "14145:35:47",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "14164:3:47"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "14169:9:47"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "14160:3:47"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "14160:19:47"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "14154:5:47"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "14154:26:47"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "value",
                                              "nodeType": "YulIdentifier",
                                              "src": "14145:5:47"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "name": "newLen",
                                      "nodeType": "YulIdentifier",
                                      "src": "14108:6:47"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "14105:89:47"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nodeType": "YulIdentifier",
                                          "src": "14214:4:47"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "value",
                                              "nodeType": "YulIdentifier",
                                              "src": "14273:5:47"
                                            },
                                            {
                                              "name": "newLen",
                                              "nodeType": "YulIdentifier",
                                              "src": "14280:6:47"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "extract_used_part_and_set_length_of_short_byte_array",
                                            "nodeType": "YulIdentifier",
                                            "src": "14220:52:47"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "14220:67:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "14207:6:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14207:81:47"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "14207:81:47"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "14056:242:47",
                              "value": "default"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nodeType": "YulIdentifier",
                                "src": "13364:6:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13372:2:47",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "13361:2:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13361:14:47"
                          },
                          "nodeType": "YulSwitch",
                          "src": "13354:944:47"
                        }
                      ]
                    },
                    "name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "slot",
                        "nodeType": "YulTypedName",
                        "src": "13033:4:47",
                        "type": ""
                      },
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "13039:3:47",
                        "type": ""
                      }
                    ],
                    "src": "12952:1352:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14427:845:47",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14437:12:47",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14447:2:47",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "14441:2:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14465:9:47"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "14476:2:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14458:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14458:21:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14458:21:47"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14488:12:47",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14499:1:47",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "ret",
                              "nodeType": "YulTypedName",
                              "src": "14492:3:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14509:30:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "14532:6:47"
                              }
                            ],
                            "functionName": {
                              "name": "sload",
                              "nodeType": "YulIdentifier",
                              "src": "14526:5:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14526:13:47"
                          },
                          "variables": [
                            {
                              "name": "slotValue",
                              "nodeType": "YulTypedName",
                              "src": "14513:9:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14548:50:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "slotValue",
                                "nodeType": "YulIdentifier",
                                "src": "14588:9:47"
                              }
                            ],
                            "functionName": {
                              "name": "extract_byte_array_length",
                              "nodeType": "YulIdentifier",
                              "src": "14562:25:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14562:36:47"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "14552:6:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14618:9:47"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "14629:2:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14614:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14614:18:47"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "14634:6:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14607:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14607:34:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14607:34:47"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14650:12:47",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14660:2:47",
                            "type": "",
                            "value": "64"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "14654:2:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14671:11:47",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14681:1:47",
                            "type": "",
                            "value": "1"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "14675:2:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "14732:151:47",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "headStart",
                                              "nodeType": "YulIdentifier",
                                              "src": "14757:9:47"
                                            },
                                            {
                                              "name": "_2",
                                              "nodeType": "YulIdentifier",
                                              "src": "14768:2:47"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "14753:3:47"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "14753:18:47"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "slotValue",
                                              "nodeType": "YulIdentifier",
                                              "src": "14777:9:47"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "14792:3:47",
                                                  "type": "",
                                                  "value": "255"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "not",
                                                "nodeType": "YulIdentifier",
                                                "src": "14788:3:47"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "14788:8:47"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "14773:3:47"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "14773:24:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "14746:6:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14746:52:47"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "14746:52:47"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "14811:62:47",
                                    "value": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "headStart",
                                              "nodeType": "YulIdentifier",
                                              "src": "14826:9:47"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "14841:1:47",
                                                  "type": "",
                                                  "value": "5"
                                                },
                                                {
                                                  "arguments": [
                                                    {
                                                      "arguments": [
                                                        {
                                                          "name": "length",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "14858:6:47"
                                                        }
                                                      ],
                                                      "functionName": {
                                                        "name": "iszero",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "14851:6:47"
                                                      },
                                                      "nodeType": "YulFunctionCall",
                                                      "src": "14851:14:47"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "iszero",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "14844:6:47"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "14844:22:47"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nodeType": "YulIdentifier",
                                                "src": "14837:3:47"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "14837:30:47"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "14822:3:47"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "14822:46:47"
                                        },
                                        {
                                          "name": "_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "14870:2:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "14818:3:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14818:55:47"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "ret",
                                        "nodeType": "YulIdentifier",
                                        "src": "14811:3:47"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "14725:158:47",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14730:1:47",
                                "type": "",
                                "value": "0"
                              }
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "14899:347:47",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "14920:1:47",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "14923:6:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "14913:6:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14913:17:47"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "14913:17:47"
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "14943:31:47",
                                    "value": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "14968:1:47",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "14971:2:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "keccak256",
                                        "nodeType": "YulIdentifier",
                                        "src": "14958:9:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14958:16:47"
                                    },
                                    "variables": [
                                      {
                                        "name": "dataPos",
                                        "nodeType": "YulTypedName",
                                        "src": "14947:7:47",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "14987:10:47",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14996:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulTypedName",
                                        "src": "14991:1:47",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "15064:126:47",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "headStart",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "15097:9:47"
                                                      },
                                                      {
                                                        "name": "i",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "15108:1:47"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "add",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "15093:3:47"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "15093:17:47"
                                                  },
                                                  {
                                                    "name": "_2",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "15112:2:47"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "15089:3:47"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "15089:26:47"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "dataPos",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "15123:7:47"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "sload",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "15117:5:47"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "15117:14:47"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "15082:6:47"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "15082:50:47"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "15082:50:47"
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "15149:27:47",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "dataPos",
                                                "nodeType": "YulIdentifier",
                                                "src": "15164:7:47"
                                              },
                                              {
                                                "name": "_3",
                                                "nodeType": "YulIdentifier",
                                                "src": "15173:2:47"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "15160:3:47"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "15160:16:47"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "dataPos",
                                              "nodeType": "YulIdentifier",
                                              "src": "15149:7:47"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "15021:1:47"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "15024:6:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "15018:2:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15018:13:47"
                                    },
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nodeType": "YulBlock",
                                      "src": "15032:19:47",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "15034:15:47",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i",
                                                "nodeType": "YulIdentifier",
                                                "src": "15043:1:47"
                                              },
                                              {
                                                "name": "_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "15046:2:47"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "15039:3:47"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "15039:10:47"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "15034:1:47"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nodeType": "YulBlock",
                                      "src": "15014:3:47",
                                      "statements": []
                                    },
                                    "src": "15010:180:47"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "15203:33:47",
                                    "value": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "headStart",
                                              "nodeType": "YulIdentifier",
                                              "src": "15218:9:47"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "15229:1:47"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "15214:3:47"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "15214:17:47"
                                        },
                                        {
                                          "name": "_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "15233:2:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "15210:3:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15210:26:47"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "ret",
                                        "nodeType": "YulIdentifier",
                                        "src": "15203:3:47"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "14892:354:47",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14897:1:47",
                                "type": "",
                                "value": "1"
                              }
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "name": "slotValue",
                                "nodeType": "YulIdentifier",
                                "src": "14702:9:47"
                              },
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "14713:2:47"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "14698:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14698:18:47"
                          },
                          "nodeType": "YulSwitch",
                          "src": "14691:555:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15255:11:47",
                          "value": {
                            "name": "ret",
                            "nodeType": "YulIdentifier",
                            "src": "15263:3:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "15255:4:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_storage__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14396:9:47",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "14407:6:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14418:4:47",
                        "type": ""
                      }
                    ],
                    "src": "14309:963:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15451:174:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15468:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15479:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15461:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15461:21:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15461:21:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15502:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15513:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15498:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15498:18:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15518:2:47",
                                "type": "",
                                "value": "24"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15491:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15491:30:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15491:30:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15541:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15552:2:47",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15537:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15537:18:47"
                              },
                              {
                                "hexValue": "4552433732313a20696e76616c696420746f6b656e204944",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15557:26:47",
                                "type": "",
                                "value": "ERC721: invalid token ID"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15530:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15530:54:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15530:54:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15593:26:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15605:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15616:2:47",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15601:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15601:18:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "15593:4:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15428:9:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15442:4:47",
                        "type": ""
                      }
                    ],
                    "src": "15277:348:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15804:231:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15821:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15832:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15814:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15814:21:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15814:21:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15855:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15866:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15851:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15851:18:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15871:2:47",
                                "type": "",
                                "value": "41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15844:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15844:30:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15844:30:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15894:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15905:2:47",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15890:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15890:18:47"
                              },
                              {
                                "hexValue": "4552433732313a2061646472657373207a65726f206973206e6f742061207661",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15910:34:47",
                                "type": "",
                                "value": "ERC721: address zero is not a va"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15883:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15883:62:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15883:62:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15965:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15976:2:47",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15961:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15961:18:47"
                              },
                              {
                                "hexValue": "6c6964206f776e6572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15981:11:47",
                                "type": "",
                                "value": "lid owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15954:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15954:39:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15954:39:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16002:27:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16014:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16025:3:47",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16010:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16010:19:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16002:4:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15781:9:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15795:4:47",
                        "type": ""
                      }
                    ],
                    "src": "15630:405:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16224:836:47",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "16234:12:47",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16245:1:47",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "ret",
                              "nodeType": "YulTypedName",
                              "src": "16238:3:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "16255:30:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "16278:6:47"
                              }
                            ],
                            "functionName": {
                              "name": "sload",
                              "nodeType": "YulIdentifier",
                              "src": "16272:5:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16272:13:47"
                          },
                          "variables": [
                            {
                              "name": "slotValue",
                              "nodeType": "YulTypedName",
                              "src": "16259:9:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "16294:50:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "slotValue",
                                "nodeType": "YulIdentifier",
                                "src": "16334:9:47"
                              }
                            ],
                            "functionName": {
                              "name": "extract_byte_array_length",
                              "nodeType": "YulIdentifier",
                              "src": "16308:25:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16308:36:47"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "16298:6:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "16353:11:47",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16363:1:47",
                            "type": "",
                            "value": "1"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "16357:2:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "16414:126:47",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "16435:3:47"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "slotValue",
                                              "nodeType": "YulIdentifier",
                                              "src": "16444:9:47"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "16459:3:47",
                                                  "type": "",
                                                  "value": "255"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "not",
                                                "nodeType": "YulIdentifier",
                                                "src": "16455:3:47"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "16455:8:47"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "16440:3:47"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "16440:24:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "16428:6:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "16428:37:47"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "16428:37:47"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "16478:52:47",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "16489:3:47"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "length",
                                              "nodeType": "YulIdentifier",
                                              "src": "16498:6:47"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "arguments": [
                                                    {
                                                      "name": "length",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "16520:6:47"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "iszero",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "16513:6:47"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "16513:14:47"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "iszero",
                                                "nodeType": "YulIdentifier",
                                                "src": "16506:6:47"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "16506:22:47"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mul",
                                            "nodeType": "YulIdentifier",
                                            "src": "16494:3:47"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "16494:35:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "16485:3:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "16485:45:47"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "ret",
                                        "nodeType": "YulIdentifier",
                                        "src": "16478:3:47"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "16407:133:47",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16412:1:47",
                                "type": "",
                                "value": "0"
                              }
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "16556:349:47",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "16577:1:47",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "16580:6:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "16570:6:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "16570:17:47"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "16570:17:47"
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "16600:14:47",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "16610:4:47",
                                      "type": "",
                                      "value": "0x20"
                                    },
                                    "variables": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulTypedName",
                                        "src": "16604:2:47",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "16627:31:47",
                                    "value": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "16652:1:47",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "name": "_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "16655:2:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "keccak256",
                                        "nodeType": "YulIdentifier",
                                        "src": "16642:9:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "16642:16:47"
                                    },
                                    "variables": [
                                      {
                                        "name": "dataPos",
                                        "nodeType": "YulTypedName",
                                        "src": "16631:7:47",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "16671:10:47",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "16680:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulTypedName",
                                        "src": "16675:1:47",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "16748:111:47",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "pos",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "16777:3:47"
                                                  },
                                                  {
                                                    "name": "i",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "16782:1:47"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "16773:3:47"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "16773:11:47"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "dataPos",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "16792:7:47"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "sload",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "16786:5:47"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "16786:14:47"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "16766:6:47"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "16766:35:47"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "16766:35:47"
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "16818:27:47",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "dataPos",
                                                "nodeType": "YulIdentifier",
                                                "src": "16833:7:47"
                                              },
                                              {
                                                "name": "_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "16842:2:47"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "16829:3:47"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "16829:16:47"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "dataPos",
                                              "nodeType": "YulIdentifier",
                                              "src": "16818:7:47"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "16705:1:47"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "16708:6:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "16702:2:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "16702:13:47"
                                    },
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nodeType": "YulBlock",
                                      "src": "16716:19:47",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "16718:15:47",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i",
                                                "nodeType": "YulIdentifier",
                                                "src": "16727:1:47"
                                              },
                                              {
                                                "name": "_2",
                                                "nodeType": "YulIdentifier",
                                                "src": "16730:2:47"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "16723:3:47"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "16723:10:47"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "16718:1:47"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nodeType": "YulBlock",
                                      "src": "16698:3:47",
                                      "statements": []
                                    },
                                    "src": "16694:165:47"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "16872:23:47",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "16883:3:47"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "16888:6:47"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "16879:3:47"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "16879:16:47"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "ret",
                                        "nodeType": "YulIdentifier",
                                        "src": "16872:3:47"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "16549:356:47",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16554:1:47",
                                "type": "",
                                "value": "1"
                              }
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "name": "slotValue",
                                "nodeType": "YulIdentifier",
                                "src": "16384:9:47"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "16395:2:47"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "16380:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16380:18:47"
                          },
                          "nodeType": "YulSwitch",
                          "src": "16373:532:47"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "16914:29:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "16936:6:47"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "16930:5:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16930:13:47"
                          },
                          "variables": [
                            {
                              "name": "length_1",
                              "nodeType": "YulTypedName",
                              "src": "16918:8:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "16991:6:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16999:4:47",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16987:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16987:17:47"
                              },
                              {
                                "name": "ret",
                                "nodeType": "YulIdentifier",
                                "src": "17006:3:47"
                              },
                              {
                                "name": "length_1",
                                "nodeType": "YulIdentifier",
                                "src": "17011:8:47"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nodeType": "YulIdentifier",
                              "src": "16952:34:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16952:68:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16952:68:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17029:25:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "ret",
                                "nodeType": "YulIdentifier",
                                "src": "17040:3:47"
                              },
                              {
                                "name": "length_1",
                                "nodeType": "YulIdentifier",
                                "src": "17045:8:47"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17036:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17036:18:47"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "17029:3:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "16192:3:47",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "16197:6:47",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "16205:6:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "16216:3:47",
                        "type": ""
                      }
                    ],
                    "src": "16040:1020:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17146:170:47",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17192:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "17201:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "17204:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "17194:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17194:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17194:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "17167:7:47"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17176:9:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "17163:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17163:23:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17188:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "17159:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17159:32:47"
                          },
                          "nodeType": "YulIf",
                          "src": "17156:52:47"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "17217:29:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17236:9:47"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "17230:5:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17230:16:47"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "17221:5:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "17280:5:47"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "17255:24:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17255:31:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17255:31:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17295:15:47",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "17305:5:47"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "17295:6:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17112:9:47",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "17123:7:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "17135:6:47",
                        "type": ""
                      }
                    ],
                    "src": "17065:251:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17495:162:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17512:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17523:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17505:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17505:21:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17505:21:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17546:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17557:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17542:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17542:18:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17562:2:47",
                                "type": "",
                                "value": "12"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17535:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17535:30:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17535:30:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17585:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17596:2:47",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17581:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17581:18:47"
                              },
                              {
                                "hexValue": "554e415554484f52495a4544",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17601:14:47",
                                "type": "",
                                "value": "UNAUTHORIZED"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17574:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17574:42:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17574:42:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17625:26:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17637:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17648:2:47",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17633:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17633:18:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "17625:4:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17472:9:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "17486:4:47",
                        "type": ""
                      }
                    ],
                    "src": "17321:336:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17836:232:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17853:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17864:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17846:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17846:21:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17846:21:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17887:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17898:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17883:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17883:18:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17903:2:47",
                                "type": "",
                                "value": "42"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17876:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17876:30:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17876:30:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17926:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17937:2:47",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17922:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17922:18:47"
                              },
                              {
                                "hexValue": "455243323938313a20726f79616c7479206665652077696c6c20657863656564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17942:34:47",
                                "type": "",
                                "value": "ERC2981: royalty fee will exceed"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17915:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17915:62:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17915:62:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17997:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18008:2:47",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17993:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17993:18:47"
                              },
                              {
                                "hexValue": "2073616c655072696365",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "18013:12:47",
                                "type": "",
                                "value": " salePrice"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17986:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17986:40:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17986:40:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18035:27:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18047:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18058:3:47",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18043:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18043:19:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18035:4:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17813:9:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "17827:4:47",
                        "type": ""
                      }
                    ],
                    "src": "17662:406:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18247:175:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18264:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18275:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18257:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18257:21:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18257:21:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18298:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18309:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18294:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18294:18:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18314:2:47",
                                "type": "",
                                "value": "25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18287:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18287:30:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18287:30:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18337:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18348:2:47",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18333:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18333:18:47"
                              },
                              {
                                "hexValue": "455243323938313a20696e76616c6964207265636569766572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "18353:27:47",
                                "type": "",
                                "value": "ERC2981: invalid receiver"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18326:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18326:55:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18326:55:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18390:26:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18402:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18413:2:47",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18398:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18398:18:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18390:4:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18224:9:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "18238:4:47",
                        "type": ""
                      }
                    ],
                    "src": "18073:349:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18556:119:47",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "18566:26:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18578:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18589:2:47",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18574:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18574:18:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18566:4:47"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18608:9:47"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "18619:6:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18601:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18601:25:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18601:25:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18646:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18657:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18642:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18642:18:47"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "18662:6:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18635:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18635:34:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18635:34:47"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18517:9:47",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "18528:6:47",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "18536:6:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "18547:4:47",
                        "type": ""
                      }
                    ],
                    "src": "18427:248:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18854:227:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18871:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18882:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18864:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18864:21:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18864:21:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18905:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18916:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18901:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18901:18:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18921:2:47",
                                "type": "",
                                "value": "37"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18894:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18894:30:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18894:30:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18944:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18955:2:47",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18940:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18940:18:47"
                              },
                              {
                                "hexValue": "4552433732313a207472616e736665722066726f6d20696e636f727265637420",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "18960:34:47",
                                "type": "",
                                "value": "ERC721: transfer from incorrect "
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18933:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18933:62:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18933:62:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19015:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19026:2:47",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19011:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19011:18:47"
                              },
                              {
                                "hexValue": "6f776e6572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "19031:7:47",
                                "type": "",
                                "value": "owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19004:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19004:35:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19004:35:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19048:27:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19060:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19071:3:47",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19056:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19056:19:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19048:4:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18831:9:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "18845:4:47",
                        "type": ""
                      }
                    ],
                    "src": "18680:401:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19260:226:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19277:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19288:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19270:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19270:21:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19270:21:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19311:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19322:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19307:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19307:18:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19327:2:47",
                                "type": "",
                                "value": "36"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19300:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19300:30:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19300:30:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19350:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19361:2:47",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19346:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19346:18:47"
                              },
                              {
                                "hexValue": "4552433732313a207472616e7366657220746f20746865207a65726f20616464",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "19366:34:47",
                                "type": "",
                                "value": "ERC721: transfer to the zero add"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19339:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19339:62:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19339:62:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19421:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19432:2:47",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19417:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19417:18:47"
                              },
                              {
                                "hexValue": "72657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "19437:6:47",
                                "type": "",
                                "value": "ress"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19410:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19410:34:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19410:34:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19453:27:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19465:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19476:3:47",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19461:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19461:19:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19453:4:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19237:9:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "19251:4:47",
                        "type": ""
                      }
                    ],
                    "src": "19086:400:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19540:79:47",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "19550:17:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "19562:1:47"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "19565:1:47"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "19558:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19558:9:47"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "19550:4:47"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "19591:22:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "19593:16:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19593:18:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "19593:18:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "diff",
                                "nodeType": "YulIdentifier",
                                "src": "19582:4:47"
                              },
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "19588:1:47"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "19579:2:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19579:11:47"
                          },
                          "nodeType": "YulIf",
                          "src": "19576:37:47"
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "19522:1:47",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "19525:1:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "19531:4:47",
                        "type": ""
                      }
                    ],
                    "src": "19491:128:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19672:77:47",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "19682:16:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "19693:1:47"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "19696:1:47"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19689:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19689:9:47"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "19682:3:47"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "19721:22:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "19723:16:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19723:18:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "19723:18:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "19713:1:47"
                              },
                              {
                                "name": "sum",
                                "nodeType": "YulIdentifier",
                                "src": "19716:3:47"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "19710:2:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19710:10:47"
                          },
                          "nodeType": "YulIf",
                          "src": "19707:36:47"
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "19655:1:47",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "19658:1:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "19664:3:47",
                        "type": ""
                      }
                    ],
                    "src": "19624:125:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19835:103:47",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "19881:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "19890:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "19893:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "19883:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19883:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "19883:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "19856:7:47"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19865:9:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "19852:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19852:23:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19877:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "19848:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19848:32:47"
                          },
                          "nodeType": "YulIf",
                          "src": "19845:52:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19906:26:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19922:9:47"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "19916:5:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19916:16:47"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "19906:6:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19801:9:47",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "19812:7:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "19824:6:47",
                        "type": ""
                      }
                    ],
                    "src": "19754:184:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20162:222:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "20179:3:47"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "20184:6:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20172:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20172:19:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20172:19:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "20211:3:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20216:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20207:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20207:12:47"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "20221:6:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20200:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20200:28:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20200:28:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "20248:3:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20253:2:47",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20244:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20244:12:47"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "20258:6:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20237:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20237:28:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20237:28:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "20285:3:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20290:2:47",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20281:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20281:12:47"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "20303:2:47",
                                        "type": "",
                                        "value": "96"
                                      },
                                      {
                                        "name": "value3",
                                        "nodeType": "YulIdentifier",
                                        "src": "20307:6:47"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "20299:3:47"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "20299:15:47"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "20320:26:47",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "20316:3:47"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "20316:31:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "20295:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20295:53:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20274:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20274:75:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20274:75:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20358:20:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "20369:3:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20374:3:47",
                                "type": "",
                                "value": "116"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20365:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20365:13:47"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "20358:3:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_uint256_t_uint256_t_uint256_t_address_payable__to_t_uint256_t_uint256_t_uint256_t_address_payable__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "20114:3:47",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "20119:6:47",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "20127:6:47",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "20135:6:47",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "20143:6:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "20154:3:47",
                        "type": ""
                      }
                    ],
                    "src": "19943:441:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20563:177:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20580:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20591:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20573:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20573:21:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20573:21:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20614:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20625:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20610:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20610:18:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20630:2:47",
                                "type": "",
                                "value": "27"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20603:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20603:30:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20603:30:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20653:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20664:2:47",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20649:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20649:18:47"
                              },
                              {
                                "hexValue": "455243323938313a20496e76616c696420706172616d6574657273",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "20669:29:47",
                                "type": "",
                                "value": "ERC2981: Invalid parameters"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20642:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20642:57:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20642:57:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20708:26:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20720:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20731:2:47",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20716:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20716:18:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20708:4:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_d20a09dd8b4080dbbc254e38d9f607ef83a2c7a38b671ae8f8f162ffe46e2084__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20540:9:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20554:4:47",
                        "type": ""
                      }
                    ],
                    "src": "20389:351:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20919:175:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20936:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20947:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20929:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20929:21:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20929:21:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20970:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20981:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20966:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20966:18:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20986:2:47",
                                "type": "",
                                "value": "25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20959:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20959:30:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20959:30:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21009:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21020:2:47",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21005:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21005:18:47"
                              },
                              {
                                "hexValue": "4552433732313a20617070726f766520746f2063616c6c6572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "21025:27:47",
                                "type": "",
                                "value": "ERC721: approve to caller"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20998:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20998:55:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20998:55:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21062:26:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21074:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21085:2:47",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21070:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21070:18:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21062:4:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20896:9:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20910:4:47",
                        "type": ""
                      }
                    ],
                    "src": "20745:349:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21273:240:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21290:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21301:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21283:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21283:21:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21283:21:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21324:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21335:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21320:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21320:18:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21340:2:47",
                                "type": "",
                                "value": "50"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21313:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21313:30:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21313:30:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21363:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21374:2:47",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21359:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21359:18:47"
                              },
                              {
                                "hexValue": "4552433732313a207472616e7366657220746f206e6f6e204552433732315265",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "21379:34:47",
                                "type": "",
                                "value": "ERC721: transfer to non ERC721Re"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21352:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21352:62:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21352:62:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21434:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21445:2:47",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21430:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21430:18:47"
                              },
                              {
                                "hexValue": "63656976657220696d706c656d656e746572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "21450:20:47",
                                "type": "",
                                "value": "ceiver implementer"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21423:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21423:48:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21423:48:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21480:27:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21492:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21503:3:47",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21488:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21488:19:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21480:4:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21250:9:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21264:4:47",
                        "type": ""
                      }
                    ],
                    "src": "21099:414:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21565:88:47",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "21596:22:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "21598:16:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21598:18:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "21598:18:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "21581:5:47"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21592:1:47",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "21588:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21588:6:47"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "21578:2:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21578:17:47"
                          },
                          "nodeType": "YulIf",
                          "src": "21575:43:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21627:20:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "21638:5:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21645:1:47",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21634:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21634:13:47"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "21627:3:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "21547:5:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "21557:3:47",
                        "type": ""
                      }
                    ],
                    "src": "21518:135:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21696:74:47",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "21719:22:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "21721:16:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21721:18:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "21721:18:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "21716:1:47"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "21709:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21709:9:47"
                          },
                          "nodeType": "YulIf",
                          "src": "21706:35:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21750:14:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "21759:1:47"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "21762:1:47"
                              }
                            ],
                            "functionName": {
                              "name": "mod",
                              "nodeType": "YulIdentifier",
                              "src": "21755:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21755:9:47"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "21750:1:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "mod_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "21681:1:47",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "21684:1:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "21690:1:47",
                        "type": ""
                      }
                    ],
                    "src": "21658:112:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21949:170:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21966:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21977:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21959:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21959:21:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21959:21:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22000:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22011:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21996:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21996:18:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22016:2:47",
                                "type": "",
                                "value": "20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21989:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21989:30:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21989:30:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22039:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22050:2:47",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22035:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22035:18:47"
                              },
                              {
                                "hexValue": "5061757361626c653a206e6f7420706175736564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "22055:22:47",
                                "type": "",
                                "value": "Pausable: not paused"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22028:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22028:50:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22028:50:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22087:26:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22099:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22110:2:47",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22095:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22095:18:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22087:4:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21926:9:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21940:4:47",
                        "type": ""
                      }
                    ],
                    "src": "21775:344:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22298:166:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22315:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22326:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22308:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22308:21:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22308:21:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22349:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22360:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22345:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22345:18:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22365:2:47",
                                "type": "",
                                "value": "16"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22338:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22338:30:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22338:30:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22388:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22399:2:47",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22384:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22384:18:47"
                              },
                              {
                                "hexValue": "5061757361626c653a20706175736564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "22404:18:47",
                                "type": "",
                                "value": "Pausable: paused"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22377:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22377:46:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22377:46:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22432:26:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22444:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22455:2:47",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22440:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22440:18:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22432:4:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "22275:9:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "22289:4:47",
                        "type": ""
                      }
                    ],
                    "src": "22124:340:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22672:309:47",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22682:52:47",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22692:42:47",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "22686:2:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22750:9:47"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "22765:6:47"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "22773:2:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "22761:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22761:15:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22743:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22743:34:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22743:34:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22797:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22808:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22793:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22793:18:47"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "22817:6:47"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "22825:2:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "22813:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22813:15:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22786:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22786:43:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22786:43:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22849:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22860:2:47",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22845:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22845:18:47"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "22865:6:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22838:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22838:34:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22838:34:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22892:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22903:2:47",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22888:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22888:18:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22908:3:47",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22881:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22881:31:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22881:31:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22921:54:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "22947:6:47"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22959:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22970:3:47",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22955:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22955:19:47"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "22929:17:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22929:46:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22921:4:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "22617:9:47",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "22628:6:47",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "22636:6:47",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "22644:6:47",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "22652:6:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "22663:4:47",
                        "type": ""
                      }
                    ],
                    "src": "22469:512:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23066:169:47",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "23112:16:47",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "23121:1:47",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "23124:1:47",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "23114:6:47"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "23114:12:47"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "23114:12:47"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "23087:7:47"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23096:9:47"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "23083:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23083:23:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23108:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "23079:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23079:32:47"
                          },
                          "nodeType": "YulIf",
                          "src": "23076:52:47"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "23137:29:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23156:9:47"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "23150:5:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23150:16:47"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "23141:5:47",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "23199:5:47"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bytes4",
                              "nodeType": "YulIdentifier",
                              "src": "23175:23:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23175:30:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23175:30:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23214:15:47",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "23224:5:47"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "23214:6:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "23032:9:47",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "23043:7:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "23055:6:47",
                        "type": ""
                      }
                    ],
                    "src": "22986:249:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23414:182:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23431:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23442:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23424:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23424:21:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23424:21:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23465:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23476:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23461:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23461:18:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23481:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23454:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23454:30:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23454:30:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23504:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23515:2:47",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23500:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23500:18:47"
                              },
                              {
                                "hexValue": "4552433732313a206d696e7420746f20746865207a65726f2061646472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "23520:34:47",
                                "type": "",
                                "value": "ERC721: mint to the zero address"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23493:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23493:62:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23493:62:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23564:26:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23576:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23587:2:47",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "23572:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23572:18:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "23564:4:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "23391:9:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "23405:4:47",
                        "type": ""
                      }
                    ],
                    "src": "23240:356:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23775:178:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23792:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23803:2:47",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23785:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23785:21:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23785:21:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23826:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23837:2:47",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23822:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23822:18:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23842:2:47",
                                "type": "",
                                "value": "28"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23815:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23815:30:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23815:30:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23865:9:47"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23876:2:47",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23861:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23861:18:47"
                              },
                              {
                                "hexValue": "4552433732313a20746f6b656e20616c7265616479206d696e746564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "23881:30:47",
                                "type": "",
                                "value": "ERC721: token already minted"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23854:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23854:58:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23854:58:47"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23921:26:47",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23933:9:47"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23944:2:47",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "23929:3:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23929:18:47"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "23921:4:47"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "23752:9:47",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "23766:4:47",
                        "type": ""
                      }
                    ],
                    "src": "23601:352:47"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23990:95:47",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24007:1:47",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24014:3:47",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24019:10:47",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "24010:3:47"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24010:20:47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24000:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24000:31:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24000:31:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24047:1:47",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24050:4:47",
                                "type": "",
                                "value": "0x31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24040:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24040:15:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24040:15:47"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24071:1:47",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24074:4:47",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "24064:6:47"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24064:15:47"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24064:15:47"
                        }
                      ]
                    },
                    "name": "panic_error_0x31",
                    "nodeType": "YulFunctionDefinition",
                    "src": "23958:127:47"
                  }
                ]
              },
              "contents": "{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_uint96(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint96(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := abi_decode_uint96(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_available_length_string(src, length, end) -> array\n    {\n        let _1 := 0xffffffffffffffff\n        if gt(length, _1) { panic_error_0x41() }\n        let _2 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(length, 31), _2), 63), _2))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        array := memPtr\n        mstore(memPtr, length)\n        if gt(add(src, length), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), src, length)\n        mstore(add(add(memPtr, length), 0x20), 0)\n    }\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        value0 := abi_decode_available_length_string(add(_1, 32), calldataload(_1), dataEnd)\n    }\n    function abi_decode_tuple_t_uint256t_addresst_uint96(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n        value2 := abi_decode_uint96(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_contract$_IAuthority_$9130(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint96__to_t_uint96__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        if iszero(eq(value_1, iszero(iszero(value_1)))) { revert(0, 0) }\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_uint96(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_uint96(headStart)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        value3 := abi_decode_available_length_string(add(_1, 32), calldataload(_1), dataEnd)\n    }\n    function abi_encode_tuple_t_contract$_IAuthority_$9130__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC721: approval to current owne\")\n        mstore(add(headStart, 96), \"r\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8a333355a81806ed720720a526142c1e97d1086371f6be2b18561203134ef304__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 62)\n        mstore(add(headStart, 64), \"ERC721: approve caller is not to\")\n        mstore(add(headStart, 96), \"ken owner nor approved for all\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_eb80b9f25203511adb7b7660e6222669e088cedd0909cd81ed7470e34dcd010b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC721: caller is not token owne\")\n        mstore(add(headStart, 96), \"r nor approved\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"ERC721Enumerable: owner index ou\")\n        mstore(add(headStart, 96), \"t of bounds\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"ERC721Metadata: URI query for no\")\n        mstore(add(headStart, 96), \"nexistent token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"ERC721Enumerable: global index o\")\n        mstore(add(headStart, 96), \"ut of bounds\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_string_storage__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let ret := 0\n        let slotValue := sload(value0)\n        let length := extract_byte_array_length(slotValue)\n        mstore(add(headStart, _1), length)\n        let _2 := 64\n        let _3 := 1\n        switch and(slotValue, _3)\n        case 0 {\n            mstore(add(headStart, _2), and(slotValue, not(255)))\n            ret := add(add(headStart, shl(5, iszero(iszero(length)))), _2)\n        }\n        case 1 {\n            mstore(0, value0)\n            let dataPos := keccak256(0, _1)\n            let i := 0\n            for { } lt(i, length) { i := add(i, _1) }\n            {\n                mstore(add(add(headStart, i), _2), sload(dataPos))\n                dataPos := add(dataPos, _3)\n            }\n            ret := add(add(headStart, i), _2)\n        }\n        tail := ret\n    }\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ERC721: invalid token ID\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC721: address zero is not a va\")\n        mstore(add(headStart, 96), \"lid owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let ret := 0\n        let slotValue := sload(value0)\n        let length := extract_byte_array_length(slotValue)\n        let _1 := 1\n        switch and(slotValue, _1)\n        case 0 {\n            mstore(pos, and(slotValue, not(255)))\n            ret := add(pos, mul(length, iszero(iszero(length))))\n        }\n        case 1 {\n            mstore(0, value0)\n            let _2 := 0x20\n            let dataPos := keccak256(0, _2)\n            let i := 0\n            for { } lt(i, length) { i := add(i, _2) }\n            {\n                mstore(add(pos, i), sload(dataPos))\n                dataPos := add(dataPos, _1)\n            }\n            ret := add(pos, length)\n        }\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), ret, length_1)\n        end := add(ret, length_1)\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 12)\n        mstore(add(headStart, 64), \"UNAUTHORIZED\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC2981: royalty fee will exceed\")\n        mstore(add(headStart, 96), \" salePrice\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC2981: invalid receiver\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC721: transfer from incorrect \")\n        mstore(add(headStart, 96), \"owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC721: transfer to the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_packed_t_uint256_t_uint256_t_uint256_t_address_payable__to_t_uint256_t_uint256_t_uint256_t_address_payable__nonPadded_inplace_fromStack_reversed(pos, value3, value2, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), value1)\n        mstore(add(pos, 64), value2)\n        mstore(add(pos, 96), and(shl(96, value3), not(0xffffffffffffffffffffffff)))\n        end := add(pos, 116)\n    }\n    function abi_encode_tuple_t_stringliteral_d20a09dd8b4080dbbc254e38d9f607ef83a2c7a38b671ae8f8f162ffe46e2084__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"ERC2981: Invalid parameters\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC721: approve to caller\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"ERC721: transfer to non ERC721Re\")\n        mstore(add(headStart, 96), \"ceiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Pausable: not paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Pausable: paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"ERC721: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"ERC721: token already minted\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x31()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n}",
              "id": 47,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b50600436106102415760003560e01c806355f804b31161014557806396ce0795116100bd578063b88d4fde1161008c578063c87b56dd11610071578063c87b56dd146104eb578063d5391393146104fe578063e985e9c51461052557600080fd5b8063b88d4fde146104c0578063bf7e214f146104d357600080fd5b806396ce07951461045c578063a144819414610487578063a22cb4651461049a578063ab51e23a146104ad57600080fd5b80636c0360eb116101145780637a9e5e4b116100f95780637a9e5e4b146104395780638456cb591461044c57806395d89b411461045457600080fd5b80636c0360eb1461041e57806370a082311461042657600080fd5b806355f804b3146103da5780635944c753146103ed5780635c975abb146104005780636352211e1461040b57600080fd5b806323b872dd116101d85780633f4ba83a116101a757806342842e0e1161018c57806342842e0e146103a157806342966c68146103b45780634f6ccce7146103c757600080fd5b80633f4ba83a14610386578063422627c31461038e57600080fd5b806323b872dd1461031b5780632a55205a1461032e5780632f745c591461036057806337f8649e1461037357600080fd5b8063081812fc11610214578063081812fc146102ab578063095ea7b3146102d657806318160ddd146102e95780631c9ad5b1146102fb57600080fd5b806301ffc9a71461024657806304634d8d1461026e578063067b61f21461028357806306fdde0314610296575b600080fd5b610259610254366004612273565b610561565b60405190151581526020015b60405180910390f35b61028161027c3660046122c3565b610572565b005b6102816102913660046122f8565b610588565b61029e61059a565b604051610265919061236a565b6102be6102b936600461237d565b61062c565b6040516001600160a01b039091168152602001610265565b6102816102e4366004612396565b610653565b600a545b604051908152602001610265565b6102ed61030936600461237d565b600f6020526000908152604090205481565b6102816103293660046123c2565b61076d565b61034161033c3660046122f8565b6107e6565b604080516001600160a01b039093168352602083019190915201610265565b6102ed61036e366004612396565b610892565b6102ed610381366004612403565b61093a565b6102816109ea565b6102ed61039c36600461237d565b6109fc565b6102816103af3660046123c2565b610a8b565b6102816103c236600461237d565b610aa6565b6102ed6103d536600461237d565b610b1e565b61029e6103e83660046124ac565b610bc2565b6102816103fb3660046124f5565b610ca4565b600c5460ff16610259565b6102be61041936600461237d565b610cb7565b61029e610d1c565b6102ed610434366004612403565b610daa565b610281610447366004612403565b610e44565b610281610ebf565b61029e610ecf565b600e5461046f906001600160601b031681565b6040516001600160601b039091168152602001610265565b610281610495366004612396565b610ede565b6102816104a8366004612533565b610f15565b61046f6104bb366004612571565b610f20565b6102816104ce36600461258c565b610f91565b600c546102be9061010090046001600160a01b031681565b61029e6104f936600461237d565b611010565b6102ed7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61025961053336600461260c565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b600061056c826110eb565b92915050565b61057a6110f6565b61058482826111bc565b5050565b6105906110f6565b61058482826112b9565b6060600280546105a99061263a565b80601f01602080910402602001604051908101604052809291908181526020018280546105d59061263a565b80156106225780601f106105f757610100808354040283529160200191610622565b820191906000526020600020905b81548152906001019060200180831161060557829003601f168201915b5050505050905090565b600061063782611308565b506000908152600660205260409020546001600160a01b031690565b600061065e82610cb7565b9050806001600160a01b0316836001600160a01b0316036106d05760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806106ec57506106ec8133610533565b61075e5760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016106c7565b610768838361136c565b505050565b610778335b826113da565b6107db5760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b60648201526084016106c7565b610768838383611459565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b031692820192909252829161085b5750604080518082019091526000546001600160a01b0381168252600160a01b90046001600160601b031660208201525b60208101516000906127109061087a906001600160601b031687612684565b61088491906126b9565b915196919550909350505050565b600061089d83610daa565b82106109115760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e647300000000000000000000000000000000000000000060648201526084016106c7565b506001600160a01b03919091166000908152600860209081526040808320938352929052205490565b60007f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661096681611618565b600061097160105490565b9050610981601080546001019055565b604080514460208083019190915242828401524360608084019190915241901b6bffffffffffffffffffffffff1916608083015282518083036074018152609490920190925280519101206109d682826112b9565b6109e085836116c5565b5091505b50919050565b6109f26110f6565b6109fa6116df565b565b6000818152600460205260408120546001600160a01b0316610a785760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016106c7565b506000908152600f602052604090205490565b61076883838360405180602001604052806000815250610f91565b610aaf33610772565b610b125760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b60648201526084016106c7565b610b1b81611731565b50565b6000610b29600a5490565b8210610b9d5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e6473000000000000000000000000000000000000000060648201526084016106c7565b600a8281548110610bb057610bb06126cd565b90600052602060002001549050919050565b6060610bcc6110f6565b600d610bd88382612731565b507f5411e8ebf1636d9e83d5fc4900bf80cbac82e8790da2a4c94db4895e889eedf6600d604051610c0991906127f1565b60405180910390a1600d8054610c1e9061263a565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4a9061263a565b8015610c975780601f10610c6c57610100808354040283529160200191610c97565b820191906000526020600020905b815481529060010190602001808311610c7a57829003601f168201915b505050505090505b919050565b610cac6110f6565b61076883838361174b565b6000818152600460205260408120546001600160a01b03168061056c5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016106c7565b600d8054610d299061263a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d559061263a565b8015610da25780601f10610d7757610100808354040283529160200191610da2565b820191906000526020600020905b815481529060010190602001808311610d8557829003601f168201915b505050505081565b60006001600160a01b038216610e285760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e6572000000000000000000000000000000000000000000000060648201526084016106c7565b506001600160a01b031660009081526005602052604090205490565b610e4c6110f6565b600c80547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b038416908102919091179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a150565b610ec76110f6565b6109fa611859565b6060600380546105a99061263a565b610ee66110f6565b6000610ef160105490565b9050610f01601080546001019055565b610f0b81836112b9565b61076883826116c5565b610584338383611896565b6000610f2a6110f6565b600e80546bffffffffffffffffffffffff19166001600160601b0384169081179091556040519081527f601b85aa9305dbcfbfc81aa2d4b5126c1ce24afdd1bad47d6880e5b6df081f579060200160405180910390a15050600e546001600160601b031690565b610f9b33836113da565b610ffe5760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b60648201526084016106c7565b61100a84848484611964565b50505050565b6000818152600460205260409020546060906001600160a01b031661108f5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016106c7565b6000600d805461109e9061263a565b9050116110ba576040518060200160405280600081525061056c565b600d6110c5836119e2565b6040516020016110d692919061287c565b60405160208183030381529060405292915050565b600061056c82611afb565b600c60019054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611149573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116d9190612903565b6001600160a01b0316336001600160a01b0316146109fa5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064016106c7565b6127106001600160601b038216111561122a5760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b60648201526084016106c7565b6001600160a01b0382166112805760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c69642072656365697665720000000000000060448201526064016106c7565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600055565b6000828152600f602090815260409182902083905581518481529081018390527f4e26044f7fb3724a9375deb74974fdc2f4e07f265efce87f93cfced354258487910160405180910390a15050565b6000818152600460205260409020546001600160a01b0316610b1b5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016106c7565b600081815260066020526040902080546001600160a01b0319166001600160a01b03841690811790915581906113a182610cb7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806113e683610cb7565b9050806001600160a01b0316846001600160a01b0316148061142d57506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b806114515750836001600160a01b03166114468461062c565b6001600160a01b0316145b949350505050565b826001600160a01b031661146c82610cb7565b6001600160a01b0316146114e85760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016106c7565b6001600160a01b03821661154a5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106c7565b611555838383611b20565b61156060008261136c565b6001600160a01b0383166000908152600560205260408120805460019290611589908490612920565b90915550506001600160a01b03821660009081526005602052604081208054600192906115b7908490612933565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600c54604051634c9ba32160e11b8152336004820152829161010090046001600160a01b031690639937464290602401602060405180830381865afa158015611665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116899190612946565b14610b1b5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064016106c7565b610584828260405180602001604052806000815250611b33565b6116e7611bb1565b600c805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b61173a81611c03565b600090815260016020526040812055565b6127106001600160601b03821611156117b95760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b60648201526084016106c7565b6001600160a01b03821661180f5760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d6574657273000000000060448201526064016106c7565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600190529190942093519051909116600160a01b029116179055565b611861611c0c565b600c805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117143390565b816001600160a01b0316836001600160a01b0316036118f75760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016106c7565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61196f848484611459565b61197b84848484611c5f565b61100a5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016106c7565b606081600003611a095750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611a335780611a1d8161295f565b9150611a2c9050600a836126b9565b9150611a0d565b60008167ffffffffffffffff811115611a4e57611a4e612420565b6040519080825280601f01601f191660200182016040528015611a78576020820181803683370190505b5090505b841561145157611a8d600183612920565b9150611a9a600a86612978565b611aa5906030612933565b60f81b818381518110611aba57611aba6126cd565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611af4600a866126b9565b9450611a7c565b60006001600160e01b0319821663780e9d6360e01b148061056c575061056c82611dab565b611b28611c0c565b610768838383611deb565b611b3d8383611ea3565b611b4a6000848484611c5f565b6107685760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016106c7565b600c5460ff166109fa5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016106c7565b61173a81611ff1565b600c5460ff16156109fa5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016106c7565b60006001600160a01b0384163b15611da057604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611ca390339089908890889060040161298c565b6020604051808303816000875af1925050508015611cde575060408051601f3d908101601f19168201909252611cdb918101906129c8565b60015b611d86573d808015611d0c576040519150601f19603f3d011682016040523d82523d6000602084013e611d11565b606091505b508051600003611d7e5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016106c7565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611451565b506001949350505050565b60006001600160e01b031982166380ac58cd60e01b1480611ddc57506001600160e01b03198216635b5e139f60e01b145b8061056c575061056c82612098565b6001600160a01b038316611e4657611e4181600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b611e69565b816001600160a01b0316836001600160a01b031614611e6957611e6983826120cd565b6001600160a01b038216611e80576107688161216a565b826001600160a01b0316826001600160a01b031614610768576107688282612219565b6001600160a01b038216611ef95760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106c7565b6000818152600460205260409020546001600160a01b031615611f5e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106c7565b611f6a60008383611b20565b6001600160a01b0382166000908152600560205260408120805460019290611f93908490612933565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000611ffc82610cb7565b905061200a81600084611b20565b61201560008361136c565b6001600160a01b038116600090815260056020526040812080546001929061203e908490612920565b909155505060008281526004602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60006001600160e01b0319821663152a902d60e11b148061056c57506301ffc9a760e01b6001600160e01b031983161461056c565b600060016120da84610daa565b6120e49190612920565b600083815260096020526040902054909150808214612137576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a5460009061217c90600190612920565b6000838152600b6020526040812054600a80549394509092849081106121a4576121a46126cd565b9060005260206000200154905080600a83815481106121c5576121c56126cd565b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a8054806121fd576121fd6129e5565b6001900381819060005260206000200160009055905550505050565b600061222483610daa565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b6001600160e01b031981168114610b1b57600080fd5b60006020828403121561228557600080fd5b81356122908161225d565b9392505050565b6001600160a01b0381168114610b1b57600080fd5b80356001600160601b0381168114610c9f57600080fd5b600080604083850312156122d657600080fd5b82356122e181612297565b91506122ef602084016122ac565b90509250929050565b6000806040838503121561230b57600080fd5b50508035926020909101359150565b60005b8381101561233557818101518382015260200161231d565b50506000910152565b6000815180845261235681602086016020860161231a565b601f01601f19169290920160200192915050565b602081526000612290602083018461233e565b60006020828403121561238f57600080fd5b5035919050565b600080604083850312156123a957600080fd5b82356123b481612297565b946020939093013593505050565b6000806000606084860312156123d757600080fd5b83356123e281612297565b925060208401356123f281612297565b929592945050506040919091013590565b60006020828403121561241557600080fd5b813561229081612297565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561245157612451612420565b604051601f8501601f19908116603f0116810190828211818310171561247957612479612420565b8160405280935085815286868601111561249257600080fd5b858560208301376000602087830101525050509392505050565b6000602082840312156124be57600080fd5b813567ffffffffffffffff8111156124d557600080fd5b8201601f810184136124e657600080fd5b61145184823560208401612436565b60008060006060848603121561250a57600080fd5b83359250602084013561251c81612297565b915061252a604085016122ac565b90509250925092565b6000806040838503121561254657600080fd5b823561255181612297565b91506020830135801515811461256657600080fd5b809150509250929050565b60006020828403121561258357600080fd5b612290826122ac565b600080600080608085870312156125a257600080fd5b84356125ad81612297565b935060208501356125bd81612297565b925060408501359150606085013567ffffffffffffffff8111156125e057600080fd5b8501601f810187136125f157600080fd5b61260087823560208401612436565b91505092959194509250565b6000806040838503121561261f57600080fd5b823561262a81612297565b9150602083013561256681612297565b600181811c9082168061264e57607f821691505b6020821081036109e457634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561269e5761269e61266e565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826126c8576126c86126a3565b500490565b634e487b7160e01b600052603260045260246000fd5b601f82111561076857600081815260208120601f850160051c8101602086101561270a5750805b601f850160051c820191505b8181101561272957828155600101612716565b505050505050565b815167ffffffffffffffff81111561274b5761274b612420565b61275f81612759845461263a565b846126e3565b602080601f831160018114612794576000841561277c5750858301515b600019600386901b1c1916600185901b178555612729565b600085815260208120601f198616915b828110156127c3578886015182559484019460019091019084016127a4565b50858210156127e15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020808352600084546128058161263a565b8084870152604060018084166000811461282657600181146128405761286e565b60ff1985168984015283151560051b89018301955061286e565b896000528660002060005b858110156128665781548b820186015290830190880161284b565b8a0184019650505b509398975050505050505050565b600080845461288a8161263a565b600182811680156128a257600181146128b7576128e6565b60ff19841687528215158302870194506128e6565b8860005260208060002060005b858110156128dd5781548a8201529084019082016128c4565b50505082870194505b5050505083516128fa81836020880161231a565b01949350505050565b60006020828403121561291557600080fd5b815161229081612297565b8181038181111561056c5761056c61266e565b8082018082111561056c5761056c61266e565b60006020828403121561295857600080fd5b5051919050565b6000600182016129715761297161266e565b5060010190565b600082612987576129876126a3565b500690565b60006001600160a01b038087168352808616602084015250836040830152608060608301526129be608083018461233e565b9695505050505050565b6000602082840312156129da57600080fd5b81516122908161225d565b634e487b7160e01b600052603160045260246000fdfea164736f6c6343000810000a",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x241 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x55F804B3 GT PUSH2 0x145 JUMPI DUP1 PUSH4 0x96CE0795 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x4EB JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x4FE JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x525 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x4C0 JUMPI DUP1 PUSH4 0xBF7E214F EQ PUSH2 0x4D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x96CE0795 EQ PUSH2 0x45C JUMPI DUP1 PUSH4 0xA1448194 EQ PUSH2 0x487 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x49A JUMPI DUP1 PUSH4 0xAB51E23A EQ PUSH2 0x4AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6C0360EB GT PUSH2 0x114 JUMPI DUP1 PUSH4 0x7A9E5E4B GT PUSH2 0xF9 JUMPI DUP1 PUSH4 0x7A9E5E4B EQ PUSH2 0x439 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x44C JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x454 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6C0360EB EQ PUSH2 0x41E JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x426 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x55F804B3 EQ PUSH2 0x3DA JUMPI DUP1 PUSH4 0x5944C753 EQ PUSH2 0x3ED JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x400 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x40B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x1D8 JUMPI DUP1 PUSH4 0x3F4BA83A GT PUSH2 0x1A7 JUMPI DUP1 PUSH4 0x42842E0E GT PUSH2 0x18C JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x3A1 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x3B4 JUMPI DUP1 PUSH4 0x4F6CCCE7 EQ PUSH2 0x3C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x386 JUMPI DUP1 PUSH4 0x422627C3 EQ PUSH2 0x38E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD EQ PUSH2 0x31B JUMPI DUP1 PUSH4 0x2A55205A EQ PUSH2 0x32E JUMPI DUP1 PUSH4 0x2F745C59 EQ PUSH2 0x360 JUMPI DUP1 PUSH4 0x37F8649E EQ PUSH2 0x373 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x81812FC GT PUSH2 0x214 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x2AB JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x2D6 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0x1C9AD5B1 EQ PUSH2 0x2FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x246 JUMPI DUP1 PUSH4 0x4634D8D EQ PUSH2 0x26E JUMPI DUP1 PUSH4 0x67B61F2 EQ PUSH2 0x283 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x296 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x259 PUSH2 0x254 CALLDATASIZE PUSH1 0x4 PUSH2 0x2273 JUMP JUMPDEST PUSH2 0x561 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x281 PUSH2 0x27C CALLDATASIZE PUSH1 0x4 PUSH2 0x22C3 JUMP JUMPDEST PUSH2 0x572 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x281 PUSH2 0x291 CALLDATASIZE PUSH1 0x4 PUSH2 0x22F8 JUMP JUMPDEST PUSH2 0x588 JUMP JUMPDEST PUSH2 0x29E PUSH2 0x59A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x265 SWAP2 SWAP1 PUSH2 0x236A JUMP JUMPDEST PUSH2 0x2BE PUSH2 0x2B9 CALLDATASIZE PUSH1 0x4 PUSH2 0x237D JUMP JUMPDEST PUSH2 0x62C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x265 JUMP JUMPDEST PUSH2 0x281 PUSH2 0x2E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2396 JUMP JUMPDEST PUSH2 0x653 JUMP JUMPDEST PUSH1 0xA SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x265 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x309 CALLDATASIZE PUSH1 0x4 PUSH2 0x237D JUMP JUMPDEST PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x281 PUSH2 0x329 CALLDATASIZE PUSH1 0x4 PUSH2 0x23C2 JUMP JUMPDEST PUSH2 0x76D JUMP JUMPDEST PUSH2 0x341 PUSH2 0x33C CALLDATASIZE PUSH1 0x4 PUSH2 0x22F8 JUMP JUMPDEST PUSH2 0x7E6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x265 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x36E CALLDATASIZE PUSH1 0x4 PUSH2 0x2396 JUMP JUMPDEST PUSH2 0x892 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x381 CALLDATASIZE PUSH1 0x4 PUSH2 0x2403 JUMP JUMPDEST PUSH2 0x93A JUMP JUMPDEST PUSH2 0x281 PUSH2 0x9EA JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x39C CALLDATASIZE PUSH1 0x4 PUSH2 0x237D JUMP JUMPDEST PUSH2 0x9FC JUMP JUMPDEST PUSH2 0x281 PUSH2 0x3AF CALLDATASIZE PUSH1 0x4 PUSH2 0x23C2 JUMP JUMPDEST PUSH2 0xA8B JUMP JUMPDEST PUSH2 0x281 PUSH2 0x3C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x237D JUMP JUMPDEST PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x3D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x237D JUMP JUMPDEST PUSH2 0xB1E JUMP JUMPDEST PUSH2 0x29E PUSH2 0x3E8 CALLDATASIZE PUSH1 0x4 PUSH2 0x24AC JUMP JUMPDEST PUSH2 0xBC2 JUMP JUMPDEST PUSH2 0x281 PUSH2 0x3FB CALLDATASIZE PUSH1 0x4 PUSH2 0x24F5 JUMP JUMPDEST PUSH2 0xCA4 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0xFF AND PUSH2 0x259 JUMP JUMPDEST PUSH2 0x2BE PUSH2 0x419 CALLDATASIZE PUSH1 0x4 PUSH2 0x237D JUMP JUMPDEST PUSH2 0xCB7 JUMP JUMPDEST PUSH2 0x29E PUSH2 0xD1C JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x434 CALLDATASIZE PUSH1 0x4 PUSH2 0x2403 JUMP JUMPDEST PUSH2 0xDAA JUMP JUMPDEST PUSH2 0x281 PUSH2 0x447 CALLDATASIZE PUSH1 0x4 PUSH2 0x2403 JUMP JUMPDEST PUSH2 0xE44 JUMP JUMPDEST PUSH2 0x281 PUSH2 0xEBF JUMP JUMPDEST PUSH2 0x29E PUSH2 0xECF JUMP JUMPDEST PUSH1 0xE SLOAD PUSH2 0x46F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x265 JUMP JUMPDEST PUSH2 0x281 PUSH2 0x495 CALLDATASIZE PUSH1 0x4 PUSH2 0x2396 JUMP JUMPDEST PUSH2 0xEDE JUMP JUMPDEST PUSH2 0x281 PUSH2 0x4A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x2533 JUMP JUMPDEST PUSH2 0xF15 JUMP JUMPDEST PUSH2 0x46F PUSH2 0x4BB CALLDATASIZE PUSH1 0x4 PUSH2 0x2571 JUMP JUMPDEST PUSH2 0xF20 JUMP JUMPDEST PUSH2 0x281 PUSH2 0x4CE CALLDATASIZE PUSH1 0x4 PUSH2 0x258C JUMP JUMPDEST PUSH2 0xF91 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH2 0x2BE SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x29E PUSH2 0x4F9 CALLDATASIZE PUSH1 0x4 PUSH2 0x237D JUMP JUMPDEST PUSH2 0x1010 JUMP JUMPDEST PUSH2 0x2ED PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 JUMP JUMPDEST PUSH2 0x259 PUSH2 0x533 CALLDATASIZE PUSH1 0x4 PUSH2 0x260C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x56C DUP3 PUSH2 0x10EB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x57A PUSH2 0x10F6 JUMP JUMPDEST PUSH2 0x584 DUP3 DUP3 PUSH2 0x11BC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x590 PUSH2 0x10F6 JUMP JUMPDEST PUSH2 0x584 DUP3 DUP3 PUSH2 0x12B9 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x5A9 SWAP1 PUSH2 0x263A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5D5 SWAP1 PUSH2 0x263A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x622 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5F7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x622 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x605 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x637 DUP3 PUSH2 0x1308 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x65E DUP3 PUSH2 0xCB7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x6D0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x6EC JUMPI POP PUSH2 0x6EC DUP2 CALLER PUSH2 0x533 JUMP JUMPDEST PUSH2 0x75E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206E6F7220617070726F76656420666F7220616C6C0000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH2 0x768 DUP4 DUP4 PUSH2 0x136C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x778 CALLER JUMPDEST DUP3 PUSH2 0x13DA JUMP JUMPDEST PUSH2 0x7DB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x1C881B9BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH2 0x768 DUP4 DUP4 DUP4 PUSH2 0x1459 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD DUP1 DUP4 ADD SWAP1 SWAP3 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 SWAP2 PUSH2 0x85B JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x20 DUP3 ADD MSTORE JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 PUSH2 0x2710 SWAP1 PUSH2 0x87A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP8 PUSH2 0x2684 JUMP JUMPDEST PUSH2 0x884 SWAP2 SWAP1 PUSH2 0x26B9 JUMP JUMPDEST SWAP2 MLOAD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x89D DUP4 PUSH2 0xDAA JUMP JUMPDEST DUP3 LT PUSH2 0x911 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243373231456E756D657261626C653A206F776E657220696E646578206F75 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x74206F6620626F756E6473000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 PUSH2 0x966 DUP2 PUSH2 0x1618 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x971 PUSH1 0x10 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0x981 PUSH1 0x10 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DIFFICULTY PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE TIMESTAMP DUP3 DUP5 ADD MSTORE NUMBER PUSH1 0x60 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE COINBASE SWAP1 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x80 DUP4 ADD MSTORE DUP3 MLOAD DUP1 DUP4 SUB PUSH1 0x74 ADD DUP2 MSTORE PUSH1 0x94 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 PUSH2 0x9D6 DUP3 DUP3 PUSH2 0x12B9 JUMP JUMPDEST PUSH2 0x9E0 DUP6 DUP4 PUSH2 0x16C5 JUMP JUMPDEST POP SWAP2 POP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9F2 PUSH2 0x10F6 JUMP JUMPDEST PUSH2 0x9FA PUSH2 0x16DF JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA78 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732314D657461646174613A2055524920717565727920666F72206E6F PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x3732BC34B9BA32B73A103A37B5B2B7 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x768 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xF91 JUMP JUMPDEST PUSH2 0xAAF CALLER PUSH2 0x772 JUMP JUMPDEST PUSH2 0xB12 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x1C881B9BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH2 0xB1B DUP2 PUSH2 0x1731 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB29 PUSH1 0xA SLOAD SWAP1 JUMP JUMPDEST DUP3 LT PUSH2 0xB9D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243373231456E756D657261626C653A20676C6F62616C20696E646578206F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7574206F6620626F756E64730000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH1 0xA DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xBB0 JUMPI PUSH2 0xBB0 PUSH2 0x26CD JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xBCC PUSH2 0x10F6 JUMP JUMPDEST PUSH1 0xD PUSH2 0xBD8 DUP4 DUP3 PUSH2 0x2731 JUMP JUMPDEST POP PUSH32 0x5411E8EBF1636D9E83D5FC4900BF80CBAC82E8790DA2A4C94DB4895E889EEDF6 PUSH1 0xD PUSH1 0x40 MLOAD PUSH2 0xC09 SWAP2 SWAP1 PUSH2 0x27F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0xD DUP1 SLOAD PUSH2 0xC1E SWAP1 PUSH2 0x263A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xC4A SWAP1 PUSH2 0x263A JUMP JUMPDEST DUP1 ISZERO PUSH2 0xC97 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xC6C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xC97 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xC7A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCAC PUSH2 0x10F6 JUMP JUMPDEST PUSH2 0x768 DUP4 DUP4 DUP4 PUSH2 0x174B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x56C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH1 0xD DUP1 SLOAD PUSH2 0xD29 SWAP1 PUSH2 0x263A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xD55 SWAP1 PUSH2 0x263A JUMP JUMPDEST DUP1 ISZERO PUSH2 0xDA2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xD77 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xDA2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xD85 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xE28 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xE4C PUSH2 0x10F6 JUMP JUMPDEST PUSH1 0xC DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000FF AND PUSH2 0x100 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x2F658B440C35314F52658EA8A740E05B284CDC84DC9AE01E891F21B8933E7CAD SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0xEC7 PUSH2 0x10F6 JUMP JUMPDEST PUSH2 0x9FA PUSH2 0x1859 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x5A9 SWAP1 PUSH2 0x263A JUMP JUMPDEST PUSH2 0xEE6 PUSH2 0x10F6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEF1 PUSH1 0x10 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0xF01 PUSH1 0x10 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xF0B DUP2 DUP4 PUSH2 0x12B9 JUMP JUMPDEST PUSH2 0x768 DUP4 DUP3 PUSH2 0x16C5 JUMP JUMPDEST PUSH2 0x584 CALLER DUP4 DUP4 PUSH2 0x1896 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF2A PUSH2 0x10F6 JUMP JUMPDEST PUSH1 0xE DUP1 SLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x601B85AA9305DBCFBFC81AA2D4B5126C1CE24AFDD1BAD47D6880E5B6DF081F57 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP PUSH1 0xE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xF9B CALLER DUP4 PUSH2 0x13DA JUMP JUMPDEST PUSH2 0xFFE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x1C881B9BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH2 0x100A DUP5 DUP5 DUP5 DUP5 PUSH2 0x1964 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x108F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732314D657461646174613A2055524920717565727920666F72206E6F PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x3732BC34B9BA32B73A103A37B5B2B7 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xD DUP1 SLOAD PUSH2 0x109E SWAP1 PUSH2 0x263A JUMP JUMPDEST SWAP1 POP GT PUSH2 0x10BA JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x56C JUMP JUMPDEST PUSH1 0xD PUSH2 0x10C5 DUP4 PUSH2 0x19E2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x10D6 SWAP3 SWAP2 SWAP1 PUSH2 0x287C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x56C DUP3 PUSH2 0x1AFB JUMP JUMPDEST PUSH1 0xC PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC340A24 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1149 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x116D SWAP2 SWAP1 PUSH2 0x2903 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x9FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x15539055551213D492569151 PUSH1 0xA2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH2 0x2710 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP3 AND GT ISZERO PUSH2 0x122A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243323938313A20726F79616C7479206665652077696C6C20657863656564 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x2073616C655072696365 PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1280 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243323938313A20696E76616C696420726563656976657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 SWAP2 AND PUSH1 0x20 SWAP1 SWAP3 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 MUL OR PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE DUP2 MLOAD DUP5 DUP2 MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0x4E26044F7FB3724A9375DEB74974FDC2F4E07F265EFCE87F93CFCED354258487 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB1B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x13A1 DUP3 PUSH2 0xCB7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x13E6 DUP4 PUSH2 0xCB7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x142D JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST DUP1 PUSH2 0x1451 JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1446 DUP5 PUSH2 0x62C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x146C DUP3 PUSH2 0xCB7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x14E8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x154A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH2 0x1555 DUP4 DUP4 DUP4 PUSH2 0x1B20 JUMP JUMPDEST PUSH2 0x1560 PUSH1 0x0 DUP3 PUSH2 0x136C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x1589 SWAP1 DUP5 SWAP1 PUSH2 0x2920 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x15B7 SWAP1 DUP5 SWAP1 PUSH2 0x2933 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP5 SWAP4 SWAP2 DUP8 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x40 MLOAD PUSH4 0x4C9BA321 PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE DUP3 SWAP2 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x99374642 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1665 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1689 SWAP2 SWAP1 PUSH2 0x2946 JUMP JUMPDEST EQ PUSH2 0xB1B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x15539055551213D492569151 PUSH1 0xA2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH2 0x584 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1B33 JUMP JUMPDEST PUSH2 0x16E7 PUSH2 0x1BB1 JUMP JUMPDEST PUSH1 0xC DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x173A DUP2 PUSH2 0x1C03 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH2 0x2710 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP3 AND GT ISZERO PUSH2 0x17B9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243323938313A20726F79616C7479206665652077696C6C20657863656564 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x2073616C655072696365 PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x180F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243323938313A20496E76616C696420706172616D65746572730000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE PUSH1 0x0 SWAP7 DUP8 MSTORE PUSH1 0x1 SWAP1 MSTORE SWAP2 SWAP1 SWAP5 KECCAK256 SWAP4 MLOAD SWAP1 MLOAD SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xA0 SHL MUL SWAP2 AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1861 PUSH2 0x1C0C JUMP JUMPDEST PUSH1 0xC DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x1714 CALLER SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x18F7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x196F DUP5 DUP5 DUP5 PUSH2 0x1459 JUMP JUMPDEST PUSH2 0x197B DUP5 DUP5 DUP5 DUP5 PUSH2 0x1C5F JUMP JUMPDEST PUSH2 0x100A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 SUB PUSH2 0x1A09 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0x1A33 JUMPI DUP1 PUSH2 0x1A1D DUP2 PUSH2 0x295F JUMP JUMPDEST SWAP2 POP PUSH2 0x1A2C SWAP1 POP PUSH1 0xA DUP4 PUSH2 0x26B9 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A0D JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1A4E JUMPI PUSH2 0x1A4E PUSH2 0x2420 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1A78 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0x1451 JUMPI PUSH2 0x1A8D PUSH1 0x1 DUP4 PUSH2 0x2920 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A9A PUSH1 0xA DUP7 PUSH2 0x2978 JUMP JUMPDEST PUSH2 0x1AA5 SWAP1 PUSH1 0x30 PUSH2 0x2933 JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1ABA JUMPI PUSH2 0x1ABA PUSH2 0x26CD JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0x1AF4 PUSH1 0xA DUP7 PUSH2 0x26B9 JUMP JUMPDEST SWAP5 POP PUSH2 0x1A7C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x780E9D63 PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x56C JUMPI POP PUSH2 0x56C DUP3 PUSH2 0x1DAB JUMP JUMPDEST PUSH2 0x1B28 PUSH2 0x1C0C JUMP JUMPDEST PUSH2 0x768 DUP4 DUP4 DUP4 PUSH2 0x1DEB JUMP JUMPDEST PUSH2 0x1B3D DUP4 DUP4 PUSH2 0x1EA3 JUMP JUMPDEST PUSH2 0x1B4A PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x1C5F JUMP JUMPDEST PUSH2 0x768 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0xFF AND PUSH2 0x9FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH2 0x173A DUP2 PUSH2 0x1FF1 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x9FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x1DA0 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x1CA3 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x298C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1CDE JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1CDB SWAP2 DUP2 ADD SWAP1 PUSH2 0x29C8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1D86 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1D0C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1D11 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1D7E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6C7 JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0x1451 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x1DDC JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x56C JUMPI POP PUSH2 0x56C DUP3 PUSH2 0x2098 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1E46 JUMPI PUSH2 0x1E41 DUP2 PUSH1 0xA DUP1 SLOAD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP3 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD DUP4 SSTORE SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xC65A7BB8D6351C1CF70C95A316CC6A92839C986682D98BC35F958F4883F9D2A8 ADD SSTORE JUMP JUMPDEST PUSH2 0x1E69 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1E69 JUMPI PUSH2 0x1E69 DUP4 DUP3 PUSH2 0x20CD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1E80 JUMPI PUSH2 0x768 DUP2 PUSH2 0x216A JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x768 JUMPI PUSH2 0x768 DUP3 DUP3 PUSH2 0x2219 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1EF9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x1F5E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6C7 JUMP JUMPDEST PUSH2 0x1F6A PUSH1 0x0 DUP4 DUP4 PUSH2 0x1B20 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x1F93 SWAP1 DUP5 SWAP1 PUSH2 0x2933 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP4 SWAP3 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FFC DUP3 PUSH2 0xCB7 JUMP JUMPDEST SWAP1 POP PUSH2 0x200A DUP2 PUSH1 0x0 DUP5 PUSH2 0x1B20 JUMP JUMPDEST PUSH2 0x2015 PUSH1 0x0 DUP4 PUSH2 0x136C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x203E SWAP1 DUP5 SWAP1 PUSH2 0x2920 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE MLOAD DUP4 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP4 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x152A902D PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x56C JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x56C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x20DA DUP5 PUSH2 0xDAA JUMP JUMPDEST PUSH2 0x20E4 SWAP2 SWAP1 PUSH2 0x2920 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP1 DUP3 EQ PUSH2 0x2137 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SLOAD DUP5 DUP5 MSTORE DUP2 DUP5 KECCAK256 DUP2 SWAP1 SSTORE DUP4 MSTORE PUSH1 0x9 SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP2 SWAP1 SSTORE JUMPDEST POP PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP4 MSTORE PUSH1 0x8 DUP2 MSTORE DUP4 DUP4 KECCAK256 SWAP2 DUP4 MSTORE MSTORE SWAP1 DUP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x0 SWAP1 PUSH2 0x217C SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x2920 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xA DUP1 SLOAD SWAP4 SWAP5 POP SWAP1 SWAP3 DUP5 SWAP1 DUP2 LT PUSH2 0x21A4 JUMPI PUSH2 0x21A4 PUSH2 0x26CD JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 PUSH1 0xA DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x21C5 JUMPI PUSH2 0x21C5 PUSH2 0x26CD JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE DUP3 DUP2 MSTORE PUSH1 0xB SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP5 SWAP1 SSTORE DUP6 DUP3 MSTORE DUP2 KECCAK256 SSTORE PUSH1 0xA DUP1 SLOAD DUP1 PUSH2 0x21FD JUMPI PUSH2 0x21FD PUSH2 0x29E5 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2224 DUP4 PUSH2 0xDAA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 SWAP1 SSTORE SWAP4 DUP3 MSTORE PUSH1 0x9 SWAP1 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xB1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2285 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2290 DUP2 PUSH2 0x225D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xB1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xC9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x22D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x22E1 DUP2 PUSH2 0x2297 JUMP JUMPDEST SWAP2 POP PUSH2 0x22EF PUSH1 0x20 DUP5 ADD PUSH2 0x22AC JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x230B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2335 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x231D JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2356 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x231A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2290 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x233E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x238F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x23A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x23B4 DUP2 PUSH2 0x2297 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x23D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x23E2 DUP2 PUSH2 0x2297 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x23F2 DUP2 PUSH2 0x2297 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2415 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2290 DUP2 PUSH2 0x2297 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 GT ISZERO PUSH2 0x2451 JUMPI PUSH2 0x2451 PUSH2 0x2420 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP6 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x2479 JUMPI PUSH2 0x2479 PUSH2 0x2420 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP1 SWAP4 POP DUP6 DUP2 MSTORE DUP7 DUP7 DUP7 ADD GT ISZERO PUSH2 0x2492 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP8 DUP4 ADD ADD MSTORE POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x24BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x24E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1451 DUP5 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x2436 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x250A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x251C DUP2 PUSH2 0x2297 JUMP JUMPDEST SWAP2 POP PUSH2 0x252A PUSH1 0x40 DUP6 ADD PUSH2 0x22AC JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2546 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2551 DUP2 PUSH2 0x2297 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2566 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2583 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2290 DUP3 PUSH2 0x22AC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x25A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x25AD DUP2 PUSH2 0x2297 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x25BD DUP2 PUSH2 0x2297 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x25E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x25F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2600 DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x2436 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x261F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x262A DUP2 PUSH2 0x2297 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2566 DUP2 PUSH2 0x2297 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x264E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x9E4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x269E JUMPI PUSH2 0x269E PUSH2 0x266E JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x26C8 JUMPI PUSH2 0x26C8 PUSH2 0x26A3 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x768 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x270A JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2729 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2716 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x274B JUMPI PUSH2 0x274B PUSH2 0x2420 JUMP JUMPDEST PUSH2 0x275F DUP2 PUSH2 0x2759 DUP5 SLOAD PUSH2 0x263A JUMP JUMPDEST DUP5 PUSH2 0x26E3 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2794 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x277C JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x2729 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x27C3 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x27A4 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x27E1 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE PUSH1 0x0 DUP5 SLOAD PUSH2 0x2805 DUP2 PUSH2 0x263A JUMP JUMPDEST DUP1 DUP5 DUP8 ADD MSTORE PUSH1 0x40 PUSH1 0x1 DUP1 DUP5 AND PUSH1 0x0 DUP2 EQ PUSH2 0x2826 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x2840 JUMPI PUSH2 0x286E JUMP JUMPDEST PUSH1 0xFF NOT DUP6 AND DUP10 DUP5 ADD MSTORE DUP4 ISZERO ISZERO PUSH1 0x5 SHL DUP10 ADD DUP4 ADD SWAP6 POP PUSH2 0x286E JUMP JUMPDEST DUP10 PUSH1 0x0 MSTORE DUP7 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x2866 JUMPI DUP2 SLOAD DUP12 DUP3 ADD DUP7 ADD MSTORE SWAP1 DUP4 ADD SWAP1 DUP9 ADD PUSH2 0x284B JUMP JUMPDEST DUP11 ADD DUP5 ADD SWAP7 POP POP JUMPDEST POP SWAP4 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 SLOAD PUSH2 0x288A DUP2 PUSH2 0x263A JUMP JUMPDEST PUSH1 0x1 DUP3 DUP2 AND DUP1 ISZERO PUSH2 0x28A2 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x28B7 JUMPI PUSH2 0x28E6 JUMP JUMPDEST PUSH1 0xFF NOT DUP5 AND DUP8 MSTORE DUP3 ISZERO ISZERO DUP4 MUL DUP8 ADD SWAP5 POP PUSH2 0x28E6 JUMP JUMPDEST DUP9 PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x28DD JUMPI DUP2 SLOAD DUP11 DUP3 ADD MSTORE SWAP1 DUP5 ADD SWAP1 DUP3 ADD PUSH2 0x28C4 JUMP JUMPDEST POP POP POP DUP3 DUP8 ADD SWAP5 POP JUMPDEST POP POP POP POP DUP4 MLOAD PUSH2 0x28FA DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x231A JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2915 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2290 DUP2 PUSH2 0x2297 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x56C JUMPI PUSH2 0x56C PUSH2 0x266E JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x56C JUMPI PUSH2 0x56C PUSH2 0x266E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2958 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2971 JUMPI PUSH2 0x2971 PUSH2 0x266E JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2987 JUMPI PUSH2 0x2987 PUSH2 0x26A3 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x29BE PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x233E JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x29DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2290 DUP2 PUSH2 0x225D JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP EXP ",
          "sourceMap": "564:3942:28:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4276:227;;;;;;:::i;:::-;;:::i;:::-;;;565:14:47;;558:22;540:41;;528:2;513:18;4276:227:28;;;;;;;;1544:147;;;;;;:::i;:::-;;:::i;:::-;;3087:110;;;;;;:::i;:::-;;:::i;2470:98:10:-;;;:::i;:::-;;;;;;;:::i;3935:167::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;2617:55:47;;;2599:74;;2587:2;2572:18;3935:167:10;2453:226:47;3467:407:10;;;;;;:::i;:::-;;:::i;1615:111:14:-;1702:10;:17;1615:111;;;3150:25:47;;;3138:2;3123:18;1615:111:14;3004:177:47;1052:44:28;;;;;;:::i;:::-;;;;;;;;;;;;;;4612:327:10;;;;;;:::i;:::-;;:::i;1671:432:18:-;;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;3839:55:47;;;3821:74;;3926:2;3911:18;;3904:34;;;;3794:18;1671:432:18;3647:297:47;1291:253:14;;;;;;:::i;:::-;;:::i;2757:322:28:-;;;;;;:::i;:::-;;:::i;2445:68::-;;;:::i;3205:197::-;;;;;;:::i;:::-;;:::i;5005:179:10:-;;;;;;:::i;:::-;;:::i;531:239:13:-;;;;;;:::i;:::-;;:::i;1798:230:14:-;;;;;;:::i;:::-;;:::i;1874:189:28:-;;;;;;:::i;:::-;;:::i;1699:167::-;;;;;;:::i;:::-;;:::i;1615:84:2:-;1685:7;;;;1615:84;;2190:218:10;;;;;;:::i;:::-;;:::i;986:21:28:-;;;:::i;1929:204:10:-;;;;;;:::i;:::-;;:::i;1527:174:45:-;;;;;;:::i;:::-;;:::i;2373:64:28:-;;;:::i;2632:102:10:-;;;:::i;1014:25:28:-;;;;;-1:-1:-1;;;;;1014:25:28;;;;;;-1:-1:-1;;;;;6251:39:47;;;6233:58;;6221:2;6206:18;1014:25:28;6089:208:47;2521:228:28;;;;;;:::i;:::-;;:::i;4169:153:10:-;;;;;;:::i;:::-;;:::i;1330:206:28:-;;;;;;:::i;:::-;;:::i;5250:315:10:-;;;;;;:::i;:::-;;:::i;512:27:45:-;;;;;;;;-1:-1:-1;;;;;512:27:45;;;2071:294:28;;;;;;:::i;:::-;;:::i;915:62::-;;953:24;915:62;;4388:162:10;;;;;;:::i;:::-;-1:-1:-1;;;;;4508:25:10;;;4485:4;4508:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4388:162;4276:227:28;4430:4;4459:36;4483:11;4459:23;:36::i;:::-;4452:43;4276:227;-1:-1:-1;;4276:227:28:o;1544:147::-;892:15:45;:13;:15::i;:::-;1641:42:28::1;1660:8;1670:12;1641:18;:42::i;:::-;1544:147:::0;;:::o;3087:110::-;892:15:45;:13;:15::i;:::-;3166:23:28::1;3174:8;3184:4;3166:7;:23::i;2470:98:10:-:0;2524:13;2556:5;2549:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2470:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;-1:-1:-1;4071:24:10;;;;:15;:24;;;;;;-1:-1:-1;;;;;4071:24:10;;3935:167::o;3467:407::-;3547:13;3563:23;3578:7;3563:14;:23::i;:::-;3547:39;;3610:5;-1:-1:-1;;;;;3604:11:10;:2;-1:-1:-1;;;;;3604:11:10;;3596:57;;;;-1:-1:-1;;;3596:57:10;;9124:2:47;3596:57:10;;;9106:21:47;9163:2;9143:18;;;9136:30;9202:34;9182:18;;;9175:62;-1:-1:-1;;;9253:18:47;;;9246:31;9294:19;;3596:57:10;;;;;;;;;719:10:20;-1:-1:-1;;;;;3685:21:10;;;;:62;;-1:-1:-1;3710:37:10;3727:5;719:10:20;4388:162:10;:::i;3710:37::-;3664:171;;;;-1:-1:-1;;;3664:171:10;;9526:2:47;3664:171:10;;;9508:21:47;9565:2;9545:18;;;9538:30;9604:34;9584:18;;;9577:62;9675:32;9655:18;;;9648:60;9725:19;;3664:171:10;9324:426:47;3664:171:10;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3537:337;3467:407;;:::o;4612:327::-;4801:41;719:10:20;4820:12:10;4834:7;4801:18;:41::i;:::-;4793:100;;;;-1:-1:-1;;;4793:100:10;;9957:2:47;4793:100:10;;;9939:21:47;9996:2;9976:18;;;9969:30;10035:34;10015:18;;;10008:62;-1:-1:-1;;;10086:18:47;;;10079:44;10140:19;;4793:100:10;9755:410:47;4793:100:10;4904:28;4914:4;4920:2;4924:7;4904:9;:28::i;1671:432:18:-;1768:7;1825:27;;;:17;:27;;;;;;;;1796:56;;;;;;;;;-1:-1:-1;;;;;1796:56:18;;;;;-1:-1:-1;;;1796:56:18;;;-1:-1:-1;;;;;1796:56:18;;;;;;;;1768:7;;1863:90;;-1:-1:-1;1913:29:18;;;;;;;;;-1:-1:-1;1913:29:18;-1:-1:-1;;;;;1913:29:18;;;;-1:-1:-1;;;1913:29:18;;-1:-1:-1;;;;;1913:29:18;;;;;1863:90;2001:23;;;;1963:21;;2461:5;;1988:36;;-1:-1:-1;;;;;1988:36:18;:10;:36;:::i;:::-;1987:58;;;;:::i;:::-;2064:16;;;;;-1:-1:-1;1671:432:18;;-1:-1:-1;;;;1671:432:18:o;1291:253:14:-;1388:7;1423:23;1440:5;1423:16;:23::i;:::-;1415:5;:31;1407:87;;;;-1:-1:-1;;;1407:87:14;;10934:2:47;1407:87:14;;;10916:21:47;10973:2;10953:18;;;10946:30;11012:34;10992:18;;;10985:62;11083:13;11063:18;;;11056:41;11114:19;;1407:87:14;10732:407:47;1407:87:14;-1:-1:-1;;;;;;1511:19:14;;;;;;;;:12;:19;;;;;;;;:26;;;;;;;;;1291:253::o;2757:322:28:-;2832:7;953:24;1196:16:45;1206:5;1196:9;:16::i;:::-;2852:15:28::1;2870:25;:15;918:14:21::0;;827:112;2870:25:28::1;2852:43;;2908:27;:15;1032:19:21::0;;1050:1;1032:19;;;945:123;2908:27:28::1;3523:81:::0;;;3540:16;3523:81;;;;20172:19:47;;;;3558:15:28;20207:12:47;;;20200:28;3575:12:28;20244::47;;;;20237:28;;;;3589:14:28;20299:15:47;;-1:-1:-1;;20295:53:47;20281:12;;;20274:75;3523:81:28;;;;;;;;;20365:13:47;;;;3523:81:28;;;3513:92;;;;;2988:21:::1;2996:7;3005:3;2988:7;:21::i;:::-;3024:22;3034:2;3038:7;3024:9;:22::i;:::-;-1:-1:-1::0;3064:7:28;-1:-1:-1;1223:1:45::1;2757:322:28::0;;;;:::o;2445:68::-;892:15:45;:13;:15::i;:::-;2495:10:28::1;:8;:10::i;:::-;2445:68::o:0;3205:197::-;3261:7;7122:16:10;;;:7;:16;;;;;;-1:-1:-1;;;;;7122:16:10;3281:77:28;;;;-1:-1:-1;;;3281:77:28;;11346:2:47;3281:77:28;;;11328:21:47;11385:2;11365:18;;;11358:30;11424:34;11404:18;;;11397:62;-1:-1:-1;;;11475:18:47;;;11468:45;11530:19;;3281:77:28;11144:411:47;3281:77:28;-1:-1:-1;3376:18:28;;;;:8;:18;;;;;;;3205:197::o;5005:179:10:-;5138:39;5155:4;5161:2;5165:7;5138:39;;;;;;;;;;;;:16;:39::i;531:239:13:-;647:41;719:10:20;666:12:13;640:96:20;647:41:13;639:100;;;;-1:-1:-1;;;639:100:13;;9957:2:47;639:100:13;;;9939:21:47;9996:2;9976:18;;;9969:30;10035:34;10015:18;;;10008:62;-1:-1:-1;;;10086:18:47;;;10079:44;10140:19;;639:100:13;9755:410:47;639:100:13;749:14;755:7;749:5;:14::i;:::-;531:239;:::o;1798:230:14:-;1873:7;1908:30;1702:10;:17;;1615:111;1908:30;1900:5;:38;1892:95;;;;-1:-1:-1;;;1892:95:14;;11762:2:47;1892:95:14;;;11744:21:47;11801:2;11781:18;;;11774:30;11840:34;11820:18;;;11813:62;11911:14;11891:18;;;11884:42;11943:19;;1892:95:14;11560:408:47;1892:95:14;2004:10;2015:5;2004:17;;;;;;;;:::i;:::-;;;;;;;;;1997:24;;1798:230;;;:::o;1874:189:28:-;1948:13;892:15:45;:13;:15::i;:::-;1974:7:28::1;:17;1984:7:::0;1974;:17:::1;:::i;:::-;;2007:23;2022:7;2007:23;;;;;;:::i;:::-;;;;;;;;2048:7;2041:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;918:1:45;1874:189:28::0;;;:::o;1699:167::-;892:15:45;:13;:15::i;:::-;1809:49:28::1;1826:7;1835:8;1845:12;1809:16;:49::i;2190:218:10:-:0;2262:7;2297:16;;;:7;:16;;;;;;-1:-1:-1;;;;;2297:16:10;;2323:56;;;;-1:-1:-1;;;2323:56:10;;15479:2:47;2323:56:10;;;15461:21:47;15518:2;15498:18;;;15491:30;15557:26;15537:18;;;15530:54;15601:18;;2323:56:10;15277:348:47;986:21:28;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1929:204:10:-;2001:7;-1:-1:-1;;;;;2028:19:10;;2020:73;;;;-1:-1:-1;;;2020:73:10;;15832:2:47;2020:73:10;;;15814:21:47;15871:2;15851:18;;;15844:30;15910:34;15890:18;;;15883:62;15981:11;15961:18;;;15954:39;16010:19;;2020:73:10;15630:405:47;2020:73:10;-1:-1:-1;;;;;;2110:16:10;;;;;:9;:16;;;;;;;1929:204::o;1527:174:45:-;1595:15;:13;:15::i;:::-;1621:9;:25;;;;;-1:-1:-1;;;;;1621:25:45;;;;;;;;;;;;1662:31;;2599:74:47;;;1662:31:45;;2587:2:47;2572:18;1662:31:45;;;;;;;1527:174;:::o;2373:64:28:-;892:15:45;:13;:15::i;:::-;2421:8:28::1;:6;:8::i;2632:102:10:-:0;2688:13;2720:7;2713:14;;;;;:::i;2521:228:28:-;892:15:45;:13;:15::i;:::-;2595::28::1;2613:25;:15;918:14:21::0;;827:112;2613:25:28::1;2595:43;;2649:27;:15;1032:19:21::0;;1050:1;1032:19;;;945:123;2649:27:28::1;2687:21;2695:7;2704:3;2687:7;:21::i;:::-;2719:22;2729:2;2733:7;2719:9;:22::i;4169:153:10:-:0;4263:52;719:10:20;4296:8:10;4306;4263:18;:52::i;1330:206:28:-;1407:6;892:15:45;:13;:15::i;:::-;1426:11:28::1;:26:::0;;-1:-1:-1;;1426:26:28::1;-1:-1:-1::0;;;;;1426:26:28;::::1;::::0;;::::1;::::0;;;1468:31:::1;::::0;6233:58:47;;;1468:31:28::1;::::0;6221:2:47;6206:18;1468:31:28::1;;;;;;;-1:-1:-1::0;;1517:11:28::1;::::0;-1:-1:-1;;;;;1517:11:28::1;::::0;1330:206::o;5250:315:10:-;5418:41;719:10:20;5451:7:10;5418:18;:41::i;:::-;5410:100;;;;-1:-1:-1;;;5410:100:10;;9957:2:47;5410:100:10;;;9939:21:47;9996:2;9976:18;;;9969:30;10035:34;10015:18;;;10008:62;-1:-1:-1;;;10086:18:47;;;10079:44;10140:19;;5410:100:10;9755:410:47;5410:100:10;5520:38;5534:4;5540:2;5544:7;5553:4;5520:13;:38::i;:::-;5250:315;;;;:::o;2071:294:28:-;7099:4:10;7122:16;;;:7;:16;;;;;;2144:13:28;;-1:-1:-1;;;;;7122:16:10;2170:76:28;;;;-1:-1:-1;;;2170:76:28;;11346:2:47;2170:76:28;;;11328:21:47;11385:2;11365:18;;;11358:30;11424:34;11404:18;;;11397:62;-1:-1:-1;;;11475:18:47;;;11468:45;11530:19;;2170:76:28;11144:411:47;2170:76:28;2288:1;2270:7;2264:21;;;;;:::i;:::-;;;:25;:93;;;;;;;;;;;;;;;;;2316:7;2325:25;2342:7;2325:16;:25::i;:::-;2299:52;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2257:100;2071:294;-1:-1:-1;;2071:294:28:o;1099:168:15:-;1201:4;1224:36;1248:11;1224:23;:36::i;1760:117:45:-;1832:9;;;;;;;;;-1:-1:-1;;;;;1832:9:45;-1:-1:-1;;;;;1832:18:45;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1818:34:45;:10;-1:-1:-1;;;;;1818:34:45;;1810:59;;;;-1:-1:-1;;;1810:59:45;;17523:2:47;1810:59:45;;;17505:21:47;17562:2;17542:18;;;17535:30;-1:-1:-1;;;17581:18:47;;;17574:42;17633:18;;1810:59:45;17321:336:47;2734:327:18;2461:5;-1:-1:-1;;;;;2836:33:18;;;;2828:88;;;;-1:-1:-1;;;2828:88:18;;17864:2:47;2828:88:18;;;17846:21:47;17903:2;17883:18;;;17876:30;17942:34;17922:18;;;17915:62;-1:-1:-1;;;17993:18:47;;;17986:40;18043:19;;2828:88:18;17662:406:47;2828:88:18;-1:-1:-1;;;;;2934:22:18;;2926:60;;;;-1:-1:-1;;;2926:60:18;;18275:2:47;2926:60:18;;;18257:21:47;18314:2;18294:18;;;18287:30;18353:27;18333:18;;;18326:55;18398:18;;2926:60:18;18073:349:47;2926:60:18;3019:35;;;;;;;;;-1:-1:-1;;;;;3019:35:18;;;;;;-1:-1:-1;;;;;3019:35:18;;;;;;;;;;-1:-1:-1;;;2997:57:18;;;;-1:-1:-1;2997:57:18;2734:327::o;3730:144:28:-;3799:18;;;;:8;:18;;;;;;;;;:25;;;3840:26;;18601:25:47;;;18642:18;;;18635:34;;;3840:26:28;;18574:18:47;3840:26:28;;;;;;;3730:144;;:::o;11657:133:10:-;7099:4;7122:16;;;:7;:16;;;;;;-1:-1:-1;;;;;7122:16:10;11730:53;;;;-1:-1:-1;;;11730:53:10;;15479:2:47;11730:53:10;;;15461:21:47;15518:2;15498:18;;;15491:30;15557:26;15537:18;;;15530:54;15601:18;;11730:53:10;15277:348:47;10959:171:10;11033:24;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;11033:29:10;-1:-1:-1;;;;;11033:29:10;;;;;;;;:24;;11086:23;11033:24;11086:14;:23::i;:::-;-1:-1:-1;;;;;11077:46:10;;;;;;;;;;;10959:171;;:::o;7317:261::-;7410:4;7426:13;7442:23;7457:7;7442:14;:23::i;:::-;7426:39;;7494:5;-1:-1:-1;;;;;7483:16:10;:7;-1:-1:-1;;;;;7483:16:10;;:52;;;-1:-1:-1;;;;;;4508:25:10;;;4485:4;4508:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;7503:32;7483:87;;;;7563:7;-1:-1:-1;;;;;7539:31:10;:20;7551:7;7539:11;:20::i;:::-;-1:-1:-1;;;;;7539:31:10;;7483:87;7475:96;7317:261;-1:-1:-1;;;;7317:261:10:o;10242:605::-;10396:4;-1:-1:-1;;;;;10369:31:10;:23;10384:7;10369:14;:23::i;:::-;-1:-1:-1;;;;;10369:31:10;;10361:81;;;;-1:-1:-1;;;10361:81:10;;18882:2:47;10361:81:10;;;18864:21:47;18921:2;18901:18;;;18894:30;18960:34;18940:18;;;18933:62;19031:7;19011:18;;;19004:35;19056:19;;10361:81:10;18680:401:47;10361:81:10;-1:-1:-1;;;;;10460:16:10;;10452:65;;;;-1:-1:-1;;;10452:65:10;;19288:2:47;10452:65:10;;;19270:21:47;19327:2;19307:18;;;19300:30;19366:34;19346:18;;;19339:62;-1:-1:-1;;;19417:18:47;;;19410:34;19461:19;;10452:65:10;19086:400:47;10452:65:10;10528:39;10549:4;10555:2;10559:7;10528:20;:39::i;:::-;10629:29;10646:1;10650:7;10629:8;:29::i;:::-;-1:-1:-1;;;;;10669:15:10;;;;;;:9;:15;;;;;:20;;10688:1;;10669:15;:20;;10688:1;;10669:20;:::i;:::-;;;;-1:-1:-1;;;;;;;10699:13:10;;;;;;:9;:13;;;;;:18;;10716:1;;10699:13;:18;;10716:1;;10699:18;:::i;:::-;;;;-1:-1:-1;;10727:16:10;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;10727:21:10;-1:-1:-1;;;;;10727:21:10;;;;;;;;;10764:27;;10727:16;;10764:27;;;;;;;3537:337;3467:407;;:::o;2274:128:45:-;2341:9;;:27;;-1:-1:-1;;;2341:27:45;;2357:10;2341:27;;;2599:74:47;2372:5:45;;2341:9;;;-1:-1:-1;;;;;2341:9:45;;:15;;2572:18:47;;2341:27:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:36;2333:61;;;;-1:-1:-1;;;2333:61:45;;17523:2:47;2333:61:45;;;17505:21:47;17562:2;17542:18;;;17535:30;-1:-1:-1;;;17581:18:47;;;17574:42;17633:18;;2333:61:45;17321:336:47;7908:108:10;7983:26;7993:2;7997:7;7983:26;;;;;;;;;;;;:9;:26::i;2433:117:2:-;1486:16;:14;:16::i;:::-;2491:7:::1;:15:::0;;-1:-1:-1;;2491:15:2::1;::::0;;2521:22:::1;719:10:20::0;2530:12:2::1;2521:22;::::0;-1:-1:-1;;;;;2617:55:47;;;2599:74;;2587:2;2572:18;2521:22:2::1;;;;;;;2433:117::o:0;4117:151:28:-;4202:20;4214:7;4202:11;:20::i;:::-;4061:26:18;;;;:17;:26;;;;;4054:33;531:239:13:o;3495:381:18:-;2461:5;-1:-1:-1;;;;;3642:33:18;;;;3634:88;;;;-1:-1:-1;;;3634:88:18;;17864:2:47;3634:88:18;;;17846:21:47;17903:2;17883:18;;;17876:30;17942:34;17922:18;;;17915:62;-1:-1:-1;;;17993:18:47;;;17986:40;18043:19;;3634:88:18;17662:406:47;3634:88:18;-1:-1:-1;;;;;3740:22:18;;3732:62;;;;-1:-1:-1;;;3732:62:18;;20591:2:47;3732:62:18;;;20573:21:47;20630:2;20610:18;;;20603:30;20669:29;20649:18;;;20642:57;20716:18;;3732:62:18;20389:351:47;3732:62:18;3834:35;;;;;;;;-1:-1:-1;;;;;3834:35:18;;;;;-1:-1:-1;;;;;3834:35:18;;;;;;;;;;-1:-1:-1;3805:26:18;;;:17;:26;;;;;;:64;;;;;;;-1:-1:-1;;;3805:64:18;;;;;;3495:381::o;2186:115:2:-;1239:19;:17;:19::i;:::-;2245:7:::1;:14:::0;;-1:-1:-1;;2245:14:2::1;2255:4;2245:14;::::0;;2274:20:::1;2281:12;719:10:20::0;;640:96;11266:307:10;11416:8;-1:-1:-1;;;;;11407:17:10;:5;-1:-1:-1;;;;;11407:17:10;;11399:55;;;;-1:-1:-1;;;11399:55:10;;20947:2:47;11399:55:10;;;20929:21:47;20986:2;20966:18;;;20959:30;21025:27;21005:18;;;20998:55;21070:18;;11399:55:10;20745:349:47;11399:55:10;-1:-1:-1;;;;;11464:25:10;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;11464:46:10;;;;;;;;;;11525:41;;540::47;;;11525::10;;513:18:47;11525:41:10;;;;;;;11266:307;;;:::o;6426:305::-;6576:28;6586:4;6592:2;6596:7;6576:9;:28::i;:::-;6622:47;6645:4;6651:2;6655:7;6664:4;6622:22;:47::i;:::-;6614:110;;;;-1:-1:-1;;;6614:110:10;;21301:2:47;6614:110:10;;;21283:21:47;21340:2;21320:18;;;21313:30;21379:34;21359:18;;;21352:62;-1:-1:-1;;;21430:18:47;;;21423:48;21488:19;;6614:110:10;21099:414:47;392:703:22;448:13;665:5;674:1;665:10;661:51;;-1:-1:-1;;691:10:22;;;;;;;;;;;;-1:-1:-1;;;691:10:22;;;;;392:703::o;661:51::-;736:5;721:12;775:75;782:9;;775:75;;807:8;;;;:::i;:::-;;-1:-1:-1;829:10:22;;-1:-1:-1;837:2:22;829:10;;:::i;:::-;;;775:75;;;859:19;891:6;881:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;881:17:22;;859:39;;908:150;915:10;;908:150;;941:11;951:1;941:11;;:::i;:::-;;-1:-1:-1;1009:10:22;1017:2;1009:5;:10;:::i;:::-;996:24;;:2;:24;:::i;:::-;983:39;;966:6;973;966:14;;;;;;;;:::i;:::-;;;;:56;;;;;;;;;;-1:-1:-1;1036:11:22;1045:2;1036:11;;:::i;:::-;;;908:150;;990:222:14;1092:4;-1:-1:-1;;;;;;1115:50:14;;-1:-1:-1;;;1115:50:14;;:90;;;1169:36;1193:11;1169:23;:36::i;3882:227:28:-;1239:19:2;:17;:19::i;:::-;4056:45:28::1;4083:4;4089:2;4093:7;4056:26;:45::i;8237:309:10:-:0;8361:18;8367:2;8371:7;8361:5;:18::i;:::-;8410:53;8441:1;8445:2;8449:7;8458:4;8410:22;:53::i;:::-;8389:150;;;;-1:-1:-1;;;8389:150:10;;21301:2:47;8389:150:10;;;21283:21:47;21340:2;21320:18;;;21313:30;21379:34;21359:18;;;21352:62;-1:-1:-1;;;21430:18:47;;;21423:48;21488:19;;8389:150:10;21099:414:47;1945:106:2;1685:7;;;;2003:41;;;;-1:-1:-1;;;2003:41:2;;21977:2:47;2003:41:2;;;21959:21:47;22016:2;21996:18;;;21989:30;22055:22;22035:18;;;22028:50;22095:18;;2003:41:2;21775:344:47;1394:132:15;1462:20;1474:7;1462:11;:20::i;1767:106:2:-;1685:7;;;;1836:9;1828:38;;;;-1:-1:-1;;;1828:38:2;;22326:2:47;1828:38:2;;;22308:21:47;22365:2;22345:18;;;22338:30;22404:18;22384;;;22377:46;22440:18;;1828:38:2;22124:340:47;12342:831:10;12491:4;-1:-1:-1;;;;;12511:13:10;;1465:19:19;:23;12507:660:10;;12546:71;;-1:-1:-1;;;12546:71:10;;-1:-1:-1;;;;;12546:36:10;;;;;:71;;719:10:20;;12597:4:10;;12603:7;;12612:4;;12546:71;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12546:71:10;;;;;;;;-1:-1:-1;;12546:71:10;;;;;;;;;;;;:::i;:::-;;;12542:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12784:6;:13;12801:1;12784:18;12780:321;;12826:60;;-1:-1:-1;;;12826:60:10;;21301:2:47;12826:60:10;;;21283:21:47;21340:2;21320:18;;;21313:30;21379:34;21359:18;;;21352:62;-1:-1:-1;;;21430:18:47;;;21423:48;21488:19;;12826:60:10;21099:414:47;12780:321:10;13053:6;13047:13;13038:6;13034:2;13030:15;13023:38;12542:573;-1:-1:-1;;;;;;12667:51:10;-1:-1:-1;;;12667:51:10;;-1:-1:-1;12660:58:10;;12507:660;-1:-1:-1;13152:4:10;12342:831;;;;;;:::o;1570:300::-;1672:4;-1:-1:-1;;;;;;1707:40:10;;-1:-1:-1;;;1707:40:10;;:104;;-1:-1:-1;;;;;;;1763:48:10;;-1:-1:-1;;;1763:48:10;1707:104;:156;;;;1827:36;1851:11;1827:23;:36::i;2624:572:14:-;-1:-1:-1;;;;;2823:18:14;;2819:183;;2857:40;2889:7;4005:10;:17;;3978:24;;;;:15;:24;;;;;:44;;;4032:24;;;;;;;;;;;;3902:161;2857:40;2819:183;;;2926:2;-1:-1:-1;;;;;2918:10:14;:4;-1:-1:-1;;;;;2918:10:14;;2914:88;;2944:47;2977:4;2983:7;2944:32;:47::i;:::-;-1:-1:-1;;;;;3015:16:14;;3011:179;;3047:45;3084:7;3047:36;:45::i;3011:179::-;3119:4;-1:-1:-1;;;;;3113:10:14;:2;-1:-1:-1;;;;;3113:10:14;;3109:81;;3139:40;3167:2;3171:7;3139:27;:40::i;8868:427:10:-;-1:-1:-1;;;;;8947:16:10;;8939:61;;;;-1:-1:-1;;;8939:61:10;;23442:2:47;8939:61:10;;;23424:21:47;;;23461:18;;;23454:30;23520:34;23500:18;;;23493:62;23572:18;;8939:61:10;23240:356:47;8939:61:10;7099:4;7122:16;;;:7;:16;;;;;;-1:-1:-1;;;;;7122:16:10;:30;9010:58;;;;-1:-1:-1;;;9010:58:10;;23803:2:47;9010:58:10;;;23785:21:47;23842:2;23822:18;;;23815:30;23881;23861:18;;;23854:58;23929:18;;9010:58:10;23601:352:47;9010:58:10;9079:45;9108:1;9112:2;9116:7;9079:20;:45::i;:::-;-1:-1:-1;;;;;9135:13:10;;;;;;:9;:13;;;;;:18;;9152:1;;9135:13;:18;;9152:1;;9135:18;:::i;:::-;;;;-1:-1:-1;;9163:16:10;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;9163:21:10;-1:-1:-1;;;;;9163:21:10;;;;;;;;9200:33;;9163:16;;;9200:33;;9163:16;;9200:33;1544:147:28;;:::o;9512:406:10:-;9571:13;9587:23;9602:7;9587:14;:23::i;:::-;9571:39;;9621:48;9642:5;9657:1;9661:7;9621:20;:48::i;:::-;9707:29;9724:1;9728:7;9707:8;:29::i;:::-;-1:-1:-1;;;;;9747:16:10;;;;;;:9;:16;;;;;:21;;9767:1;;9747:16;:21;;9767:1;;9747:21;:::i;:::-;;;;-1:-1:-1;;9785:16:10;;;;:7;:16;;;;;;9778:23;;-1:-1:-1;;;;;;9778:23:10;;;9817:36;9793:7;;9785:16;-1:-1:-1;;;;;9817:36:10;;;;;9785:16;;9817:36;1544:147:28;;:::o;1408:213:18:-;1510:4;-1:-1:-1;;;;;;1533:41:18;;-1:-1:-1;;;1533:41:18;;:81;;-1:-1:-1;;;;;;;;;;937:40:24;;;1578:36:18;829:155:24;4680:970:14;4942:22;4992:1;4967:22;4984:4;4967:16;:22::i;:::-;:26;;;;:::i;:::-;5003:18;5024:26;;;:17;:26;;;;;;4942:51;;-1:-1:-1;5154:28:14;;;5150:323;;-1:-1:-1;;;;;5220:18:14;;5198:19;5220:18;;;:12;:18;;;;;;;;:34;;;;;;;;;5269:30;;;;;;:44;;;5385:30;;:17;:30;;;;;:43;;;5150:323;-1:-1:-1;5566:26:14;;;;:17;:26;;;;;;;;5559:33;;;-1:-1:-1;;;;;5609:18:14;;;;;:12;:18;;;;;:34;;;;;;;5602:41;4680:970::o;5938:1061::-;6212:10;:17;6187:22;;6212:21;;6232:1;;6212:21;:::i;:::-;6243:18;6264:24;;;:15;:24;;;;;;6632:10;:26;;6187:46;;-1:-1:-1;6264:24:14;;6187:46;;6632:26;;;;;;:::i;:::-;;;;;;;;;6610:48;;6694:11;6669:10;6680;6669:22;;;;;;;;:::i;:::-;;;;;;;;;;;;:36;;;;6773:28;;;:15;:28;;;;;;;:41;;;6942:24;;;;;6935:31;6976:10;:16;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;6009:990;;;5938:1061;:::o;3490:217::-;3574:14;3591:20;3608:2;3591:16;:20::i;:::-;-1:-1:-1;;;;;3621:16:14;;;;;;;:12;:16;;;;;;;;:24;;;;;;;;:34;;;3665:26;;;:17;:26;;;;;;:35;;;;-1:-1:-1;3490:217:14:o;14:131:47:-;-1:-1:-1;;;;;;88:32:47;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;:::-;384:5;150:245;-1:-1:-1;;;150:245:47:o;592:154::-;-1:-1:-1;;;;;671:5:47;667:54;660:5;657:65;647:93;;736:1;733;726:12;751:179;818:20;;-1:-1:-1;;;;;867:38:47;;857:49;;847:77;;920:1;917;910:12;935:319;1002:6;1010;1063:2;1051:9;1042:7;1038:23;1034:32;1031:52;;;1079:1;1076;1069:12;1031:52;1118:9;1105:23;1137:31;1162:5;1137:31;:::i;:::-;1187:5;-1:-1:-1;1211:37:47;1244:2;1229:18;;1211:37;:::i;:::-;1201:47;;935:319;;;;;:::o;1259:248::-;1327:6;1335;1388:2;1376:9;1367:7;1363:23;1359:32;1356:52;;;1404:1;1401;1394:12;1356:52;-1:-1:-1;;1427:23:47;;;1497:2;1482:18;;;1469:32;;-1:-1:-1;1259:248:47:o;1512:250::-;1597:1;1607:113;1621:6;1618:1;1615:13;1607:113;;;1697:11;;;1691:18;1678:11;;;1671:39;1643:2;1636:10;1607:113;;;-1:-1:-1;;1754:1:47;1736:16;;1729:27;1512:250::o;1767:271::-;1809:3;1847:5;1841:12;1874:6;1869:3;1862:19;1890:76;1959:6;1952:4;1947:3;1943:14;1936:4;1929:5;1925:16;1890:76;:::i;:::-;2020:2;1999:15;-1:-1:-1;;1995:29:47;1986:39;;;;2027:4;1982:50;;1767:271;-1:-1:-1;;1767:271:47:o;2043:220::-;2192:2;2181:9;2174:21;2155:4;2212:45;2253:2;2242:9;2238:18;2230:6;2212:45;:::i;2268:180::-;2327:6;2380:2;2368:9;2359:7;2355:23;2351:32;2348:52;;;2396:1;2393;2386:12;2348:52;-1:-1:-1;2419:23:47;;2268:180;-1:-1:-1;2268:180:47:o;2684:315::-;2752:6;2760;2813:2;2801:9;2792:7;2788:23;2784:32;2781:52;;;2829:1;2826;2819:12;2781:52;2868:9;2855:23;2887:31;2912:5;2887:31;:::i;:::-;2937:5;2989:2;2974:18;;;;2961:32;;-1:-1:-1;;;2684:315:47:o;3186:456::-;3263:6;3271;3279;3332:2;3320:9;3311:7;3307:23;3303:32;3300:52;;;3348:1;3345;3338:12;3300:52;3387:9;3374:23;3406:31;3431:5;3406:31;:::i;:::-;3456:5;-1:-1:-1;3513:2:47;3498:18;;3485:32;3526:33;3485:32;3526:33;:::i;:::-;3186:456;;3578:7;;-1:-1:-1;;;3632:2:47;3617:18;;;;3604:32;;3186:456::o;3949:247::-;4008:6;4061:2;4049:9;4040:7;4036:23;4032:32;4029:52;;;4077:1;4074;4067:12;4029:52;4116:9;4103:23;4135:31;4160:5;4135:31;:::i;4201:127::-;4262:10;4257:3;4253:20;4250:1;4243:31;4293:4;4290:1;4283:15;4317:4;4314:1;4307:15;4333:632;4398:5;4428:18;4469:2;4461:6;4458:14;4455:40;;;4475:18;;:::i;:::-;4550:2;4544:9;4518:2;4604:15;;-1:-1:-1;;4600:24:47;;;4626:2;4596:33;4592:42;4580:55;;;4650:18;;;4670:22;;;4647:46;4644:72;;;4696:18;;:::i;:::-;4736:10;4732:2;4725:22;4765:6;4756:15;;4795:6;4787;4780:22;4835:3;4826:6;4821:3;4817:16;4814:25;4811:45;;;4852:1;4849;4842:12;4811:45;4902:6;4897:3;4890:4;4882:6;4878:17;4865:44;4957:1;4950:4;4941:6;4933;4929:19;4925:30;4918:41;;;;4333:632;;;;;:::o;4970:451::-;5039:6;5092:2;5080:9;5071:7;5067:23;5063:32;5060:52;;;5108:1;5105;5098:12;5060:52;5148:9;5135:23;5181:18;5173:6;5170:30;5167:50;;;5213:1;5210;5203:12;5167:50;5236:22;;5289:4;5281:13;;5277:27;-1:-1:-1;5267:55:47;;5318:1;5315;5308:12;5267:55;5341:74;5407:7;5402:2;5389:16;5384:2;5380;5376:11;5341:74;:::i;5426:387::-;5502:6;5510;5518;5571:2;5559:9;5550:7;5546:23;5542:32;5539:52;;;5587:1;5584;5577:12;5539:52;5623:9;5610:23;5600:33;;5683:2;5672:9;5668:18;5655:32;5696:31;5721:5;5696:31;:::i;:::-;5746:5;-1:-1:-1;5770:37:47;5803:2;5788:18;;5770:37;:::i;:::-;5760:47;;5426:387;;;;;:::o;6302:416::-;6367:6;6375;6428:2;6416:9;6407:7;6403:23;6399:32;6396:52;;;6444:1;6441;6434:12;6396:52;6483:9;6470:23;6502:31;6527:5;6502:31;:::i;:::-;6552:5;-1:-1:-1;6609:2:47;6594:18;;6581:32;6651:15;;6644:23;6632:36;;6622:64;;6682:1;6679;6672:12;6622:64;6705:7;6695:17;;;6302:416;;;;;:::o;6723:184::-;6781:6;6834:2;6822:9;6813:7;6809:23;6805:32;6802:52;;;6850:1;6847;6840:12;6802:52;6873:28;6891:9;6873:28;:::i;6912:795::-;7007:6;7015;7023;7031;7084:3;7072:9;7063:7;7059:23;7055:33;7052:53;;;7101:1;7098;7091:12;7052:53;7140:9;7127:23;7159:31;7184:5;7159:31;:::i;:::-;7209:5;-1:-1:-1;7266:2:47;7251:18;;7238:32;7279:33;7238:32;7279:33;:::i;:::-;7331:7;-1:-1:-1;7385:2:47;7370:18;;7357:32;;-1:-1:-1;7440:2:47;7425:18;;7412:32;7467:18;7456:30;;7453:50;;;7499:1;7496;7489:12;7453:50;7522:22;;7575:4;7567:13;;7563:27;-1:-1:-1;7553:55:47;;7604:1;7601;7594:12;7553:55;7627:74;7693:7;7688:2;7675:16;7670:2;7666;7662:11;7627:74;:::i;:::-;7617:84;;;6912:795;;;;;;;:::o;8144:388::-;8212:6;8220;8273:2;8261:9;8252:7;8248:23;8244:32;8241:52;;;8289:1;8286;8279:12;8241:52;8328:9;8315:23;8347:31;8372:5;8347:31;:::i;:::-;8397:5;-1:-1:-1;8454:2:47;8439:18;;8426:32;8467:33;8426:32;8467:33;:::i;8537:380::-;8616:1;8612:12;;;;8659;;;8680:61;;8734:4;8726:6;8722:17;8712:27;;8680:61;8787:2;8779:6;8776:14;8756:18;8753:38;8750:161;;8833:10;8828:3;8824:20;8821:1;8814:31;8868:4;8865:1;8858:15;8896:4;8893:1;8886:15;10170:127;10231:10;10226:3;10222:20;10219:1;10212:31;10262:4;10259:1;10252:15;10286:4;10283:1;10276:15;10302:168;10342:7;10408:1;10404;10400:6;10396:14;10393:1;10390:21;10385:1;10378:9;10371:17;10367:45;10364:71;;;10415:18;;:::i;:::-;-1:-1:-1;10455:9:47;;10302:168::o;10475:127::-;10536:10;10531:3;10527:20;10524:1;10517:31;10567:4;10564:1;10557:15;10591:4;10588:1;10581:15;10607:120;10647:1;10673;10663:35;;10678:18;;:::i;:::-;-1:-1:-1;10712:9:47;;10607:120::o;11973:127::-;12034:10;12029:3;12025:20;12022:1;12015:31;12065:4;12062:1;12055:15;12089:4;12086:1;12079:15;12231:545;12333:2;12328:3;12325:11;12322:448;;;12369:1;12394:5;12390:2;12383:17;12439:4;12435:2;12425:19;12509:2;12497:10;12493:19;12490:1;12486:27;12480:4;12476:38;12545:4;12533:10;12530:20;12527:47;;;-1:-1:-1;12568:4:47;12527:47;12623:2;12618:3;12614:12;12611:1;12607:20;12601:4;12597:31;12587:41;;12678:82;12696:2;12689:5;12686:13;12678:82;;;12741:17;;;12722:1;12711:13;12678:82;;;12682:3;;;12231:545;;;:::o;12952:1352::-;13078:3;13072:10;13105:18;13097:6;13094:30;13091:56;;;13127:18;;:::i;:::-;13156:97;13246:6;13206:38;13238:4;13232:11;13206:38;:::i;:::-;13200:4;13156:97;:::i;:::-;13308:4;;13372:2;13361:14;;13389:1;13384:663;;;;14091:1;14108:6;14105:89;;;-1:-1:-1;14160:19:47;;;14154:26;14105:89;-1:-1:-1;;12909:1:47;12905:11;;;12901:24;12897:29;12887:40;12933:1;12929:11;;;12884:57;14207:81;;13354:944;;13384:663;12178:1;12171:14;;;12215:4;12202:18;;-1:-1:-1;;13420:20:47;;;13538:236;13552:7;13549:1;13546:14;13538:236;;;13641:19;;;13635:26;13620:42;;13733:27;;;;13701:1;13689:14;;;;13568:19;;13538:236;;;13542:3;13802:6;13793:7;13790:19;13787:201;;;13863:19;;;13857:26;-1:-1:-1;;13946:1:47;13942:14;;;13958:3;13938:24;13934:37;13930:42;13915:58;13900:74;;13787:201;-1:-1:-1;;;;;14034:1:47;14018:14;;;14014:22;14001:36;;-1:-1:-1;12952:1352:47:o;14309:963::-;14418:4;14447:2;14476;14465:9;14458:21;14499:1;14532:6;14526:13;14562:36;14588:9;14562:36;:::i;:::-;14634:6;14629:2;14618:9;14614:18;14607:34;14660:2;14681:1;14713:2;14702:9;14698:18;14730:1;14725:158;;;;14897:1;14892:354;;;;14691:555;;14725:158;-1:-1:-1;;14773:24:47;;14753:18;;;14746:52;14851:14;;14844:22;14841:1;14837:30;14822:46;;14818:55;;;-1:-1:-1;14725:158:47;;14892:354;14923:6;14920:1;14913:17;14971:2;14968:1;14958:16;14996:1;15010:180;15024:6;15021:1;15018:13;15010:180;;;15117:14;;15093:17;;;15089:26;;15082:50;15160:16;;;;15039:10;;15010:180;;;15214:17;;15210:26;;;-1:-1:-1;;14691:555:47;-1:-1:-1;15263:3:47;;14309:963;-1:-1:-1;;;;;;;;14309:963:47:o;16040:1020::-;16216:3;16245:1;16278:6;16272:13;16308:36;16334:9;16308:36;:::i;:::-;16363:1;16380:18;;;16407:133;;;;16554:1;16549:356;;;;16373:532;;16407:133;-1:-1:-1;;16440:24:47;;16428:37;;16513:14;;16506:22;16494:35;;16485:45;;;-1:-1:-1;16407:133:47;;16549:356;16580:6;16577:1;16570:17;16610:4;16655:2;16652:1;16642:16;16680:1;16694:165;16708:6;16705:1;16702:13;16694:165;;;16786:14;;16773:11;;;16766:35;16829:16;;;;16723:10;;16694:165;;;16698:3;;;16888:6;16883:3;16879:16;16872:23;;16373:532;;;;;16936:6;16930:13;16952:68;17011:8;17006:3;16999:4;16991:6;16987:17;16952:68;:::i;:::-;17036:18;;16040:1020;-1:-1:-1;;;;16040:1020:47:o;17065:251::-;17135:6;17188:2;17176:9;17167:7;17163:23;17159:32;17156:52;;;17204:1;17201;17194:12;17156:52;17236:9;17230:16;17255:31;17280:5;17255:31;:::i;19491:128::-;19558:9;;;19579:11;;;19576:37;;;19593:18;;:::i;19624:125::-;19689:9;;;19710:10;;;19707:36;;;19723:18;;:::i;19754:184::-;19824:6;19877:2;19865:9;19856:7;19852:23;19848:32;19845:52;;;19893:1;19890;19883:12;19845:52;-1:-1:-1;19916:16:47;;19754:184;-1:-1:-1;19754:184:47:o;21518:135::-;21557:3;21578:17;;;21575:43;;21598:18;;:::i;:::-;-1:-1:-1;21645:1:47;21634:13;;21518:135::o;21658:112::-;21690:1;21716;21706:35;;21721:18;;:::i;:::-;-1:-1:-1;21755:9:47;;21658:112::o;22469:512::-;22663:4;-1:-1:-1;;;;;22773:2:47;22765:6;22761:15;22750:9;22743:34;22825:2;22817:6;22813:15;22808:2;22797:9;22793:18;22786:43;;22865:6;22860:2;22849:9;22845:18;22838:34;22908:3;22903:2;22892:9;22888:18;22881:31;22929:46;22970:3;22959:9;22955:19;22947:6;22929:46;:::i;:::-;22921:54;22469:512;-1:-1:-1;;;;;;22469:512:47:o;22986:249::-;23055:6;23108:2;23096:9;23087:7;23083:23;23079:32;23076:52;;;23124:1;23121;23114:12;23076:52;23156:9;23150:16;23175:30;23199:5;23175:30;:::i;23958:127::-;24019:10;24014:3;24010:20;24007:1;24000:31;24050:4;24047:1;24040:15;24074:4;24071:1;24064:15"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "2152000",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "MINTER_ROLE()": "283",
            "approve(address,uint256)": "infinite",
            "authority()": "2437",
            "automaticMint(address)": "infinite",
            "balanceOf(address)": "2673",
            "baseURI()": "infinite",
            "burn(uint256)": "infinite",
            "changeDenominator(uint96)": "infinite",
            "denominator()": "2382",
            "getApproved(uint256)": "4770",
            "getDna(uint256)": "4743",
            "indexDna(uint256)": "2550",
            "isApprovedForAll(address,address)": "infinite",
            "name()": "infinite",
            "ownerOf(uint256)": "2644",
            "pause()": "infinite",
            "paused()": "2383",
            "royaltyInfo(uint256,uint256)": "5168",
            "safeMint(address,uint256)": "infinite",
            "safeTransferFrom(address,address,uint256)": "infinite",
            "safeTransferFrom(address,address,uint256,bytes)": "infinite",
            "setApprovalForAll(address,bool)": "26766",
            "setAuthority(address)": "infinite",
            "setBaseURI(string)": "infinite",
            "setDefaultRoyalty(address,uint96)": "infinite",
            "setDna(uint256,uint256)": "infinite",
            "setTokenRoyalty(uint256,address,uint96)": "infinite",
            "supportsInterface(bytes4)": "infinite",
            "symbol()": "infinite",
            "tokenByIndex(uint256)": "6826",
            "tokenOfOwnerByIndex(address,uint256)": "5014",
            "tokenURI(uint256)": "infinite",
            "totalSupply()": "2371",
            "transferFrom(address,address,uint256)": "infinite",
            "unpause()": "infinite"
          },
          "internal": {
            "_baseURI()": "infinite",
            "_beforeTokenTransfer(address,address,uint256)": "infinite",
            "_burn(uint256)": "infinite",
            "_random()": "infinite",
            "_setDna(uint256,uint256)": "infinite"
          }
        },
        "methodIdentifiers": {
          "MINTER_ROLE()": "d5391393",
          "approve(address,uint256)": "095ea7b3",
          "authority()": "bf7e214f",
          "automaticMint(address)": "37f8649e",
          "balanceOf(address)": "70a08231",
          "baseURI()": "6c0360eb",
          "burn(uint256)": "42966c68",
          "changeDenominator(uint96)": "ab51e23a",
          "denominator()": "96ce0795",
          "getApproved(uint256)": "081812fc",
          "getDna(uint256)": "422627c3",
          "indexDna(uint256)": "1c9ad5b1",
          "isApprovedForAll(address,address)": "e985e9c5",
          "name()": "06fdde03",
          "ownerOf(uint256)": "6352211e",
          "pause()": "8456cb59",
          "paused()": "5c975abb",
          "royaltyInfo(uint256,uint256)": "2a55205a",
          "safeMint(address,uint256)": "a1448194",
          "safeTransferFrom(address,address,uint256)": "42842e0e",
          "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
          "setApprovalForAll(address,bool)": "a22cb465",
          "setAuthority(address)": "7a9e5e4b",
          "setBaseURI(string)": "55f804b3",
          "setDefaultRoyalty(address,uint96)": "04634d8d",
          "setDna(uint256,uint256)": "067b61f2",
          "setTokenRoyalty(uint256,address,uint96)": "5944c753",
          "supportsInterface(bytes4)": "01ffc9a7",
          "symbol()": "95d89b41",
          "tokenByIndex(uint256)": "4f6ccce7",
          "tokenOfOwnerByIndex(address,uint256)": "2f745c59",
          "tokenURI(uint256)": "c87b56dd",
          "totalSupply()": "18160ddd",
          "transferFrom(address,address,uint256)": "23b872dd",
          "unpause()": "3f4ba83a"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"BaseURIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"denominator\",\"type\":\"uint96\"}],\"name\":\"DenominatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dna\",\"type\":\"uint256\"}],\"name\":\"DnaChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"automaticMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_denominator\",\"type\":\"uint96\"}],\"name\":\"changeDenominator\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"getDna\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexDna\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dna\",\"type\":\"uint256\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dna\",\"type\":\"uint256\"}],\"name\":\"setDna\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Kondux_NFT.sol\":\"Kondux\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xfa6873a010382f62e9ffe4592b305ef6e60f55502c95ed0ffa51eb10b5200d45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/ERC721Royalty.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../common/ERC2981.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Extension of ERC721 with the ERC2981 NFT Royalty Standard, a standardized way to retrieve royalty payment\\n * information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC721Royalty is ERC2981, ERC721 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC2981) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally clears the royalty information for the token.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n        _resetTokenRoyalty(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x7cdc887a364b6e3f9669bb4b16582e135121437399ac69d41db15012e09b96cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x9bc4d7eb03c4e87fd5122e03cdff5f60fa360d76925980ad022b2c6fac9876f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Kondux_NFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\nimport \\\"./types/AccessControlled.sol\\\";\\r\\n\\r\\n\\r\\ncontract Kondux is ERC721, ERC721Enumerable,Pausable, ERC721Burnable, ERC721Royalty, AccessControlled {\\r\\n    event BaseURIChanged(string baseURI);\\r\\n    event Received(address sender, uint value);\\r\\n    event DnaChanged(uint256 tokenID, uint256 dna);\\r\\n    event DenominatorChanged(uint96 denominator);\\r\\n\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\r\\n\\r\\n    string public baseURI;\\r\\n    uint96 public denominator;\\r\\n    \\r\\n    mapping (uint256 => uint256) public indexDna;\\r\\n\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n\\r\\n    constructor(string memory _name, string memory _symbol, address _authority) \\r\\n        ERC721(_name, _symbol) \\r\\n        AccessControlled(IAuthority(_authority)) {\\r\\n    }\\r\\n\\r\\n    function changeDenominator(uint96 _denominator) public onlyGovernor returns (uint96) {\\r\\n        denominator = _denominator;\\r\\n        emit DenominatorChanged(denominator);\\r\\n        return denominator;\\r\\n    }\\r\\n\\r\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) public onlyGovernor {\\r\\n        _setDefaultRoyalty(receiver, feeNumerator);\\r\\n    }\\r\\n\\r\\n    function setTokenRoyalty(uint256 tokenId,address receiver,uint96 feeNumerator) public onlyGovernor {\\r\\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory _newURI) external onlyGovernor returns (string memory) {\\r\\n        baseURI = _newURI;\\r\\n        emit BaseURIChanged(baseURI);\\r\\n        return baseURI;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) public view override(ERC721) returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, Strings.toString(tokenId))) : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    function pause() public onlyGovernor {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() public onlyGovernor {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    function safeMint(address to, uint256 dna) public onlyGovernor {\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        _tokenIdCounter.increment();\\r\\n        _setDna(tokenId, dna);\\r\\n        _safeMint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function automaticMint(address to) external onlyRole(MINTER_ROLE) returns (uint256) {\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n\\r\\n        _tokenIdCounter.increment();\\r\\n  \\r\\n        uint256 dna = _random();\\r\\n  \\r\\n        _setDna(tokenId, dna);\\r\\n  \\r\\n        _safeMint(to, tokenId);\\r\\n        return tokenId;\\r\\n    }\\r\\n\\r\\n    function setDna(uint256 _tokenID, uint256 _dna) public onlyGovernor {\\r\\n        _setDna(_tokenID, _dna);\\r\\n    }\\r\\n\\r\\n    function getDna (uint256 _tokenID) public view returns (uint256) {\\r\\n        require(_exists(_tokenID), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n        return indexDna[_tokenID];\\r\\n    }  \\r\\n\\r\\n    // Internal functions //\\r\\n\\r\\n    function _random() internal view returns(uint){\\r\\n        return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, block.number, block.coinbase)));\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return baseURI;\\r\\n    }\\r\\n\\r\\n    function _setDna(uint256 _tokenID, uint256 _dna) internal {\\r\\n        indexDna[_tokenID] = _dna;\\r\\n        emit DnaChanged(_tokenID, _dna);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\\r\\n        internal\\r\\n        whenNotPaused\\r\\n        override(ERC721, ERC721Enumerable)\\r\\n    {\\r\\n        super._beforeTokenTransfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function _burn(uint256 tokenId) internal override (ERC721Royalty, ERC721) {\\r\\n        super._burn(tokenId);\\r\\n        _resetTokenRoyalty(tokenId);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC721Enumerable, ERC721Royalty)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa83612e181d62dfe43fe2a8882bba927642f28aae5c301f21f315bda4c5d87fa\",\"license\":\"MIT\"},\"contracts/interfaces/IAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\ninterface IAuthority {\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event RolePushed(address indexed account, bytes32 _role);\\r\\n\\r\\n    event GovernorPulled(address indexed from, address indexed to);\\r\\n    event GuardianPulled(address indexed from, address indexed to);\\r\\n    event PolicyPulled(address indexed from, address indexed to);\\r\\n    event VaultPulled(address indexed from, address indexed to);\\r\\n\\r\\n    /* ========== VIEW ========== */\\r\\n\\r\\n    function governor() external view returns (address);\\r\\n\\r\\n    function guardian() external view returns (address);\\r\\n\\r\\n    function policy() external view returns (address);\\r\\n\\r\\n    function vault() external view returns (address);\\r\\n\\r\\n    function roles(address _addr) external view returns (bytes32);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x887a7eb2eeab95bba651b3d65b3d6a4695301acb16f27722524021afa1cf97d5\",\"license\":\"AGPL-3.0\"},\"contracts/types/AccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/IAuthority.sol\\\";\\r\\n\\r\\n/// @dev Reasoning for this contract = modifiers literaly copy code\\r\\n/// instead of pointing towards the logic to execute. Over many\\r\\n/// functions this bloats contract size unnecessarily.\\r\\n/// imho modifiers are a meme.\\r\\nabstract contract AccessControlled {\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event AuthorityUpdated(IAuthority authority);\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    IAuthority public authority;\\r\\n\\r\\n    /* ========== Constructor ========== */\\r\\n\\r\\n    constructor(IAuthority _authority) {\\r\\n        require(address(_authority) != address(0), \\\"Authority cannot be zero address\\\");\\r\\n        authority = _authority;\\r\\n        emit AuthorityUpdated(_authority);\\r\\n    }\\r\\n\\r\\n    /* ========== \\\"MODIFIERS\\\" ========== */\\r\\n\\r\\n    modifier onlyGovernor {\\r\\n        _onlyGovernor();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGuardian {\\r\\n        _onlyGuardian();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPolicy {\\r\\n        _onlyPolicy();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyVault {\\r\\n        _onlyVault();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyRole(bytes32 _role){\\r\\n        _onlyRole(_role);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========== GOV ONLY ========== */\\r\\n\\r\\n    function initializeAuthority(IAuthority _newAuthority) internal {\\r\\n        require(authority == IAuthority(address(0)), \\\"AUTHORITY_INITIALIZED\\\");\\r\\n        authority = _newAuthority;\\r\\n        emit AuthorityUpdated(_newAuthority);\\r\\n    }\\r\\n\\r\\n    function setAuthority(IAuthority _newAuthority) external {\\r\\n        _onlyGovernor();\\r\\n        authority = _newAuthority;\\r\\n        emit AuthorityUpdated(_newAuthority);\\r\\n    }\\r\\n\\r\\n    /* ========== INTERNAL CHECKS ========== */\\r\\n\\r\\n    function _onlyGovernor() internal view {\\r\\n        require(msg.sender == authority.governor(), \\\"UNAUTHORIZED\\\");\\r\\n    }\\r\\n\\r\\n    function _onlyGuardian() internal view {\\r\\n        require(msg.sender == authority.guardian(), \\\"UNAUTHORIZED\\\");\\r\\n    }\\r\\n\\r\\n    function _onlyPolicy() internal view {\\r\\n        require(msg.sender == authority.policy(), \\\"UNAUTHORIZED\\\");        \\r\\n    }\\r\\n\\r\\n    function _onlyVault() internal view {\\r\\n        require(msg.sender == authority.vault(), \\\"UNAUTHORIZED\\\");                \\r\\n    }\\r\\n\\r\\n    function _onlyRole(bytes32 _role) internal view {\\r\\n        require(authority.roles(msg.sender) == _role, \\\"UNAUTHORIZED\\\");\\r\\n    }\\r\\n\\r\\n  \\r\\n}\\r\\n\",\"keccak256\":\"0x69a30ff5614ccb42137005d86252f6a9009c36785ab7a3c25e2c49a24ba5af5e\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 3819,
            "contract": "contracts/Kondux_NFT.sol:Kondux",
            "label": "_defaultRoyaltyInfo",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(RoyaltyInfo)3816_storage"
          },
          {
            "astId": 3824,
            "contract": "contracts/Kondux_NFT.sol:Kondux",
            "label": "_tokenRoyaltyInfo",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)3816_storage)"
          },
          {
            "astId": 2355,
            "contract": "contracts/Kondux_NFT.sol:Kondux",
            "label": "_name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2357,
            "contract": "contracts/Kondux_NFT.sol:Kondux",
            "label": "_symbol",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2361,
            "contract": "contracts/Kondux_NFT.sol:Kondux",
            "label": "_owners",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 2365,
            "contract": "contracts/Kondux_NFT.sol:Kondux",
            "label": "_balances",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 2369,
            "contract": "contracts/Kondux_NFT.sol:Kondux",
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 2375,
            "contract": "contracts/Kondux_NFT.sol:Kondux",
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
          },
          {
            "astId": 3375,
            "contract": "contracts/Kondux_NFT.sol:Kondux",
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
          },
          {
            "astId": 3379,
            "contract": "contracts/Kondux_NFT.sol:Kondux",
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 3382,
            "contract": "contracts/Kondux_NFT.sol:Kondux",
            "label": "_allTokens",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 3386,
            "contract": "contracts/Kondux_NFT.sol:Kondux",
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 149,
            "contract": "contracts/Kondux_NFT.sol:Kondux",
            "label": "_paused",
            "offset": 0,
            "slot": "12",
            "type": "t_bool"
          },
          {
            "astId": 9620,
            "contract": "contracts/Kondux_NFT.sol:Kondux",
            "label": "authority",
            "offset": 1,
            "slot": "12",
            "type": "t_contract(IAuthority)9130"
          },
          {
            "astId": 5946,
            "contract": "contracts/Kondux_NFT.sol:Kondux",
            "label": "baseURI",
            "offset": 0,
            "slot": "13",
            "type": "t_string_storage"
          },
          {
            "astId": 5948,
            "contract": "contracts/Kondux_NFT.sol:Kondux",
            "label": "denominator",
            "offset": 0,
            "slot": "14",
            "type": "t_uint96"
          },
          {
            "astId": 5952,
            "contract": "contracts/Kondux_NFT.sol:Kondux",
            "label": "indexDna",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 5955,
            "contract": "contracts/Kondux_NFT.sol:Kondux",
            "label": "_tokenIdCounter",
            "offset": 0,
            "slot": "16",
            "type": "t_struct(Counter)4323_storage"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)dyn_storage": {
            "base": "t_uint256",
            "encoding": "dynamic_array",
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IAuthority)9130": {
            "encoding": "inplace",
            "label": "contract IAuthority",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_address,t_bool)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_uint256,t_uint256)"
          },
          "t_mapping(t_address,t_uint256)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_mapping(t_uint256,t_address)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32",
            "value": "t_address"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)3816_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
            "numberOfBytes": "32",
            "value": "t_struct(RoyaltyInfo)3816_storage"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Counter)4323_storage": {
            "encoding": "inplace",
            "label": "struct Counters.Counter",
            "members": [
              {
                "astId": 4322,
                "contract": "contracts/Kondux_NFT.sol:Kondux",
                "label": "_value",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoyaltyInfo)3816_storage": {
            "encoding": "inplace",
            "label": "struct ERC2981.RoyaltyInfo",
            "members": [
              {
                "astId": 3813,
                "contract": "contracts/Kondux_NFT.sol:Kondux",
                "label": "receiver",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
              },
              {
                "astId": 3815,
                "contract": "contracts/Kondux_NFT.sol:Kondux",
                "label": "royaltyFraction",
                "offset": 20,
                "slot": "0",
                "type": "t_uint96"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint96": {
            "encoding": "inplace",
            "label": "uint96",
            "numberOfBytes": "12"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/Authority.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\nimport \\\"./interfaces/IAuthority.sol\\\";\\r\\n\\r\\nimport \\\"./types/AccessControlled.sol\\\";\\r\\n\\r\\ncontract Authority is IAuthority, AccessControlled {\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    address public override governor;\\r\\n\\r\\n    address public override guardian;\\r\\n\\r\\n    address public override policy;\\r\\n\\r\\n    address public override vault;\\r\\n\\r\\n    address public newGovernor;\\r\\n\\r\\n    address public newGuardian;\\r\\n\\r\\n    address public newPolicy;\\r\\n\\r\\n    address public newVault;\\r\\n\\r\\n    mapping(address => bytes32) public override roles;\\r\\n\\r\\n    /* ========== Constructor ========== */\\r\\n\\r\\n    constructor(\\r\\n        address _governor,\\r\\n        address _guardian,\\r\\n        address _policy,\\r\\n        address _vault\\r\\n    ) AccessControlled(IAuthority(address(this))) {\\r\\n        require(_governor != address(0), \\\"Governor cannot be zero address\\\");\\r\\n        require(_guardian != address(0), \\\"Guardian cannot be zero address\\\");\\r\\n        require(_policy != address(0), \\\"Policy cannot be zero address\\\");\\r\\n        require(_vault != address(0), \\\"Vault cannot be zero address\\\");\\r\\n        governor = _governor;\\r\\n        emit GovernorPushed(address(0), governor, true);\\r\\n\\r\\n        guardian = _guardian;\\r\\n        emit GuardianPushed(address(0), guardian, true);\\r\\n\\r\\n        policy = _policy;\\r\\n        emit PolicyPushed(address(0), policy, true);\\r\\n\\r\\n        vault = _vault;\\r\\n        emit VaultPushed(address(0), vault, true);\\r\\n\\r\\n    }\\r\\n\\r\\n    modifier notAddressZero(address _account){\\r\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier _isContract(address addr){\\r\\n        require(isContract(addr), \\\"Is not a contract\\\");\\r\\n        _;\\r\\n    }    \\r\\n\\r\\n    /* ==========is Contract============ */\\r\\n\\r\\n    function isContract(address addr) public view returns (bool) {\\r\\n        uint size;\\r\\n        assembly { size := extcodesize(addr) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n\\r\\n    /* ========== GOV ONLY ========== */\\r\\n\\r\\n    function pushGovernor(address _newGovernor, bool _effectiveImmediately) external onlyGovernor notAddressZero(_newGovernor) {\\r\\n        if (_effectiveImmediately) governor = _newGovernor;\\r\\n        newGovernor = _newGovernor;\\r\\n        emit GovernorPushed(governor, newGovernor, _effectiveImmediately);\\r\\n    }\\r\\n\\r\\n    function pushGuardian(address _newGuardian, bool _effectiveImmediately) external onlyGovernor notAddressZero(_newGuardian){\\r\\n        if (_effectiveImmediately) guardian = _newGuardian;\\r\\n        newGuardian = _newGuardian;\\r\\n        emit GuardianPushed(guardian, newGuardian, _effectiveImmediately);\\r\\n    }\\r\\n\\r\\n    function pushPolicy(address _newPolicy, bool _effectiveImmediately) external onlyGovernor notAddressZero(_newPolicy) {\\r\\n        if (_effectiveImmediately) policy = _newPolicy;\\r\\n        newPolicy = _newPolicy;\\r\\n        emit PolicyPushed(policy, newPolicy, _effectiveImmediately);\\r\\n    }\\r\\n\\r\\n    function pushVault(address _newVault, bool _effectiveImmediately) external onlyGovernor notAddressZero(_newVault) {\\r\\n        if (_effectiveImmediately) vault = _newVault;\\r\\n        newVault = _newVault;\\r\\n        emit VaultPushed(vault, newVault, _effectiveImmediately);\\r\\n    }\\r\\n\\r\\n    function pushRole(address _account, bytes32 _role) external onlyGovernor notAddressZero(_account) {\\r\\n        roles[_account] = _role;\\r\\n        emit RolePushed(_account, _role);\\r\\n    }\\r\\n\\r\\n\\r\\n    /* ========== PENDING ROLE ONLY ========== */\\r\\n\\r\\n    function pullGovernor() external {\\r\\n        require(msg.sender == newGovernor, \\\"!newGovernor\\\");\\r\\n        emit GovernorPulled(governor, newGovernor);\\r\\n        governor = newGovernor;\\r\\n    }\\r\\n\\r\\n    function pullGuardian() external {\\r\\n        require(msg.sender == newGuardian, \\\"!newGuard\\\");\\r\\n        emit GuardianPulled(guardian, newGuardian);\\r\\n        guardian = newGuardian;\\r\\n    }\\r\\n\\r\\n    function pullPolicy() external {\\r\\n        require(msg.sender == newPolicy, \\\"!newPolicy\\\");\\r\\n        emit PolicyPulled(policy, newPolicy);\\r\\n        policy = newPolicy;\\r\\n    }\\r\\n\\r\\n    function pullVault() external {\\r\\n        require(msg.sender == newVault, \\\"!newVault\\\");\\r\\n        emit VaultPulled(vault, newVault);\\r\\n        vault = newVault;\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\"\n    },\n    \"contracts/interfaces/IAuthority.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\ninterface IAuthority {\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\r\\n    event RolePushed(address indexed account, bytes32 _role);\\r\\n\\r\\n    event GovernorPulled(address indexed from, address indexed to);\\r\\n    event GuardianPulled(address indexed from, address indexed to);\\r\\n    event PolicyPulled(address indexed from, address indexed to);\\r\\n    event VaultPulled(address indexed from, address indexed to);\\r\\n\\r\\n    /* ========== VIEW ========== */\\r\\n\\r\\n    function governor() external view returns (address);\\r\\n\\r\\n    function guardian() external view returns (address);\\r\\n\\r\\n    function policy() external view returns (address);\\r\\n\\r\\n    function vault() external view returns (address);\\r\\n\\r\\n    function roles(address _addr) external view returns (bytes32);\\r\\n\\r\\n}\\r\\n\"\n    },\n    \"contracts/types/AccessControlled.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/IAuthority.sol\\\";\\r\\n\\r\\n/// @dev Reasoning for this contract = modifiers literaly copy code\\r\\n/// instead of pointing towards the logic to execute. Over many\\r\\n/// functions this bloats contract size unnecessarily.\\r\\n/// imho modifiers are a meme.\\r\\nabstract contract AccessControlled {\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event AuthorityUpdated(IAuthority authority);\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    IAuthority public authority;\\r\\n\\r\\n    /* ========== Constructor ========== */\\r\\n\\r\\n    constructor(IAuthority _authority) {\\r\\n        require(address(_authority) != address(0), \\\"Authority cannot be zero address\\\");\\r\\n        authority = _authority;\\r\\n        emit AuthorityUpdated(_authority);\\r\\n    }\\r\\n\\r\\n    /* ========== \\\"MODIFIERS\\\" ========== */\\r\\n\\r\\n    modifier onlyGovernor {\\r\\n        _onlyGovernor();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGuardian {\\r\\n        _onlyGuardian();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPolicy {\\r\\n        _onlyPolicy();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyVault {\\r\\n        _onlyVault();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyRole(bytes32 _role){\\r\\n        _onlyRole(_role);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========== GOV ONLY ========== */\\r\\n\\r\\n    function initializeAuthority(IAuthority _newAuthority) internal {\\r\\n        require(authority == IAuthority(address(0)), \\\"AUTHORITY_INITIALIZED\\\");\\r\\n        authority = _newAuthority;\\r\\n        emit AuthorityUpdated(_newAuthority);\\r\\n    }\\r\\n\\r\\n    function setAuthority(IAuthority _newAuthority) external {\\r\\n        _onlyGovernor();\\r\\n        authority = _newAuthority;\\r\\n        emit AuthorityUpdated(_newAuthority);\\r\\n    }\\r\\n\\r\\n    /* ========== INTERNAL CHECKS ========== */\\r\\n\\r\\n    function _onlyGovernor() internal view {\\r\\n        require(msg.sender == authority.governor(), \\\"UNAUTHORIZED\\\");\\r\\n    }\\r\\n\\r\\n    function _onlyGuardian() internal view {\\r\\n        require(msg.sender == authority.guardian(), \\\"UNAUTHORIZED\\\");\\r\\n    }\\r\\n\\r\\n    function _onlyPolicy() internal view {\\r\\n        require(msg.sender == authority.policy(), \\\"UNAUTHORIZED\\\");        \\r\\n    }\\r\\n\\r\\n    function _onlyVault() internal view {\\r\\n        require(msg.sender == authority.vault(), \\\"UNAUTHORIZED\\\");                \\r\\n    }\\r\\n\\r\\n    function _onlyRole(bytes32 _role) internal view {\\r\\n        require(authority.roles(msg.sender) == _role, \\\"UNAUTHORIZED\\\");\\r\\n    }\\r\\n\\r\\n  \\r\\n}\\r\\n\"\n    },\n    \"contracts/Treasury.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./types/AccessControlled.sol\\\";\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract Treasury is AccessControlled {\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event Deposit(address indexed token, uint256 amount);\\r\\n    event DepositEther(uint256 amount);\\r\\n    event EtherDeposit(uint256 amount);\\r\\n    event Withdrawal(address indexed token, uint256 amount);\\r\\n    event EtherWithdrawal(uint256 amount);\\r\\n\\r\\n    /* ========== DATA STRUCTURES ========== */\\r\\n\\r\\n    enum STATUS {\\r\\n        RESERVEDEPOSITOR,\\r\\n        RESERVESPENDER,\\r\\n        RESERVETOKEN\\r\\n    }\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    IERC20 public immutable Kondux;\\r\\n\\r\\n\\r\\n    string internal notAccepted = \\\"Treasury: not accepted\\\";\\r\\n    string internal notApproved = \\\"Treasury: not approved\\\";\\r\\n    string internal invalidToken = \\\"Treasury: invalid token\\\";\\r\\n\\r\\n    mapping(STATUS => mapping(address => bool)) public permissions;\\r\\n\\r\\n    /* ========== CONSTRUCTOR ========== */\\r\\n\\r\\n    constructor(\\r\\n        address _authority,\\r\\n        address _kondux\\r\\n    ) AccessControlled(IAuthority(_authority)) {\\r\\n        require(_kondux != address(0), \\\"Zero address: Kondux\\\");\\r\\n        Kondux = IERC20(_kondux);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice allow approved address to deposit an asset for Kondux\\r\\n     * @param _amount uint256\\r\\n     * @param _token address\\r\\n     */\\r\\n    function deposit(\\r\\n        uint256 _amount,\\r\\n        address _token\\r\\n    ) external {\\r\\n        if (permissions[STATUS.RESERVETOKEN][_token]) {\\r\\n            require(permissions[STATUS.RESERVEDEPOSITOR][msg.sender], notApproved);\\r\\n        } else {\\r\\n            revert(invalidToken);\\r\\n        }\\r\\n\\r\\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);      \\r\\n\\r\\n        emit Deposit(_token, _amount);\\r\\n    }\\r\\n\\r\\n    function depositEther () external payable {\\r\\n        require(permissions[STATUS.RESERVEDEPOSITOR][msg.sender], notApproved);                \\r\\n                \\r\\n        emit DepositEther(msg.value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice allow approved address to withdraw Kondux from reserves\\r\\n     * @param _amount uint256\\r\\n     * @param _token address\\r\\n     */\\r\\n    function withdraw(uint256 _amount, address _token) external {\\r\\n        require(permissions[STATUS.RESERVETOKEN][_token], notAccepted); // Only reserves can be used for redemptions\\r\\n        require(permissions[STATUS.RESERVESPENDER][msg.sender], notApproved);\\r\\n\\r\\n        IERC20(_token).transferFrom(address(this), msg.sender, _amount);\\r\\n\\r\\n        emit Withdrawal(_token, _amount);\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        // require(permissions[STATUS.RESERVEDEPOSITOR][msg.sender], notApproved);\\r\\n        emit EtherDeposit(msg.value);\\r\\n    }\\r\\n    \\r\\n    function withdrawEther(uint _amount) external {\\r\\n        require(permissions[STATUS.RESERVESPENDER][msg.sender], notApproved);\\r\\n        require(payable(msg.sender).send(_amount));\\r\\n\\r\\n        emit EtherWithdrawal(_amount);\\r\\n    }\\r\\n\\r\\n    function setPermission(\\r\\n        STATUS _status,\\r\\n        address _address,\\r\\n        bool _permission\\r\\n    ) public onlyGovernor {\\r\\n        permissions[_status][_address] = _permission;\\r\\n    }\\r\\n}\"\n    },\n    \"hardhat/console.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/ERC721Royalty.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../common/ERC2981.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Extension of ERC721 with the ERC2981 NFT Royalty Standard, a standardized way to retrieve royalty payment\\n * information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC721Royalty is ERC2981, ERC721 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC2981) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally clears the royalty information for the token.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n        _resetTokenRoyalty(tokenId);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/common/ERC2981.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\n    },\n    \"contracts/Marketplace.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"./interfaces/IMarketplace.sol\\\";\\r\\nimport \\\"./interfaces/INFTContract.sol\\\";\\r\\nimport \\\"./NFTCommon.sol\\\";\\r\\nimport \\\"./extensions/MarketplaceFeeCollector.sol\\\";\\r\\n\\r\\n// todo: think about how on transfer we can delete the ask of prev owner\\r\\n// might not be necessary if we bake in checks, and if checks fail: delete\\r\\n// todo: check out 0.8.9 custom types\\r\\ncontract Marketplace is IMarketplace, MarketplaceFeeCollector {\\r\\n    using Address for address payable;\\r\\n    using NFTCommon for INFTContract;\\r\\n\\r\\n    mapping(address => mapping(uint256 => Ask)) public asks;\\r\\n    mapping(address => mapping(uint256 => Bid)) public bids;\\r\\n    mapping(address => uint256) public escrow;\\r\\n\\r\\n    // =====================================================================\\r\\n\\r\\n    string public constant REVERT_NOT_OWNER_OF_TOKEN_ID =\\r\\n        \\\"Marketplace::not an owner of token ID\\\";\\r\\n    string public constant REVERT_OWNER_OF_TOKEN_ID =\\r\\n        \\\"Marketplace::owner of token ID\\\";\\r\\n    string public constant REVERT_BID_TOO_LOW = \\\"Marketplace::bid too low\\\";\\r\\n    string public constant REVERT_NOT_A_CREATOR_OF_BID =\\r\\n        \\\"Marketplace::not a creator of the bid\\\";\\r\\n    string public constant REVERT_NOT_A_CREATOR_OF_ASK =\\r\\n        \\\"Marketplace::not a creator of the ask\\\";\\r\\n    string public constant REVERT_ASK_DOES_NOT_EXIST =\\r\\n        \\\"Marketplace::ask does not exist\\\";\\r\\n    string public constant REVERT_CANT_ACCEPT_OWN_ASK =\\r\\n        \\\"Marketplace::cant accept own ask\\\";\\r\\n    string public constant REVERT_ASK_IS_RESERVED =\\r\\n        \\\"Marketplace::ask is reserved\\\";\\r\\n    string public constant REVERT_ASK_INSUFFICIENT_VALUE =\\r\\n        \\\"Marketplace::ask price higher than sent value\\\";\\r\\n    string public constant REVERT_ASK_SELLER_NOT_OWNER =\\r\\n        \\\"Marketplace::ask creator not owner\\\";\\r\\n    string public constant REVERT_NFT_NOT_SENT = \\\"Marketplace::NFT not sent\\\";\\r\\n    string public constant REVERT_INSUFFICIENT_ETHER =\\r\\n        \\\"Marketplace::insufficient ether sent\\\";\\r\\n\\r\\n    // =====================================================================\\r\\n\\r\\n    constructor(address _authority) MarketplaceFeeCollector(_authority) {\\r\\n    }\\r\\n\\r\\n    // ======= CREATE ASK / BID ============================================\\r\\n\\r\\n    /// @notice Creates an ask for (`nft`, `tokenID`) tuple for `price`, which can\\r\\n    /// be reserved for `to`, if `to` is not a zero address.\\r\\n    /// @dev Creating an ask requires msg.sender to have at least one qty of\\r\\n    /// (`nft`, `tokenID`).\\r\\n    /// @param nft     An array of ERC-721 and / or ERC-1155 addresses.\\r\\n    /// @param tokenID Token Ids of the NFTs msg.sender wishes to sell.\\r\\n    /// @param price   Prices at which the seller is willing to sell the NFTs.\\r\\n    /// @param to      Addresses for which the sale is reserved. If zero address,\\r\\n    /// then anyone can accept.\\r\\n    function createAsk(\\r\\n        INFTContract[] calldata nft,\\r\\n        uint256[] calldata tokenID,\\r\\n        uint256[] calldata price,\\r\\n        address[] calldata to\\r\\n    ) external override {\\r\\n        for (uint256 i = 0; i < nft.length; i++) {\\r\\n            require(\\r\\n                nft[i].quantityOf(msg.sender, tokenID[i]) > 0,\\r\\n                REVERT_NOT_OWNER_OF_TOKEN_ID\\r\\n            );\\r\\n            // if feecollector extension applied, this ensures math is correct\\r\\n            require(price[i] > 10_000, \\\"price too low\\\");\\r\\n\\r\\n            // overwristes or creates a new one\\r\\n            asks[address(nft[i])][tokenID[i]] = Ask({\\r\\n                exists: true,\\r\\n                seller: msg.sender,\\r\\n                price: price[i],\\r\\n                to: to[i]\\r\\n            });\\r\\n\\r\\n            emit CreateAsk({\\r\\n                nft: address(nft[i]),\\r\\n                tokenID: tokenID[i],\\r\\n                price: price[i],\\r\\n                to: to[i]\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Creates a bid on (`nft`, `tokenID`) tuple for `price`.\\r\\n    /// @param nft     An array of ERC-721 and / or ERC-1155 addresses.\\r\\n    /// @param tokenID Token Ids of the NFTs msg.sender wishes to buy.\\r\\n    /// @param price   Prices at which the buyer is willing to buy the NFTs.\\r\\n    function createBid(\\r\\n        INFTContract[] calldata nft,\\r\\n        uint256[] calldata tokenID,\\r\\n        uint256[] calldata price\\r\\n    ) external payable override {\\r\\n        uint256 totalPrice = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < nft.length; i++) {\\r\\n            address nftAddress = address(nft[i]);\\r\\n            // bidding on own NFTs is possible. But then again, even if we wanted to disallow it,\\r\\n            // it would not be an effective mechanism, since the agent can bid from his other\\r\\n            // wallets\\r\\n            require(\\r\\n                msg.value > bids[nftAddress][tokenID[i]].price,\\r\\n                REVERT_BID_TOO_LOW\\r\\n            );\\r\\n\\r\\n            // if bid existed, let the prev. creator withdraw their bid. new overwrites\\r\\n            if (bids[nftAddress][tokenID[i]].exists) {\\r\\n                escrow[bids[nftAddress][tokenID[i]].buyer] += bids[nftAddress][\\r\\n                    tokenID[i]\\r\\n                ].price;\\r\\n            }\\r\\n\\r\\n            // overwrites or creates a new one\\r\\n            bids[nftAddress][tokenID[i]] = Bid({\\r\\n                exists: true,\\r\\n                buyer: msg.sender,\\r\\n                price: price[i]\\r\\n            });\\r\\n\\r\\n            emit CreateBid({\\r\\n                nft: nftAddress,\\r\\n                tokenID: tokenID[i],\\r\\n                price: price[i]\\r\\n            });\\r\\n\\r\\n            totalPrice += price[i];\\r\\n        }\\r\\n\\r\\n        require(totalPrice == msg.value, REVERT_INSUFFICIENT_ETHER);\\r\\n    }\\r\\n\\r\\n    // ======= CANCEL ASK / BID ============================================\\r\\n\\r\\n    /// @notice Cancels ask(s) that the seller previously created.\\r\\n    /// @param nft     An array of ERC-721 and / or ERC-1155 addresses.\\r\\n    /// @param tokenID Token Ids of the NFTs msg.sender wishes to cancel the\\r\\n    /// asks on.\\r\\n    function cancelAsk(INFTContract[] calldata nft, uint256[] calldata tokenID)\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        for (uint256 i = 0; i < nft.length; i++) {\\r\\n            address nftAddress = address(nft[i]);\\r\\n            require(\\r\\n                asks[nftAddress][tokenID[i]].seller == msg.sender,\\r\\n                REVERT_NOT_A_CREATOR_OF_ASK\\r\\n            );\\r\\n\\r\\n            delete asks[nftAddress][tokenID[i]];\\r\\n\\r\\n            emit CancelAsk({nft: nftAddress, tokenID: tokenID[i]});\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Cancels bid(s) that the msg.sender previously created.\\r\\n    /// @param nft     An array of ERC-721 and / or ERC-1155 addresses.\\r\\n    /// @param tokenID Token Ids of the NFTs msg.sender wishes to cancel the\\r\\n    /// bids on.\\r\\n    function cancelBid(INFTContract[] calldata nft, uint256[] calldata tokenID)\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        for (uint256 i = 0; i < nft.length; i++) {\\r\\n            address nftAddress = address(nft[i]);\\r\\n            require(\\r\\n                bids[nftAddress][tokenID[i]].buyer == msg.sender,\\r\\n                REVERT_NOT_A_CREATOR_OF_BID\\r\\n            );\\r\\n\\r\\n            escrow[msg.sender] += bids[nftAddress][tokenID[i]].price;\\r\\n\\r\\n            delete bids[nftAddress][tokenID[i]];\\r\\n\\r\\n            emit CancelBid({nft: nftAddress, tokenID: tokenID[i]});\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ======= ACCEPT ASK / BID ===========================================\\r\\n\\r\\n    /// @notice Seller placed ask(s), you (buyer) are fine with the terms. You accept\\r\\n    /// their ask by sending the required msg.value and indicating the id of the\\r\\n    /// token(s) you are purchasing.\\r\\n    /// @param nft     An array of ERC-721 and / or ERC-1155 addresses.\\r\\n    /// @param tokenID Token Ids of the NFTs msg.sender wishes to accept the\\r\\n    /// asks on.\\r\\n    function acceptAsk(INFTContract[] calldata nft, uint256[] calldata tokenID)\\r\\n        external\\r\\n        payable\\r\\n        override\\r\\n    {\\r\\n        uint256 totalPrice = 0;\\r\\n        for (uint256 i = 0; i < nft.length; i++) {\\r\\n            address nftAddress = address(nft[i]);\\r\\n\\r\\n            require(\\r\\n                asks[nftAddress][tokenID[i]].exists,\\r\\n                REVERT_ASK_DOES_NOT_EXIST\\r\\n            );\\r\\n            require(\\r\\n                asks[nftAddress][tokenID[i]].seller != msg.sender,\\r\\n                REVERT_CANT_ACCEPT_OWN_ASK\\r\\n            );\\r\\n            if (asks[nftAddress][tokenID[i]].to != address(0)) {\\r\\n                require(\\r\\n                    asks[nftAddress][tokenID[i]].to == msg.sender,\\r\\n                    REVERT_ASK_IS_RESERVED\\r\\n                );\\r\\n            }\\r\\n            require(\\r\\n                nft[i].quantityOf(\\r\\n                    asks[nftAddress][tokenID[i]].seller,\\r\\n                    tokenID[i]\\r\\n                ) > 0,\\r\\n                REVERT_ASK_SELLER_NOT_OWNER\\r\\n            );\\r\\n\\r\\n            totalPrice += asks[nftAddress][tokenID[i]].price;\\r\\n\\r\\n            escrow[asks[nftAddress][tokenID[i]].seller] += _takeFee(\\r\\n                asks[nftAddress][tokenID[i]].price\\r\\n            );\\r\\n\\r\\n            // if there is a bid for this tokenID from msg.sender, cancel and refund\\r\\n            if (bids[nftAddress][tokenID[i]].buyer == msg.sender) {\\r\\n                escrow[bids[nftAddress][tokenID[i]].buyer] += bids[nftAddress][\\r\\n                    tokenID[i]\\r\\n                ].price;\\r\\n                delete bids[nftAddress][tokenID[i]];\\r\\n            }\\r\\n\\r\\n            emit AcceptAsk({\\r\\n                nft: nftAddress,\\r\\n                tokenID: tokenID[i],\\r\\n                price: asks[nftAddress][tokenID[i]].price,\\r\\n                to: asks[nftAddress][tokenID[i]].to\\r\\n            });\\r\\n\\r\\n            bool success = nft[i].safeTransferFrom_(\\r\\n                asks[nftAddress][tokenID[i]].seller,\\r\\n                msg.sender,\\r\\n                tokenID[i],\\r\\n                new bytes(0)\\r\\n            );\\r\\n            require(success, REVERT_NFT_NOT_SENT);\\r\\n\\r\\n            delete asks[nftAddress][tokenID[i]];\\r\\n        }\\r\\n\\r\\n        require(totalPrice == msg.value, REVERT_ASK_INSUFFICIENT_VALUE);\\r\\n    }\\r\\n\\r\\n    /// @notice You are the owner of the NFTs, someone submitted the bids on them.\\r\\n    /// You accept one or more of these bids.\\r\\n    /// @param nft     An array of ERC-721 and / or ERC-1155 addresses.\\r\\n    /// @param tokenID Token Ids of the NFTs msg.sender wishes to accept the\\r\\n    /// bids on.\\r\\n    function acceptBid(INFTContract[] calldata nft, uint256[] calldata tokenID)\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        uint256 escrowDelta = 0;\\r\\n        for (uint256 i = 0; i < nft.length; i++) {\\r\\n            require(\\r\\n                nft[i].quantityOf(msg.sender, tokenID[i]) > 0,\\r\\n                REVERT_NOT_OWNER_OF_TOKEN_ID\\r\\n            );\\r\\n\\r\\n            address nftAddress = address(nft[i]);\\r\\n\\r\\n            escrowDelta += bids[nftAddress][tokenID[i]].price;\\r\\n            // escrow[msg.sender] += bids[nftAddress][tokenID[i]].price;\\r\\n\\r\\n            emit AcceptBid({\\r\\n                nft: nftAddress,\\r\\n                tokenID: tokenID[i],\\r\\n                price: bids[nftAddress][tokenID[i]].price\\r\\n            });\\r\\n\\r\\n            bool success = nft[i].safeTransferFrom_(\\r\\n                msg.sender,\\r\\n                bids[nftAddress][tokenID[i]].buyer,\\r\\n                tokenID[i],\\r\\n                new bytes(0)\\r\\n            );\\r\\n            require(success, REVERT_NFT_NOT_SENT);\\r\\n\\r\\n            delete asks[nftAddress][tokenID[i]];\\r\\n            delete bids[nftAddress][tokenID[i]];\\r\\n        }\\r\\n\\r\\n        uint256 remaining = _takeFee(escrowDelta);\\r\\n        escrow[msg.sender] = remaining;\\r\\n    }\\r\\n\\r\\n    /// @notice Sellers can receive their payment by calling this function.\\r\\n    function withdraw() external override {\\r\\n        uint256 amount = escrow[msg.sender];\\r\\n        escrow[msg.sender] = 0;\\r\\n        payable(address(msg.sender)).sendValue(amount);\\r\\n    }\\r\\n\\r\\n    // ============ EXTENSIONS =============================================\\r\\n\\r\\n    /// @dev Hook that is called to collect the fees in FeeCollector extension.\\r\\n    /// Plain implementation of marketplace (without the FeeCollector extension)\\r\\n    /// has no fees.\\r\\n    /// @param totalPrice Total price payable for the trade(s).\\r\\n    function _takeFee(uint256 totalPrice) internal virtual returns (uint256) {\\r\\n        _beforeTokenTransferTakeFee(totalPrice);\\r\\n        return totalPrice;\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"contracts/interfaces/IMarketplace.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./INFTContract.sol\\\";\\r\\n\\r\\ninterface IMarketplace {\\r\\n\\r\\n    event CreateAsk(\\r\\n        address indexed nft,\\r\\n        uint256 indexed tokenID,\\r\\n        uint256 price,\\r\\n        address indexed to\\r\\n    );\\r\\n    event CancelAsk(address indexed nft, uint256 indexed tokenID);\\r\\n    event AcceptAsk(\\r\\n        address indexed nft,\\r\\n        uint256 indexed tokenID,\\r\\n        uint256 price,\\r\\n        address indexed to\\r\\n    );\\r\\n\\r\\n    event CreateBid(\\r\\n        address indexed nft,\\r\\n        uint256 indexed tokenID,\\r\\n        uint256 price\\r\\n    );\\r\\n    event CancelBid(address indexed nft, uint256 indexed tokenID);\\r\\n    event AcceptBid(\\r\\n        address indexed nft,\\r\\n        uint256 indexed tokenID,\\r\\n        uint256 price\\r\\n    );\\r\\n\\r\\n    struct Ask {\\r\\n        bool exists;\\r\\n        address seller;\\r\\n        uint256 price;\\r\\n        address to;\\r\\n    }\\r\\n\\r\\n    struct Bid {\\r\\n        bool exists;\\r\\n        address buyer;\\r\\n        uint256 price;\\r\\n    }\\r\\n\\r\\n    function createAsk(\\r\\n        INFTContract[] calldata nft,\\r\\n        uint256[] calldata tokenID,\\r\\n        uint256[] calldata price,\\r\\n        address[] calldata to\\r\\n    ) external;\\r\\n\\r\\n    function createBid(\\r\\n        INFTContract[] calldata nft,\\r\\n        uint256[] calldata tokenID,\\r\\n        uint256[] calldata price\\r\\n    ) external payable;\\r\\n\\r\\n    function cancelAsk(INFTContract[] calldata nft, uint256[] calldata tokenID)\\r\\n        external;\\r\\n\\r\\n    function cancelBid(INFTContract[] calldata nft, uint256[] calldata tokenID)\\r\\n        external;\\r\\n\\r\\n    function acceptAsk(INFTContract[] calldata nft, uint256[] calldata tokenID)\\r\\n        external\\r\\n        payable;\\r\\n\\r\\n    function acceptBid(INFTContract[] calldata nft, uint256[] calldata tokenID)\\r\\n        external;\\r\\n\\r\\n    function withdraw() external;\\r\\n}\\r\\n\"\n    },\n    \"contracts/interfaces/INFTContract.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface INFTContract {\\r\\n    // --------------- ERC1155 -----------------------------------------------------\\r\\n\\r\\n    /// @notice Get the balance of an account's tokens.\\r\\n    /// @param _owner  The address of the token holder\\r\\n    /// @param _id     ID of the token\\r\\n    /// @return        The _owner's balance of the token type requested\\r\\n    function balanceOf(address _owner, uint256 _id)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of the caller's tokens.\\r\\n    /// @dev MUST emit the ApprovalForAll event on success.\\r\\n    /// @param _operator  Address to add to the set of authorized operators\\r\\n    /// @param _approved  True if the operator is approved, false to revoke approval\\r\\n    function setApprovalForAll(address _operator, bool _approved) external;\\r\\n\\r\\n    /// @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\\r\\n    /// @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \\\"Approval\\\" section of the standard).\\r\\n    /// MUST revert if `_to` is the zero address.\\r\\n    /// MUST revert if balance of holder for token `_id` is lower than the `_value` sent.\\r\\n    /// MUST revert on any other error.\\r\\n    /// MUST emit the `TransferSingle` event to reflect the balance change (see \\\"Safe Transfer Rules\\\" section of the standard).\\r\\n    /// After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\\r\\n    /// @param _from    Source address\\r\\n    /// @param _to      Target address\\r\\n    /// @param _id      ID of the token type\\r\\n    /// @param _value   Transfer amount\\r\\n    /// @param _data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\\r\\n    function safeTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).\\r\\n    /// @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \\\"Approval\\\" section of the standard).\\r\\n    /// MUST revert if `_to` is the zero address.\\r\\n    /// MUST revert if length of `_ids` is not the same as length of `_values`.\\r\\n    /// MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient.\\r\\n    /// MUST revert on any other error.        \\r\\n    /// MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \\\"Safe Transfer Rules\\\" section of the standard).\\r\\n    /// Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\\r\\n    /// After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).                      \\r\\n    /// @param _from    Source address\\r\\n    /// @param _to      Target address\\r\\n    /// @param _ids     IDs of each token type (order and length must match _values array)\\r\\n    /// @param _values  Transfer amounts per token type (order and length must match _ids array)\\r\\n    /// @param _data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`\\r\\n    function safeBatchTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external;\\r\\n\\r\\n    // ---------------------- ERC721 ------------------------------------------------\\r\\n\\r\\n    /// @notice Find the owner of an NFT\\r\\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\\r\\n    ///  about them do throw.\\r\\n    /// @param tokenId The identifier for an NFT\\r\\n    /// @return owner  The address of the owner of the NFT\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    // function setApprovalForAll(address _operator, bool _approved) external;\\r\\n\\r\\n    /// @notice Change or reaffirm the approved address for an NFT\\r\\n    /// @dev The zero address indicates there is no approved address.\\r\\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\\r\\n    ///  operator of the current owner.\\r\\n    /// @param _approved The new approved NFT controller\\r\\n    /// @param _tokenId The NFT to approve\\r\\n    function approve(address _approved, uint256 _tokenId) external payable;\\r\\n\\r\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\r\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\r\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\r\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\r\\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\\r\\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\\r\\n    ///  `onERC721Received` on `_to` and throws if the return value is not\\r\\n    ///  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\r\\n    /// @param _from The current owner of the NFT\\r\\n    /// @param _to The new owner\\r\\n    /// @param _tokenId The NFT to transfer\\r\\n    /// @param data Additional data with no specified format, sent in call to `_to`\\r\\n    function safeTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _tokenId,\\r\\n        bytes calldata data\\r\\n    ) external payable;\\r\\n\\r\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\r\\n    /// @dev This works identically to the other function with an extra data parameter,\\r\\n    ///  except this function just sets data to \\\"\\\".\\r\\n    /// @param _from The current owner of the NFT\\r\\n    /// @param _to The new owner\\r\\n    /// @param _tokenId The NFT to transfer\\r\\n    function safeTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _tokenId\\r\\n    ) external payable;\\r\\n}\\r\\n\"\n    },\n    \"contracts/NFTCommon.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./interfaces/INFTContract.sol\\\";\\r\\n\\r\\n// helps with sending the NFTs, will be particularly useful for batch operations\\r\\nlibrary NFTCommon {\\r\\n    /**\\r\\n     @notice Transfers the NFT tokenID from to.\\r\\n     @dev safuTransferFrom name to avoid collision with the interface signature definitions. The reason it is implemented the way it is,\\r\\n      is because some NFT contracts implement both the 721 and 1155 standard at the same time. Sometimes, 721 or 1155 function does not work.\\r\\n      So instead of relying on the user's input, or asking the contract what interface it implements, it is best to just make a good assumption\\r\\n      about what NFT type it is (here we guess it is 721 first), and if that fails, we use the 1155 function to tranfer the NFT.\\r\\n     @param nft     NFT address\\r\\n     @param from    Source address\\r\\n     @param to      Target address\\r\\n     @param tokenID ID of the token type\\r\\n     @param data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\\r\\n    */\\r\\n    function safeTransferFrom_(\\r\\n        INFTContract nft,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenID,\\r\\n        bytes memory data\\r\\n    ) internal returns (bool) {\\r\\n        // most are 721s, so we assume that that is what the NFT type is\\r\\n        try nft.safeTransferFrom(from, to, tokenID, data) {\\r\\n            return true;\\r\\n            // on fail, use 1155s format\\r\\n        } catch (bytes memory) {\\r\\n            try nft.safeTransferFrom(from, to, tokenID, 1, data) {\\r\\n                return true;\\r\\n            } catch (bytes memory) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice Determines if potentialOwner is in fact an owner of at least 1 qty of NFT token ID.\\r\\n     @param nft NFT address\\r\\n     @param potentialOwner suspected owner of the NFT token ID\\r\\n     @param tokenID id of the token\\r\\n     @return quantity of held token, possibly zero\\r\\n    */\\r\\n    function quantityOf(\\r\\n        INFTContract nft,\\r\\n        address potentialOwner,\\r\\n        uint256 tokenID\\r\\n    ) internal view returns (uint256) {\\r\\n        try nft.ownerOf(tokenID) returns (address owner) {\\r\\n            if (owner == potentialOwner) {\\r\\n                return 1;\\r\\n            } else {\\r\\n                return 0;\\r\\n            }\\r\\n        } catch (bytes memory) {\\r\\n            try nft.balanceOf(potentialOwner, tokenID) returns (\\r\\n                uint256 amount\\r\\n            ) {\\r\\n                return amount;\\r\\n            } catch (bytes memory) {\\r\\n                return 0;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"contracts/extensions/MarketplaceFeeCollector.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"../types/AccessControlled.sol\\\";\\r\\n\\r\\n// * discounts require proxy forwarding, but a problem with that is that\\r\\n// * the contract checks the balances of the caller (i.e. proxy) instead\\r\\n// * of the initializer. First version, plain same fee for everyone.\\r\\n\\r\\ncontract MarketplaceFeeCollector is AccessControlled {\\r\\n    using Address for address payable;\\r\\n    // 0.5% in basis points\\r\\n    uint256 public fee = 500;\\r\\n    uint256 public constant HUNDRED_PERCENT = 10_000; \\r\\n\\r\\n    constructor(address _authority) \\r\\n        AccessControlled(IAuthority(_authority)) {\\r\\n    }\\r\\n\\r\\n    /// @dev Hook that is called before any token transfer.\\r\\n    function _beforeTokenTransferTakeFee(uint256 totalPrice)\\r\\n        internal\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 cut = (totalPrice * fee) / HUNDRED_PERCENT;\\r\\n        require(cut < totalPrice, \\\"\\\");\\r\\n        // send ether to the fee collector\\r\\n        payable(authority.vault()).transfer(cut);\\r\\n        uint256 left = totalPrice - cut;\\r\\n        return left;\\r\\n    }\\r\\n\\r\\n    function changeFee(uint256 newFee) external onlyGovernor {        \\r\\n        require(newFee < HUNDRED_PERCENT, \\\"\\\");\\r\\n        fee = newFee;\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"contracts/tests/KonduxERC1155.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\n\\r\\ncontract KonduxERC1155 is ERC1155 {\\r\\n    uint256 private tokenId;\\r\\n\\r\\n    constructor() ERC1155(\\\"https://kondux.io/{id}.json\\\") {}\\r\\n\\r\\n    function faucet() external {\\r\\n        tokenId++;\\r\\n        _mint(msg.sender, tokenId, 10, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function totalSupply() external view returns (uint256) {\\r\\n        return tokenId;\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\n    },\n    \"contracts/tests/KonduxERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract KonduxERC721 is Ownable, ERC721Enumerable {\\r\\n    uint256 private counter = 0;\\r\\n\\r\\n    constructor() ERC721(\\\"KonduxERC721\\\", \\\"KonduxERC721\\\") {}\\r\\n\\r\\n    function faucet() public {\\r\\n        counter++;\\r\\n        _mint(msg.sender, counter);\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"contracts/tests/KonduxERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract KonduxERC20 is ERC20 {\\r\\n\\r\\n    constructor() ERC20(\\\"KonduxERC20\\\", \\\"KonduxERC20\\\") {\\r\\n        faucet();\\r\\n    }\\r\\n\\r\\n    function faucet() public {\\r\\n        _mint(msg.sender, 100_000_000);\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"contracts/Kondux_NFT.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\nimport \\\"./types/AccessControlled.sol\\\";\\r\\n\\r\\n\\r\\ncontract Kondux is ERC721, ERC721Enumerable,Pausable, ERC721Burnable, ERC721Royalty, AccessControlled {\\r\\n    event BaseURIChanged(string baseURI);\\r\\n    event Received(address sender, uint value);\\r\\n    event DnaChanged(uint256 tokenID, uint256 dna);\\r\\n    event DenominatorChanged(uint96 denominator);\\r\\n\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\r\\n\\r\\n    string public baseURI;\\r\\n    uint96 public denominator;\\r\\n    \\r\\n    mapping (uint256 => uint256) public indexDna;\\r\\n\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n\\r\\n    constructor(string memory _name, string memory _symbol, address _authority) \\r\\n        ERC721(_name, _symbol) \\r\\n        AccessControlled(IAuthority(_authority)) {\\r\\n    }\\r\\n\\r\\n    function changeDenominator(uint96 _denominator) public onlyGovernor returns (uint96) {\\r\\n        denominator = _denominator;\\r\\n        emit DenominatorChanged(denominator);\\r\\n        return denominator;\\r\\n    }\\r\\n\\r\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) public onlyGovernor {\\r\\n        _setDefaultRoyalty(receiver, feeNumerator);\\r\\n    }\\r\\n\\r\\n    function setTokenRoyalty(uint256 tokenId,address receiver,uint96 feeNumerator) public onlyGovernor {\\r\\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory _newURI) external onlyGovernor returns (string memory) {\\r\\n        baseURI = _newURI;\\r\\n        emit BaseURIChanged(baseURI);\\r\\n        return baseURI;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) public view override(ERC721) returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, Strings.toString(tokenId))) : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    function pause() public onlyGovernor {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() public onlyGovernor {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    function safeMint(address to, uint256 dna) public onlyGovernor {\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        _tokenIdCounter.increment();\\r\\n        _setDna(tokenId, dna);\\r\\n        _safeMint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function automaticMint(address to) external onlyRole(MINTER_ROLE) returns (uint256) {\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n\\r\\n        _tokenIdCounter.increment();\\r\\n  \\r\\n        uint256 dna = _random();\\r\\n  \\r\\n        _setDna(tokenId, dna);\\r\\n  \\r\\n        _safeMint(to, tokenId);\\r\\n        return tokenId;\\r\\n    }\\r\\n\\r\\n    function setDna(uint256 _tokenID, uint256 _dna) public onlyGovernor {\\r\\n        _setDna(_tokenID, _dna);\\r\\n    }\\r\\n\\r\\n    function getDna (uint256 _tokenID) public view returns (uint256) {\\r\\n        require(_exists(_tokenID), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n        return indexDna[_tokenID];\\r\\n    }  \\r\\n\\r\\n    // Internal functions //\\r\\n\\r\\n    function _random() internal view returns(uint){\\r\\n        return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, block.number, block.coinbase)));\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return baseURI;\\r\\n    }\\r\\n\\r\\n    function _setDna(uint256 _tokenID, uint256 _dna) internal {\\r\\n        indexDna[_tokenID] = _dna;\\r\\n        emit DnaChanged(_tokenID, _dna);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\\r\\n        internal\\r\\n        whenNotPaused\\r\\n        override(ERC721, ERC721Enumerable)\\r\\n    {\\r\\n        super._beforeTokenTransfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function _burn(uint256 tokenId) internal override (ERC721Royalty, ERC721) {\\r\\n        super._burn(tokenId);\\r\\n        _resetTokenRoyalty(tokenId);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC721Enumerable, ERC721Royalty)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\n    },\n    \"contracts/Kondux_Fouders.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\nimport \\\"./types/AccessControlled.sol\\\";\\r\\n\\r\\n\\r\\ncontract KonduxFounders is ERC721, ERC721Enumerable,Pausable, ERC721Burnable, ERC721Royalty, AccessControlled {\\r\\n    event BaseURIChanged(string baseURI);\\r\\n    event Received(address sender, uint value);\\r\\n    event DenominatorChanged(uint96 denominator);\\r\\n\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\r\\n\\r\\n    string public baseURI;\\r\\n    uint96 public denominator;\\r\\n    \\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n\\r\\n    constructor(string memory _name, string memory _symbol, address _authority) \\r\\n        ERC721(_name, _symbol) \\r\\n        AccessControlled(IAuthority(_authority)) {\\r\\n    }\\r\\n\\r\\n    function changeDenominator(uint96 _denominator) public onlyGovernor returns (uint96) {\\r\\n        denominator = _denominator;\\r\\n        emit DenominatorChanged(denominator);\\r\\n        return denominator;\\r\\n    }\\r\\n\\r\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) public onlyGovernor {\\r\\n        _setDefaultRoyalty(receiver, feeNumerator);\\r\\n    }\\r\\n\\r\\n    function setTokenRoyalty(uint256 tokenId,address receiver,uint96 feeNumerator) public onlyGovernor {\\r\\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory _newURI) external onlyGovernor returns (string memory) {\\r\\n        baseURI = _newURI;\\r\\n        emit BaseURIChanged(baseURI);\\r\\n        return baseURI;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) public view override(ERC721) returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, Strings.toString(tokenId))) : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    function pause() public onlyGovernor {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() public onlyGovernor {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    function safeMint(address to) public onlyRole(MINTER_ROLE) {\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        _tokenIdCounter.increment();\\r\\n        _safeMint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function automaticMint(address to) external onlyRole(MINTER_ROLE) returns (uint256) {\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        _tokenIdCounter.increment();\\r\\n        _safeMint(to, tokenId);\\r\\n\\r\\n        return tokenId;\\r\\n    }\\r\\n\\r\\n    // Internal functions //\\r\\n\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return baseURI;\\r\\n    }\\r\\n\\r\\n\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\\r\\n        internal\\r\\n        whenNotPaused\\r\\n        override(ERC721, ERC721Enumerable)\\r\\n    {\\r\\n        super._beforeTokenTransfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function _burn(uint256 tokenId) internal override (ERC721Royalty, ERC721) {\\r\\n        super._burn(tokenId);\\r\\n        _resetTokenRoyalty(tokenId);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC721Enumerable, ERC721Royalty)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"contracts/interfaces/IKonduxFounders.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ninterface IKonduxFounders {\\r\\n\\r\\n    function changeDenominator(uint96 _denominator) external returns (uint96);\\r\\n\\r\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\\r\\n\\r\\n    function setTokenRoyalty(uint256 tokenId,address receiver,uint96 feeNumerator) external;\\r\\n\\r\\n    function setBaseURI(string memory _newURI) external returns (string memory);\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    function safeMint(address to, uint256 dna) external;\\r\\n\\r\\n    function setMinter(address _minter) external;\\r\\n\\r\\n    function automaticMint(address to) external returns (uint256);\\r\\n\\r\\n}\"\n    },\n    \"contracts/Minter_Founders.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport \\\"./interfaces/IKonduxFounders.sol\\\";\\r\\nimport \\\"./interfaces/ITreasury.sol\\\";\\r\\nimport \\\"./types/AccessControlled.sol\\\";\\r\\n\\r\\ncontract MinterFounders is AccessControlled {\\r\\n\\r\\n    uint256 public price;\\r\\n    uint256 public priceOG;\\r\\n    uint256 public priceWL1;\\r\\n    uint256 public priceWL2;\\r\\n    uint256 public pricePublic;\\r\\n\\r\\n    bytes32 public root;\\r\\n    bytes32 public rootOG;\\r\\n    bytes32 public rootWL1;\\r\\n    bytes32 public rootWL2;\\r\\n\\r\\n    bool public pausedWhitelist;\\r\\n    bool public pausedOG;\\r\\n    bool public pausedWL1;\\r\\n    bool public pausedWL2;\\r\\n    bool public pausedPublic;\\r\\n\\r\\n    IKonduxFounders public immutable konduxFounders;\\r\\n    ITreasury public immutable treasury;\\r\\n\\r\\n    constructor(address _authority, address _konduxFounders, address _vault) \\r\\n        AccessControlled(IAuthority(_authority)) {        \\r\\n            require(_konduxFounders != address(0), \\\"Kondux address is not set\\\");\\r\\n            konduxFounders = IKonduxFounders(_konduxFounders);\\r\\n            treasury = ITreasury(_vault);\\r\\n            pausedWhitelist = false;\\r\\n            pausedOG = false;\\r\\n            pausedWL1 = false;\\r\\n            pausedWL2 = false;\\r\\n            pausedPublic = false;\\r\\n    }      \\r\\n\\r\\n    function setPrice(uint256 _price) public onlyGovernor {\\r\\n        price = _price;\\r\\n    }\\r\\n\\r\\n    function setPriceOG(uint256 _price) public onlyGovernor {\\r\\n        priceOG = _price;\\r\\n    }\\r\\n\\r\\n    function setPriceWL1(uint256 _price) public onlyGovernor {\\r\\n        priceWL1 = _price;\\r\\n    }\\r\\n\\r\\n    function setPriceWL2(uint256 _price) public onlyGovernor {\\r\\n        priceWL2 = _price;\\r\\n    }\\r\\n\\r\\n    function setPricePublic(uint256 _price) public onlyGovernor {\\r\\n        priceWL2 = _price;\\r\\n    }\\r\\n\\r\\n    function setPausedWhitelist(bool _paused) public onlyGovernor {\\r\\n        pausedWhitelist = _paused;\\r\\n    }\\r\\n\\r\\n    function setPausedOG(bool _paused) public onlyGovernor {\\r\\n        pausedOG = _paused;\\r\\n    }\\r\\n\\r\\n    function setPausedWL1(bool _paused) public onlyGovernor {\\r\\n        pausedWL1 = _paused;\\r\\n    }\\r\\n\\r\\n    function setPausedWL2(bool _paused) public onlyGovernor {\\r\\n        pausedWL2 = _paused;\\r\\n    }\\r\\n\\r\\n    function setPausedPublic(bool _paused) public onlyGovernor {\\r\\n        pausedPublic = _paused;\\r\\n    }\\r\\n\\r\\n    function whitelistMint(bytes32[] calldata _merkleProof) public payable isWhitelistActive returns (uint256) {\\r\\n        require(msg.value >= price, \\\"Not enought ether\\\");\\r\\n        treasury.depositEther{ value: msg.value }();\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\\r\\n        require(MerkleProof.verify(_merkleProof, root, leaf), \\\"Incorrect proof\\\");\\r\\n        return _mint();\\r\\n    }\\r\\n\\r\\n    function whitelistMintOG(bytes32[] calldata _merkleProof) public payable isOGActive returns (uint256) {\\r\\n        require(msg.value >= priceOG, \\\"Not enought ether\\\");\\r\\n        treasury.depositEther{ value: msg.value }();\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\\r\\n        require(MerkleProof.verify(_merkleProof, rootOG, leaf), \\\"Incorrect proof\\\");\\r\\n        return _mint();\\r\\n    }\\r\\n\\r\\n    function whitelistMintWL1(bytes32[] calldata _merkleProof) public payable isWL1Active returns (uint256) {\\r\\n        require(msg.value >= priceWL1, \\\"Not enought ether\\\");\\r\\n        treasury.depositEther{ value: msg.value }();\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\\r\\n        require(MerkleProof.verify(_merkleProof, rootWL1, leaf), \\\"Incorrect proof\\\");\\r\\n        return _mint();\\r\\n    }\\r\\n\\r\\n    function whitelistMintWL2(bytes32[] calldata _merkleProof) public payable isWL2Active returns (uint256) {\\r\\n        require(msg.value >= priceWL2, \\\"Not enought ether\\\");\\r\\n        treasury.depositEther{ value: msg.value }();\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\\r\\n        require(MerkleProof.verify(_merkleProof, rootWL2, leaf), \\\"Incorrect proof\\\");\\r\\n        return _mint();\\r\\n    }\\r\\n\\r\\n    function publicMint() public payable isPublicActive returns (uint256) {\\r\\n        require(msg.value >= pricePublic, \\\"Not enought ether\\\");\\r\\n        treasury.depositEther{ value: msg.value }();\\r\\n        return _mint();\\r\\n    }\\r\\n\\r\\n    function setRoot(bytes32 _root) public onlyGovernor {\\r\\n        root = _root;\\r\\n    }\\r\\n\\r\\n    function setRootOG(bytes32 _rootOG) public onlyGovernor {\\r\\n        rootOG = _rootOG;\\r\\n    }\\r\\n\\r\\n    function setRootWL1(bytes32 _rootWL1) public onlyGovernor {\\r\\n        rootWL1 = _rootWL1;\\r\\n    }\\r\\n\\r\\n    function setRootWL2(bytes32 _rootWL2) public onlyGovernor {\\r\\n        rootWL2 = _rootWL2;\\r\\n    }\\r\\n\\r\\n    // ** INTERNAL FUNCTIONS **\\r\\n\\r\\n    function _mint() internal returns (uint256) {\\r\\n        uint256 id = konduxFounders.automaticMint(msg.sender);\\r\\n        return id;\\r\\n    }\\r\\n\\r\\n    // ** MODIFIERS **\\r\\n\\r\\n    modifier isWhitelistActive() {\\r\\n        require(!pausedWhitelist, \\\"Whitelist minting is paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isOGActive() {\\r\\n        require(!pausedOG, \\\"OG minting is paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isWL1Active() {\\r\\n        require(!pausedWL1, \\\"WL1 minting is paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isWL2Active() {\\r\\n        require(!pausedWL2, \\\"WL2 minting is paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isPublicActive() {\\r\\n        require(!pausedPublic, \\\"Public minting is paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n}\"\n    },\n    \"contracts/interfaces/ITreasury.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\ninterface ITreasury {\\r\\n    function deposit(\\r\\n        uint256 _amount,\\r\\n        address _token\\r\\n    ) external;\\r\\n\\r\\n    function depositEther() external payable;\\r\\n\\r\\n    function withdraw(\\r\\n        uint256 _amount,\\r\\n        address _token\\r\\n    ) external;\\r\\n\\r\\n    function withdrawEther(\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n}\"\n    },\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/Minter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport \\\"./interfaces/IKondux.sol\\\";\\r\\nimport \\\"./interfaces/ITreasury.sol\\\";\\r\\nimport \\\"./types/AccessControlled.sol\\\";\\r\\n\\r\\ncontract Minter is AccessControlled {\\r\\n\\r\\n    uint256 public price;\\r\\n    bytes32 public root;\\r\\n\\r\\n    IKondux public immutable kondux;\\r\\n    ITreasury public immutable treasury;\\r\\n\\r\\n    constructor(address _authority, address _kondux, address _vault) \\r\\n        AccessControlled(IAuthority(_authority)) {        \\r\\n            require(_kondux != address(0), \\\"Kondux address is not set\\\");\\r\\n            kondux = IKondux(_kondux);\\r\\n            treasury = ITreasury(_vault);\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        treasury.depositEther{ value: msg.value }();\\r\\n        _mint();\\r\\n    }\\r\\n\\r\\n    function unsafeMint() public returns (uint256) {\\r\\n        uint256 id = _unsafeMint();\\r\\n        return id;\\r\\n    }        \\r\\n\\r\\n    function setPrice(uint256 _price) public onlyGovernor {\\r\\n        price = _price;\\r\\n    }\\r\\n\\r\\n    function whitelistMint(bytes32[] calldata _merkleProof) public returns (uint256) {\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\\r\\n        require(MerkleProof.verify(_merkleProof, root, leaf), \\\"Incorrect proof\\\");\\r\\n        return _unsafeMint();\\r\\n    }\\r\\n\\r\\n    function setRoot(bytes32 _root) public onlyGovernor {\\r\\n        root = _root;\\r\\n    }\\r\\n\\r\\n    // ** INTERNAL FUNCTIONS **\\r\\n\\r\\n    function _mint() internal {\\r\\n        require(msg.value >= price, \\\"Not enought ether\\\");\\r\\n        //transfer ether to vault\\r\\n        // treasury.deposit(msg.value, address(0));\\r\\n        // treasury.depositEther(msg.value);\\r\\n        kondux.automaticMint(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _unsafeMint() internal returns (uint256) {\\r\\n        uint256 id = kondux.automaticMint(msg.sender);\\r\\n        return id;\\r\\n    }\\r\\n\\r\\n}\"\n    },\n    \"contracts/interfaces/IKondux.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ninterface IKondux {\\r\\n\\r\\n    function changeDenominator(uint96 _denominator) external returns (uint96);\\r\\n\\r\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\\r\\n\\r\\n    function setTokenRoyalty(uint256 tokenId,address receiver,uint96 feeNumerator) external;\\r\\n\\r\\n    function setBaseURI(string memory _newURI) external returns (string memory);\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    function safeMint(address to, uint256 dna) external;\\r\\n\\r\\n    function setDna(uint256 _tokenID, uint256 _dna) external;\\r\\n\\r\\n    function setMinter(address _minter) external;\\r\\n\\r\\n    function automaticMint(address to) external returns (uint256);\\r\\n\\r\\n}\"\n    },\n    \"contracts/Staking.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./types/AccessControlled.sol\\\";\\r\\n\\r\\ncontract Staking is AccessControlled {\\r\\n    // Staker info\\r\\n    struct Staker {\\r\\n        // The deposited tokens of the Staker\\r\\n        uint256 deposited;\\r\\n        // Last time of details update for Deposit\\r\\n        uint256 timeOfLastUpdate;\\r\\n        // Calculated, but unclaimed rewards. These are calculated each time\\r\\n        // a user writes to the contract.\\r\\n        uint256 unclaimedRewards;\\r\\n    }\\r\\n\\r\\n    // Rewards per hour. A fraction calculated as x/10.000.000 to get the percentage\\r\\n    uint256 public rewardsPerHour = 285; // 0.00285%/h or 25% APR\\r\\n\\r\\n    // Minimum amount to stake\\r\\n    uint256 public minStake = 10_000_000; // 10,000,000 wei\\r\\n\\r\\n    // Compounding frequency limit in seconds\\r\\n    uint256 public compoundFreq = 60 * 60 * 24; // 24 hours\\r\\n\\r\\n    // Mapping of address to Staker info\\r\\n    mapping(address => Staker) internal stakers;\\r\\n\\r\\n    // KonduxERC20 Contract\\r\\n    IERC20 public konduxERC20;\\r\\n\\r\\n    // Events\\r\\n    event Withdraw(address indexed staker, uint256 amount);\\r\\n    event Compound(address indexed staker, uint256 amount);\\r\\n    event Stake(address indexed staker, uint256 amount);\\r\\n    event Unstake(address indexed staker, uint256 amount);\\r\\n    event Reward(address indexed staker, uint256 amount);\\r\\n\\r\\n\\r\\n    // Constructor function\\r\\n    constructor(address _authority, address _konduxERC20) \\r\\n        AccessControlled(IAuthority(_authority)) {        \\r\\n            require(_konduxERC20 != address(0), \\\"Kondux ERC20 address is not set\\\");\\r\\n            konduxERC20 = IERC20(_konduxERC20);\\r\\n    }\\r\\n\\r\\n    // If address has no Staker struct, initiate one. If address already was a stake,\\r\\n    // calculate the rewards and add them to unclaimedRewards, reset the last time of\\r\\n    // deposit and then add _amount to the already deposited amount.\\r\\n    // Transfers the amount staked.\\r\\n    function deposit(uint256 _amount) public {\\r\\n        require(_amount >= minStake, \\\"Amount smaller than minimimum deposit\\\");\\r\\n        require(konduxERC20.balanceOf(msg.sender) >= _amount, \\\"Can't stake more than you own\\\");\\r\\n        if (stakers[msg.sender].deposited == 0) {\\r\\n            stakers[msg.sender].deposited = _amount;\\r\\n            stakers[msg.sender].timeOfLastUpdate = block.timestamp;\\r\\n            stakers[msg.sender].unclaimedRewards = 0;\\r\\n        } else {\\r\\n            uint256 rewards = calculateRewards(msg.sender);\\r\\n            stakers[msg.sender].unclaimedRewards += rewards;\\r\\n            stakers[msg.sender].deposited += _amount;\\r\\n            stakers[msg.sender].timeOfLastUpdate = block.timestamp;\\r\\n        }\\r\\n        konduxERC20.transferFrom(msg.sender, authority.vault(), _amount);\\r\\n        emit Stake(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    // Compound the rewards and reset the last time of update for Deposit info\\r\\n    function stakeRewards() public {\\r\\n        require(stakers[msg.sender].deposited > 0, \\\"You have no deposit\\\");\\r\\n        require(compoundRewardsTimer(msg.sender) == 0, \\\"Tried to compound rewards too soon\\\");\\r\\n        uint256 rewards = calculateRewards(msg.sender) + stakers[msg.sender].unclaimedRewards;\\r\\n        stakers[msg.sender].unclaimedRewards = 0;\\r\\n        stakers[msg.sender].deposited += rewards;\\r\\n        stakers[msg.sender].timeOfLastUpdate = block.timestamp;\\r\\n        emit Compound(msg.sender, rewards);\\r\\n    }\\r\\n\\r\\n    // Transfer rewards to msg.sender\\r\\n    function claimRewards() public {\\r\\n        uint256 rewards = calculateRewards(msg.sender) + stakers[msg.sender].unclaimedRewards;\\r\\n        require(rewards > 0, \\\"You have no rewards\\\");\\r\\n        stakers[msg.sender].unclaimedRewards = 0;\\r\\n        stakers[msg.sender].timeOfLastUpdate = block.timestamp;\\r\\n        konduxERC20.transferFrom(authority.vault(), msg.sender, rewards);\\r\\n        emit Reward(msg.sender, rewards);\\r\\n    }\\r\\n\\r\\n    // Withdraw specified amount of staked tokens\\r\\n    function withdraw(uint256 _amount) public  {\\r\\n        require(stakers[msg.sender].deposited >= _amount, \\\"Can't withdraw more than you have\\\");\\r\\n        uint256 _rewards = calculateRewards(msg.sender);\\r\\n        stakers[msg.sender].deposited -= _amount;\\r\\n        stakers[msg.sender].timeOfLastUpdate = block.timestamp;\\r\\n        stakers[msg.sender].unclaimedRewards = _rewards;\\r\\n        konduxERC20.transferFrom(authority.vault(), msg.sender, _amount);\\r\\n        emit Withdraw(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    // Withdraw all stake and rewards and mints them to the msg.sender\\r\\n    function withdrawAll() public  {\\r\\n        require(stakers[msg.sender].deposited > 0, \\\"You have no deposit\\\");\\r\\n        uint256 _rewards = calculateRewards(msg.sender) + stakers[msg.sender].unclaimedRewards;\\r\\n        uint256 _deposit = stakers[msg.sender].deposited;\\r\\n        stakers[msg.sender].deposited = 0;\\r\\n        stakers[msg.sender].timeOfLastUpdate = 0;\\r\\n        uint256 _amount = _rewards + _deposit;\\r\\n        konduxERC20.transferFrom(authority.vault(), msg.sender, _amount);\\r\\n        emit Withdraw(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    // Function useful for fron-end that returns user stake and rewards by address\\r\\n    function getDepositInfo(address _user) public view returns (uint256 _stake, uint256 _rewards) {\\r\\n        _stake = stakers[_user].deposited;\\r\\n        _rewards = calculateRewards(_user) + stakers[msg.sender].unclaimedRewards;\\r\\n        return (_stake, _rewards);\\r\\n    }\\r\\n\\r\\n    // Utility function that returns the timer for restaking rewards\\r\\n    function compoundRewardsTimer(address _user) public view returns (uint256 _timer) {\\r\\n        if (stakers[_user].timeOfLastUpdate + compoundFreq <= block.timestamp) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return (stakers[_user].timeOfLastUpdate + compoundFreq) - block.timestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Calculate the rewards since the last update on Deposit info\\r\\n    function calculateRewards(address _staker) public view returns (uint256 rewards) {\\r\\n        return (((((block.timestamp - stakers[_staker].timeOfLastUpdate) * \\r\\n            stakers[_staker].deposited) * rewardsPerHour) / 3600) / 10000000); // blocks * staked * rewards/hour / 3600 / 10^7\\r\\n    }\\r\\n\\r\\n    // Functions for modifying  staking mechanism variables:\\r\\n\\r\\n    // Set rewards per hour as x/10.000.000 (Example: 100.000 = 1%)\\r\\n    function setRewards(uint256 _rewardsPerHour) public onlyGovernor {\\r\\n        rewardsPerHour = _rewardsPerHour;\\r\\n    }\\r\\n\\r\\n    // Set the minimum amount for staking in wei\\r\\n    function setMinStake(uint256 _minStake) public onlyGovernor {\\r\\n        minStake = _minStake;\\r\\n    }\\r\\n\\r\\n    // Set the minimum time that has to pass for a user to be able to restake rewards\\r\\n    function setCompFreq(uint256 _compoundFreq) public onlyGovernor {\\r\\n        compoundFreq = _compoundFreq;\\r\\n    }\\r\\n}\"\n    }\n  },\n  \"settings\": {\n    \"metadata\": {\n      \"bytecodeHash\": \"none\",\n      \"useLiteralContent\": true\n    },\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 800\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"storageLayout\",\n          \"devdoc\",\n          \"userdoc\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    }\n  }\n}",
      "solcInputHash": "55ffb8b467348e364de231e7f04ef791",
      "transactionHash": "0xfec89cf8a6cd27b8c43b0297b8e095226b5a015c138188e4a138ac97d0821a4a",
      "args": [
        "Kondux NFT",
        "KONDUX",
        "0x449fa631d5bbf1d734fdac7f44f50701a5b2eba2"
      ]
    },
    "decoded": {
      "from": "0x9f5Ea5Af0368E1d6F685F07978c8A22b2Df7c78D",
      "gasPrice": "1500000013",
      "gasLimit": "2460764",
      "to": null,
      "value": "0",
      "nonce": 508,
      "data": "0x60806040523480156200001157600080fd5b5060405162002de438038062002de48339810160408190526200003491620001e4565b808383600262000045838262000300565b50600362000054828262000300565b5050600c805460ff19169055506001600160a01b038116620000bc5760405162461bcd60e51b815260206004820181905260248201527f417574686f726974792063616e6e6f74206265207a65726f2061646472657373604482015260640160405180910390fd5b600c8054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a150505050620003cc565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200014757600080fd5b81516001600160401b03808211156200016457620001646200011f565b604051601f8301601f19908116603f011681019082821181831017156200018f576200018f6200011f565b81604052838152602092508683858801011115620001ac57600080fd5b600091505b83821015620001d05785820183015181830184015290820190620001b1565b600093810190920192909252949350505050565b600080600060608486031215620001fa57600080fd5b83516001600160401b03808211156200021257600080fd5b620002208783880162000135565b945060208601519150808211156200023757600080fd5b50620002468682870162000135565b604086015190935090506001600160a01b03811681146200026657600080fd5b809150509250925092565b600181811c908216806200028657607f821691505b602082108103620002a757634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002fb57600081815260208120601f850160051c81016020861015620002d65750805b601f850160051c820191505b81811015620002f757828155600101620002e2565b5050505b505050565b81516001600160401b038111156200031c576200031c6200011f565b62000334816200032d845462000271565b84620002ad565b602080601f8311600181146200036c5760008415620003535750858301515b600019600386901b1c1916600185901b178555620002f7565b600085815260208120601f198616915b828110156200039d578886015182559484019460019091019084016200037c565b5085821015620003bc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612a0880620003dc6000396000f3fe608060405234801561001057600080fd5b50600436106102415760003560e01c806355f804b31161014557806396ce0795116100bd578063b88d4fde1161008c578063c87b56dd11610071578063c87b56dd146104eb578063d5391393146104fe578063e985e9c51461052557600080fd5b8063b88d4fde146104c0578063bf7e214f146104d357600080fd5b806396ce07951461045c578063a144819414610487578063a22cb4651461049a578063ab51e23a146104ad57600080fd5b80636c0360eb116101145780637a9e5e4b116100f95780637a9e5e4b146104395780638456cb591461044c57806395d89b411461045457600080fd5b80636c0360eb1461041e57806370a082311461042657600080fd5b806355f804b3146103da5780635944c753146103ed5780635c975abb146104005780636352211e1461040b57600080fd5b806323b872dd116101d85780633f4ba83a116101a757806342842e0e1161018c57806342842e0e146103a157806342966c68146103b45780634f6ccce7146103c757600080fd5b80633f4ba83a14610386578063422627c31461038e57600080fd5b806323b872dd1461031b5780632a55205a1461032e5780632f745c591461036057806337f8649e1461037357600080fd5b8063081812fc11610214578063081812fc146102ab578063095ea7b3146102d657806318160ddd146102e95780631c9ad5b1146102fb57600080fd5b806301ffc9a71461024657806304634d8d1461026e578063067b61f21461028357806306fdde0314610296575b600080fd5b610259610254366004612273565b610561565b60405190151581526020015b60405180910390f35b61028161027c3660046122c3565b610572565b005b6102816102913660046122f8565b610588565b61029e61059a565b604051610265919061236a565b6102be6102b936600461237d565b61062c565b6040516001600160a01b039091168152602001610265565b6102816102e4366004612396565b610653565b600a545b604051908152602001610265565b6102ed61030936600461237d565b600f6020526000908152604090205481565b6102816103293660046123c2565b61076d565b61034161033c3660046122f8565b6107e6565b604080516001600160a01b039093168352602083019190915201610265565b6102ed61036e366004612396565b610892565b6102ed610381366004612403565b61093a565b6102816109ea565b6102ed61039c36600461237d565b6109fc565b6102816103af3660046123c2565b610a8b565b6102816103c236600461237d565b610aa6565b6102ed6103d536600461237d565b610b1e565b61029e6103e83660046124ac565b610bc2565b6102816103fb3660046124f5565b610ca4565b600c5460ff16610259565b6102be61041936600461237d565b610cb7565b61029e610d1c565b6102ed610434366004612403565b610daa565b610281610447366004612403565b610e44565b610281610ebf565b61029e610ecf565b600e5461046f906001600160601b031681565b6040516001600160601b039091168152602001610265565b610281610495366004612396565b610ede565b6102816104a8366004612533565b610f15565b61046f6104bb366004612571565b610f20565b6102816104ce36600461258c565b610f91565b600c546102be9061010090046001600160a01b031681565b61029e6104f936600461237d565b611010565b6102ed7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61025961053336600461260c565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b600061056c826110eb565b92915050565b61057a6110f6565b61058482826111bc565b5050565b6105906110f6565b61058482826112b9565b6060600280546105a99061263a565b80601f01602080910402602001604051908101604052809291908181526020018280546105d59061263a565b80156106225780601f106105f757610100808354040283529160200191610622565b820191906000526020600020905b81548152906001019060200180831161060557829003601f168201915b5050505050905090565b600061063782611308565b506000908152600660205260409020546001600160a01b031690565b600061065e82610cb7565b9050806001600160a01b0316836001600160a01b0316036106d05760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806106ec57506106ec8133610533565b61075e5760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016106c7565b610768838361136c565b505050565b610778335b826113da565b6107db5760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b60648201526084016106c7565b610768838383611459565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b031692820192909252829161085b5750604080518082019091526000546001600160a01b0381168252600160a01b90046001600160601b031660208201525b60208101516000906127109061087a906001600160601b031687612684565b61088491906126b9565b915196919550909350505050565b600061089d83610daa565b82106109115760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e647300000000000000000000000000000000000000000060648201526084016106c7565b506001600160a01b03919091166000908152600860209081526040808320938352929052205490565b60007f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661096681611618565b600061097160105490565b9050610981601080546001019055565b604080514460208083019190915242828401524360608084019190915241901b6bffffffffffffffffffffffff1916608083015282518083036074018152609490920190925280519101206109d682826112b9565b6109e085836116c5565b5091505b50919050565b6109f26110f6565b6109fa6116df565b565b6000818152600460205260408120546001600160a01b0316610a785760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016106c7565b506000908152600f602052604090205490565b61076883838360405180602001604052806000815250610f91565b610aaf33610772565b610b125760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b60648201526084016106c7565b610b1b81611731565b50565b6000610b29600a5490565b8210610b9d5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e6473000000000000000000000000000000000000000060648201526084016106c7565b600a8281548110610bb057610bb06126cd565b90600052602060002001549050919050565b6060610bcc6110f6565b600d610bd88382612731565b507f5411e8ebf1636d9e83d5fc4900bf80cbac82e8790da2a4c94db4895e889eedf6600d604051610c0991906127f1565b60405180910390a1600d8054610c1e9061263a565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4a9061263a565b8015610c975780601f10610c6c57610100808354040283529160200191610c97565b820191906000526020600020905b815481529060010190602001808311610c7a57829003601f168201915b505050505090505b919050565b610cac6110f6565b61076883838361174b565b6000818152600460205260408120546001600160a01b03168061056c5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016106c7565b600d8054610d299061263a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d559061263a565b8015610da25780601f10610d7757610100808354040283529160200191610da2565b820191906000526020600020905b815481529060010190602001808311610d8557829003601f168201915b505050505081565b60006001600160a01b038216610e285760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e6572000000000000000000000000000000000000000000000060648201526084016106c7565b506001600160a01b031660009081526005602052604090205490565b610e4c6110f6565b600c80547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b038416908102919091179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a150565b610ec76110f6565b6109fa611859565b6060600380546105a99061263a565b610ee66110f6565b6000610ef160105490565b9050610f01601080546001019055565b610f0b81836112b9565b61076883826116c5565b610584338383611896565b6000610f2a6110f6565b600e80546bffffffffffffffffffffffff19166001600160601b0384169081179091556040519081527f601b85aa9305dbcfbfc81aa2d4b5126c1ce24afdd1bad47d6880e5b6df081f579060200160405180910390a15050600e546001600160601b031690565b610f9b33836113da565b610ffe5760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b60648201526084016106c7565b61100a84848484611964565b50505050565b6000818152600460205260409020546060906001600160a01b031661108f5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016106c7565b6000600d805461109e9061263a565b9050116110ba576040518060200160405280600081525061056c565b600d6110c5836119e2565b6040516020016110d692919061287c565b60405160208183030381529060405292915050565b600061056c82611afb565b600c60019054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611149573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116d9190612903565b6001600160a01b0316336001600160a01b0316146109fa5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064016106c7565b6127106001600160601b038216111561122a5760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b60648201526084016106c7565b6001600160a01b0382166112805760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c69642072656365697665720000000000000060448201526064016106c7565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600055565b6000828152600f602090815260409182902083905581518481529081018390527f4e26044f7fb3724a9375deb74974fdc2f4e07f265efce87f93cfced354258487910160405180910390a15050565b6000818152600460205260409020546001600160a01b0316610b1b5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016106c7565b600081815260066020526040902080546001600160a01b0319166001600160a01b03841690811790915581906113a182610cb7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806113e683610cb7565b9050806001600160a01b0316846001600160a01b0316148061142d57506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b806114515750836001600160a01b03166114468461062c565b6001600160a01b0316145b949350505050565b826001600160a01b031661146c82610cb7565b6001600160a01b0316146114e85760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016106c7565b6001600160a01b03821661154a5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106c7565b611555838383611b20565b61156060008261136c565b6001600160a01b0383166000908152600560205260408120805460019290611589908490612920565b90915550506001600160a01b03821660009081526005602052604081208054600192906115b7908490612933565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600c54604051634c9ba32160e11b8152336004820152829161010090046001600160a01b031690639937464290602401602060405180830381865afa158015611665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116899190612946565b14610b1b5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064016106c7565b610584828260405180602001604052806000815250611b33565b6116e7611bb1565b600c805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b61173a81611c03565b600090815260016020526040812055565b6127106001600160601b03821611156117b95760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b60648201526084016106c7565b6001600160a01b03821661180f5760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d6574657273000000000060448201526064016106c7565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600190529190942093519051909116600160a01b029116179055565b611861611c0c565b600c805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117143390565b816001600160a01b0316836001600160a01b0316036118f75760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016106c7565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61196f848484611459565b61197b84848484611c5f565b61100a5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016106c7565b606081600003611a095750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611a335780611a1d8161295f565b9150611a2c9050600a836126b9565b9150611a0d565b60008167ffffffffffffffff811115611a4e57611a4e612420565b6040519080825280601f01601f191660200182016040528015611a78576020820181803683370190505b5090505b841561145157611a8d600183612920565b9150611a9a600a86612978565b611aa5906030612933565b60f81b818381518110611aba57611aba6126cd565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611af4600a866126b9565b9450611a7c565b60006001600160e01b0319821663780e9d6360e01b148061056c575061056c82611dab565b611b28611c0c565b610768838383611deb565b611b3d8383611ea3565b611b4a6000848484611c5f565b6107685760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016106c7565b600c5460ff166109fa5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016106c7565b61173a81611ff1565b600c5460ff16156109fa5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016106c7565b60006001600160a01b0384163b15611da057604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611ca390339089908890889060040161298c565b6020604051808303816000875af1925050508015611cde575060408051601f3d908101601f19168201909252611cdb918101906129c8565b60015b611d86573d808015611d0c576040519150601f19603f3d011682016040523d82523d6000602084013e611d11565b606091505b508051600003611d7e5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016106c7565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611451565b506001949350505050565b60006001600160e01b031982166380ac58cd60e01b1480611ddc57506001600160e01b03198216635b5e139f60e01b145b8061056c575061056c82612098565b6001600160a01b038316611e4657611e4181600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b611e69565b816001600160a01b0316836001600160a01b031614611e6957611e6983826120cd565b6001600160a01b038216611e80576107688161216a565b826001600160a01b0316826001600160a01b031614610768576107688282612219565b6001600160a01b038216611ef95760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106c7565b6000818152600460205260409020546001600160a01b031615611f5e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106c7565b611f6a60008383611b20565b6001600160a01b0382166000908152600560205260408120805460019290611f93908490612933565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000611ffc82610cb7565b905061200a81600084611b20565b61201560008361136c565b6001600160a01b038116600090815260056020526040812080546001929061203e908490612920565b909155505060008281526004602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60006001600160e01b0319821663152a902d60e11b148061056c57506301ffc9a760e01b6001600160e01b031983161461056c565b600060016120da84610daa565b6120e49190612920565b600083815260096020526040902054909150808214612137576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a5460009061217c90600190612920565b6000838152600b6020526040812054600a80549394509092849081106121a4576121a46126cd565b9060005260206000200154905080600a83815481106121c5576121c56126cd565b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a8054806121fd576121fd6129e5565b6001900381819060005260206000200160009055905550505050565b600061222483610daa565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b6001600160e01b031981168114610b1b57600080fd5b60006020828403121561228557600080fd5b81356122908161225d565b9392505050565b6001600160a01b0381168114610b1b57600080fd5b80356001600160601b0381168114610c9f57600080fd5b600080604083850312156122d657600080fd5b82356122e181612297565b91506122ef602084016122ac565b90509250929050565b6000806040838503121561230b57600080fd5b50508035926020909101359150565b60005b8381101561233557818101518382015260200161231d565b50506000910152565b6000815180845261235681602086016020860161231a565b601f01601f19169290920160200192915050565b602081526000612290602083018461233e565b60006020828403121561238f57600080fd5b5035919050565b600080604083850312156123a957600080fd5b82356123b481612297565b946020939093013593505050565b6000806000606084860312156123d757600080fd5b83356123e281612297565b925060208401356123f281612297565b929592945050506040919091013590565b60006020828403121561241557600080fd5b813561229081612297565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561245157612451612420565b604051601f8501601f19908116603f0116810190828211818310171561247957612479612420565b8160405280935085815286868601111561249257600080fd5b858560208301376000602087830101525050509392505050565b6000602082840312156124be57600080fd5b813567ffffffffffffffff8111156124d557600080fd5b8201601f810184136124e657600080fd5b61145184823560208401612436565b60008060006060848603121561250a57600080fd5b83359250602084013561251c81612297565b915061252a604085016122ac565b90509250925092565b6000806040838503121561254657600080fd5b823561255181612297565b91506020830135801515811461256657600080fd5b809150509250929050565b60006020828403121561258357600080fd5b612290826122ac565b600080600080608085870312156125a257600080fd5b84356125ad81612297565b935060208501356125bd81612297565b925060408501359150606085013567ffffffffffffffff8111156125e057600080fd5b8501601f810187136125f157600080fd5b61260087823560208401612436565b91505092959194509250565b6000806040838503121561261f57600080fd5b823561262a81612297565b9150602083013561256681612297565b600181811c9082168061264e57607f821691505b6020821081036109e457634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561269e5761269e61266e565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826126c8576126c86126a3565b500490565b634e487b7160e01b600052603260045260246000fd5b601f82111561076857600081815260208120601f850160051c8101602086101561270a5750805b601f850160051c820191505b8181101561272957828155600101612716565b505050505050565b815167ffffffffffffffff81111561274b5761274b612420565b61275f81612759845461263a565b846126e3565b602080601f831160018114612794576000841561277c5750858301515b600019600386901b1c1916600185901b178555612729565b600085815260208120601f198616915b828110156127c3578886015182559484019460019091019084016127a4565b50858210156127e15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020808352600084546128058161263a565b8084870152604060018084166000811461282657600181146128405761286e565b60ff1985168984015283151560051b89018301955061286e565b896000528660002060005b858110156128665781548b820186015290830190880161284b565b8a0184019650505b509398975050505050505050565b600080845461288a8161263a565b600182811680156128a257600181146128b7576128e6565b60ff19841687528215158302870194506128e6565b8860005260208060002060005b858110156128dd5781548a8201529084019082016128c4565b50505082870194505b5050505083516128fa81836020880161231a565b01949350505050565b60006020828403121561291557600080fd5b815161229081612297565b8181038181111561056c5761056c61266e565b8082018082111561056c5761056c61266e565b60006020828403121561295857600080fd5b5051919050565b6000600182016129715761297161266e565b5060010190565b600082612987576129876126a3565b500690565b60006001600160a01b038087168352808616602084015250836040830152608060608301526129be608083018461233e565b9695505050505050565b6000602082840312156129da57600080fd5b81516122908161225d565b634e487b7160e01b600052603160045260246000fdfea164736f6c6343000810000a000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000449fa631d5bbf1d734fdac7f44f50701a5b2eba2000000000000000000000000000000000000000000000000000000000000000a4b6f6e647578204e46540000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064b4f4e4455580000000000000000000000000000000000000000000000000000",
      "r": "0x456a9934983e9f3e4e2eed5e658cec501fa2f9d336b0acf40755b9e38c9b31bd",
      "s": "0x1e42bde065cd265c23cf9f5e9d802a133a348784186b1b19f929f8d04a7278da",
      "v": 160037,
      "chainId": 80001
    }
  }
}