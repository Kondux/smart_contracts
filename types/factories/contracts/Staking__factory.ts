/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Staking, StakingInterface } from "../../contracts/Staking";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_authority",
        type: "address",
      },
      {
        internalType: "address",
        name: "_konduxERC20",
        type: "address",
      },
      {
        internalType: "address",
        name: "_treasury",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "contract IAuthority",
        name: "authority",
        type: "address",
      },
    ],
    name: "AuthorityUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "staker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Compound",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "staker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Reward",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "staker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Stake",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "staker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Unstake",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "staker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    inputs: [],
    name: "authority",
    outputs: [
      {
        internalType: "contract IAuthority",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_staker",
        type: "address",
      },
    ],
    name: "calculateRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "rewards",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "compoundFreq",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "compoundRewardsTimer",
    outputs: [
      {
        internalType: "uint256",
        name: "_timer",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "getDepositInfo",
    outputs: [
      {
        internalType: "uint256",
        name: "_stake",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_rewards",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "konduxERC20",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minStake",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardsPerHour",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IAuthority",
        name: "_newAuthority",
        type: "address",
      },
    ],
    name: "setAuthority",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_compoundFreq",
        type: "uint256",
      },
    ],
    name: "setCompFreq",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_konduxERC20",
        type: "address",
      },
    ],
    name: "setKonduxERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_minStake",
        type: "uint256",
      },
    ],
    name: "setMinStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_rewardsPerHour",
        type: "uint256",
      },
    ],
    name: "setRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_treasury",
        type: "address",
      },
    ],
    name: "setTreasury",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stakeRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "treasury",
    outputs: [
      {
        internalType: "contract ITreasury",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405261011d60015562989680600255610e106003553480156200002457600080fd5b50604051620012c8380380620012c88339810160408190526200004791620001f6565b826001600160a01b038116620000a45760405162461bcd60e51b815260206004820181905260248201527f417574686f726974792063616e6e6f74206265207a65726f206164647265737360448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a1506001600160a01b0382166200014e5760405162461bcd60e51b815260206004820152601f60248201527f4b6f6e6475782045524332302061646472657373206973206e6f74207365740060448201526064016200009b565b6001600160a01b038116620001a65760405162461bcd60e51b815260206004820152601b60248201527f54726561737572792061646472657373206973206e6f7420736574000000000060448201526064016200009b565b600580546001600160a01b039384166001600160a01b031991821617909155600680549290931691161790555062000240565b80516001600160a01b0381168114620001f157600080fd5b919050565b6000806000606084860312156200020c57600080fd5b6200021784620001d9565b92506200022760208501620001d9565b91506200023760408501620001d9565b90509250925092565b61107880620002506000396000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c8063853828b6116100cd578063bf7e214f11610081578063c7a29c6f11610066578063c7a29c6f146102c2578063cf9d0b5f146102d5578063f0f44260146102dd57600080fd5b8063bf7e214f1461029c578063c11479ab146102af57600080fd5b80638e7271fa116100b25780638e7271fa1461026d57806394a6899114610276578063b6b55f251461028957600080fd5b8063853828b6146102525780638c80fd901461025a57600080fd5b8063375b3c0a1161012457806361d027b31161010957806361d027b31461021957806364ab86751461022c5780637a9e5e4b1461023f57600080fd5b8063375b3c0a146101e85780635287ce12146101f157600080fd5b80632604b704116101555780632604b704146101a05780632e1a7d4d146101cb578063372500ab146101e057600080fd5b806312e0a053146101715780631a121d5414610197575b600080fd5b61018461017f366004610f59565b6102f0565b6040519081526020015b60405180910390f35b61018460035481565b6005546101b3906001600160a01b031681565b6040516001600160a01b03909116815260200161018e565b6101de6101d9366004610f7d565b610364565b005b6101de610548565b61018460025481565b6102046101ff366004610f59565b61068d565b6040805192835260208301919091520161018e565b6006546101b3906001600160a01b031681565b61018461023a366004610f59565b6106ce565b6101de61024d366004610f59565b61072f565b6101de610798565b6101de610268366004610f7d565b610975565b61018460015481565b6101de610284366004610f59565b610982565b6101de610297366004610f7d565b6109b9565b6000546101b3906001600160a01b031681565b6101de6102bd366004610f7d565b610cbc565b6101de6102d0366004610f7d565b610cc9565b6101de610cd6565b6101de6102eb366004610f59565b610e33565b6003546001600160a01b0382166000908152600460205260408120600101549091429161031d9190610fac565b1161032a57506000919050565b6003546001600160a01b038316600090815260046020526040902060010154429161035491610fac565b61035e9190610fbf565b92915050565b336000908152600460205260409020548111156103d25760405162461bcd60e51b815260206004820152602160248201527f43616e2774207769746864726177206d6f7265207468616e20796f75206861766044820152606560f81b60648201526084015b60405180910390fd5b60006103dd336106ce565b33600090815260046020526040812080549293508492909190610401908490610fbf565b90915550503360009081526004602081815260408084204260018201556002018590556005549354815163fbfa77cf60e01b815291516001600160a01b03958616956323b872dd9592169363fbfa77cf9380840193919291908290030181865afa158015610473573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104979190610fd2565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152336024820152604481018590526064016020604051808303816000875af11580156104ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050e9190610fef565b5060405182815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a25050565b336000818152600460205260408120600201549091610566906106ce565b6105709190610fac565b9050600081116105c25760405162461bcd60e51b815260206004820152601360248201527f596f752068617665206e6f20726577617264730000000000000000000000000060448201526064016103c9565b336000818152600460208190526040808320600281019390935542600190930192909255600654600554925163b2178c1d60e01b81529182018590526001600160a01b039283166024830152604482019390935291169063b2178c1d90606401600060405180830381600087803b15801561063c57600080fd5b505af1158015610650573d6000803e3d6000fd5b50506040518381523392507f619caafabdd75649b302ba8419e48cccf64f37f1983ac4727cfb38b57703ffc991506020015b60405180910390a250565b6001600160a01b03811660009081526004602052604080822054338352908220600201549091906106bd846106ce565b6106c79190610fac565b9050915091565b600180546001600160a01b0383166000908152600460205260408120805493015490926298968092610e10929091906107079042610fbf565b6107119190611011565b61071b9190611011565b6107259190611030565b61035e9190611030565b610737610e6a565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a150565b336000908152600460205260409020546107f45760405162461bcd60e51b815260206004820152601360248201527f596f752068617665206e6f206465706f7369740000000000000000000000000060448201526064016103c9565b336000818152600460205260408120600201549091610812906106ce565b61081c9190610fac565b336000908152600460205260408120805482825560019091018290559192506108458284610fac565b6005546000546040805163fbfa77cf60e01b815290519394506001600160a01b03928316936323b872dd939092169163fbfa77cf916004808201926020929091908290030181865afa15801561089f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c39190610fd2565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152336024820152604481018490526064016020604051808303816000875af1158015610916573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093a9190610fef565b5060405181815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a2505050565b61097d610e6a565b600255565b61098a610e6a565b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600254811015610a315760405162461bcd60e51b815260206004820152602560248201527f416d6f756e7420736d616c6c6572207468616e206d696e696d696d756d20646560448201527f706f73697400000000000000000000000000000000000000000000000000000060648201526084016103c9565b6005546040516370a0823160e01b815233600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa158015610a79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9d9190611052565b1015610aeb5760405162461bcd60e51b815260206004820152601d60248201527f43616e2774207374616b65206d6f7265207468616e20796f75206f776e00000060448201526064016103c9565b336000908152600460205260408120549003610b225733600090815260046020526040812082815542600182015560020155610b95565b6000610b2d336106ce565b33600090815260046020526040812060020180549293508392909190610b54908490610fac565b90915550503360009081526004602052604081208054849290610b78908490610fac565b909155505033600090815260046020526040902042600190910155505b6005546000546040805163fbfa77cf60e01b815290516001600160a01b03938416936323b872dd93339391169163fbfa77cf916004808201926020929091908290030181865afa158015610bed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c119190610fd2565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018490526064016020604051808303816000875af1158015610c65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c899190610fef565b5060405181815233907febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a90602001610682565b610cc4610e6a565b600355565b610cd1610e6a565b600155565b33600090815260046020526040902054610d325760405162461bcd60e51b815260206004820152601360248201527f596f752068617665206e6f206465706f7369740000000000000000000000000060448201526064016103c9565b610d3b336102f0565b15610d935760405162461bcd60e51b815260206004820152602260248201527f547269656420746f20636f6d706f756e64207265776172647320746f6f20736f60448201526137b760f11b60648201526084016103c9565b336000818152600460205260408120600201549091610db1906106ce565b610dbb9190610fac565b3360009081526004602052604081206002810182905580549293508392909190610de6908490610fac565b9091555050336000818152600460205260409081902042600190910155517f169f1815ebdea059aac3bb00ec9a9594c7a5ffcb64a17e8392b5d84909a14556906106829084815260200190565b610e3b610e6a565b6006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ebb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edf9190610fd2565b6001600160a01b0316336001600160a01b031614610f3f5760405162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064016103c9565b565b6001600160a01b0381168114610f5657600080fd5b50565b600060208284031215610f6b57600080fd5b8135610f7681610f41565b9392505050565b600060208284031215610f8f57600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561035e5761035e610f96565b8181038181111561035e5761035e610f96565b600060208284031215610fe457600080fd5b8151610f7681610f41565b60006020828403121561100157600080fd5b81518015158114610f7657600080fd5b600081600019048311821515161561102b5761102b610f96565b500290565b60008261104d57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561106457600080fd5b505191905056fea164736f6c6343000810000a";

type StakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Staking__factory extends ContractFactory {
  constructor(...args: StakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _authority: PromiseOrValue<string>,
    _konduxERC20: PromiseOrValue<string>,
    _treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Staking> {
    return super.deploy(
      _authority,
      _konduxERC20,
      _treasury,
      overrides || {}
    ) as Promise<Staking>;
  }
  override getDeployTransaction(
    _authority: PromiseOrValue<string>,
    _konduxERC20: PromiseOrValue<string>,
    _treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _authority,
      _konduxERC20,
      _treasury,
      overrides || {}
    );
  }
  override attach(address: string): Staking {
    return super.attach(address) as Staking;
  }
  override connect(signer: Signer): Staking__factory {
    return super.connect(signer) as Staking__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingInterface {
    return new utils.Interface(_abi) as StakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Staking {
    return new Contract(address, _abi, signerOrProvider) as Staking;
  }
}
