/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MinterContract,
  MinterContractInterface,
} from "../../../contracts/tests/MinterContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IHelix",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IHelix",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610316806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806368155ec11461003b578063c6c3bbe614610050575b600080fd5b61004e610049366004610235565b610063565b005b61004e61005e366004610286565b6101b6565b604051636eb1769f60e11b81526001600160a01b03848116600483015230602483015282919086169063dd62ed3e90604401602060405180830381865afa1580156100b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100d691906102c7565b10156101345760405162461bcd60e51b8152602060048201526024808201527f4d696e746572436f6e74726163743a20616c6c6f77616e6365206e6f7420656e6044820152630deeaced60e31b606482015260840160405180910390fd5b6040516323b872dd60e01b81526001600160a01b0384811660048301528381166024830152604482018390528516906323b872dd906064016020604051808303816000875af115801561018b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101af91906102e0565b5050505050565b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018390528416906340c10f1990604401600060405180830381600087803b15801561020057600080fd5b505af1158015610214573d6000803e3d6000fd5b50505050505050565b6001600160a01b038116811461023257600080fd5b50565b6000806000806080858703121561024b57600080fd5b84356102568161021d565b935060208501356102668161021d565b925060408501356102768161021d565b9396929550929360600135925050565b60008060006060848603121561029b57600080fd5b83356102a68161021d565b925060208401356102b68161021d565b929592945050506040919091013590565b6000602082840312156102d957600080fd5b5051919050565b6000602082840312156102f257600080fd5b8151801515811461030257600080fd5b939250505056fea164736f6c6343000811000a";

type MinterContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MinterContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MinterContract__factory extends ContractFactory {
  constructor(...args: MinterContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MinterContract> {
    return super.deploy(overrides || {}) as Promise<MinterContract>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MinterContract {
    return super.attach(address) as MinterContract;
  }
  override connect(signer: Signer): MinterContract__factory {
    return super.connect(signer) as MinterContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MinterContractInterface {
    return new utils.Interface(_abi) as MinterContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MinterContract {
    return new Contract(address, _abi, signerOrProvider) as MinterContract;
  }
}
