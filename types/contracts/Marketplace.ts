/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface MarketplaceInterface extends utils.Interface {
  functions: {
    "HUNDRED_PERCENT()": FunctionFragment;
    "REVERT_ASK_DOES_NOT_EXIST()": FunctionFragment;
    "REVERT_ASK_INSUFFICIENT_VALUE()": FunctionFragment;
    "REVERT_ASK_IS_RESERVED()": FunctionFragment;
    "REVERT_ASK_SELLER_NOT_OWNER()": FunctionFragment;
    "REVERT_BID_TOO_LOW()": FunctionFragment;
    "REVERT_CANT_ACCEPT_OWN_ASK()": FunctionFragment;
    "REVERT_INSUFFICIENT_ETHER()": FunctionFragment;
    "REVERT_NFT_NOT_SENT()": FunctionFragment;
    "REVERT_NOT_A_CREATOR_OF_ASK()": FunctionFragment;
    "REVERT_NOT_A_CREATOR_OF_BID()": FunctionFragment;
    "REVERT_NOT_OWNER_OF_TOKEN_ID()": FunctionFragment;
    "REVERT_OWNER_OF_TOKEN_ID()": FunctionFragment;
    "acceptAsk(address[],uint256[])": FunctionFragment;
    "acceptBid(address[],uint256[])": FunctionFragment;
    "asks(address,uint256)": FunctionFragment;
    "authority()": FunctionFragment;
    "bids(address,uint256)": FunctionFragment;
    "cancelAsk(address[],uint256[])": FunctionFragment;
    "cancelBid(address[],uint256[])": FunctionFragment;
    "changeFee(uint256)": FunctionFragment;
    "createAsk(address[],uint256[],uint256[],address[])": FunctionFragment;
    "createBid(address[],uint256[],uint256[])": FunctionFragment;
    "escrow(address)": FunctionFragment;
    "fee()": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "HUNDRED_PERCENT"
      | "REVERT_ASK_DOES_NOT_EXIST"
      | "REVERT_ASK_INSUFFICIENT_VALUE"
      | "REVERT_ASK_IS_RESERVED"
      | "REVERT_ASK_SELLER_NOT_OWNER"
      | "REVERT_BID_TOO_LOW"
      | "REVERT_CANT_ACCEPT_OWN_ASK"
      | "REVERT_INSUFFICIENT_ETHER"
      | "REVERT_NFT_NOT_SENT"
      | "REVERT_NOT_A_CREATOR_OF_ASK"
      | "REVERT_NOT_A_CREATOR_OF_BID"
      | "REVERT_NOT_OWNER_OF_TOKEN_ID"
      | "REVERT_OWNER_OF_TOKEN_ID"
      | "acceptAsk"
      | "acceptBid"
      | "asks"
      | "authority"
      | "bids"
      | "cancelAsk"
      | "cancelBid"
      | "changeFee"
      | "createAsk"
      | "createBid"
      | "escrow"
      | "fee"
      | "setAuthority"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "HUNDRED_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_ASK_DOES_NOT_EXIST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_ASK_INSUFFICIENT_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_ASK_IS_RESERVED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_ASK_SELLER_NOT_OWNER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_BID_TOO_LOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_CANT_ACCEPT_OWN_ASK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_INSUFFICIENT_ETHER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_NFT_NOT_SENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_NOT_A_CREATOR_OF_ASK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_NOT_A_CREATOR_OF_BID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_NOT_OWNER_OF_TOKEN_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_OWNER_OF_TOKEN_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptAsk",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptBid",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "asks",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bids",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAsk",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBid",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createAsk",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createBid",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "escrow",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "HUNDRED_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_ASK_DOES_NOT_EXIST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_ASK_INSUFFICIENT_VALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_ASK_IS_RESERVED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_ASK_SELLER_NOT_OWNER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_BID_TOO_LOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_CANT_ACCEPT_OWN_ASK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_INSUFFICIENT_ETHER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_NFT_NOT_SENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_NOT_A_CREATOR_OF_ASK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_NOT_A_CREATOR_OF_BID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_NOT_OWNER_OF_TOKEN_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_OWNER_OF_TOKEN_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "acceptAsk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "acceptBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bids", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelAsk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createAsk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "escrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AcceptAsk(address,uint256,uint256,address)": EventFragment;
    "AcceptBid(address,uint256,uint256)": EventFragment;
    "AuthorityUpdated(address)": EventFragment;
    "CancelAsk(address,uint256)": EventFragment;
    "CancelBid(address,uint256)": EventFragment;
    "CreateAsk(address,uint256,uint256,address)": EventFragment;
    "CreateBid(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AcceptAsk"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AcceptBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelAsk"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateAsk"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateBid"): EventFragment;
}

export interface AcceptAskEventObject {
  nft: string;
  tokenID: BigNumber;
  price: BigNumber;
  to: string;
}
export type AcceptAskEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  AcceptAskEventObject
>;

export type AcceptAskEventFilter = TypedEventFilter<AcceptAskEvent>;

export interface AcceptBidEventObject {
  nft: string;
  tokenID: BigNumber;
  price: BigNumber;
}
export type AcceptBidEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AcceptBidEventObject
>;

export type AcceptBidEventFilter = TypedEventFilter<AcceptBidEvent>;

export interface AuthorityUpdatedEventObject {
  authority: string;
}
export type AuthorityUpdatedEvent = TypedEvent<
  [string],
  AuthorityUpdatedEventObject
>;

export type AuthorityUpdatedEventFilter =
  TypedEventFilter<AuthorityUpdatedEvent>;

export interface CancelAskEventObject {
  nft: string;
  tokenID: BigNumber;
}
export type CancelAskEvent = TypedEvent<
  [string, BigNumber],
  CancelAskEventObject
>;

export type CancelAskEventFilter = TypedEventFilter<CancelAskEvent>;

export interface CancelBidEventObject {
  nft: string;
  tokenID: BigNumber;
}
export type CancelBidEvent = TypedEvent<
  [string, BigNumber],
  CancelBidEventObject
>;

export type CancelBidEventFilter = TypedEventFilter<CancelBidEvent>;

export interface CreateAskEventObject {
  nft: string;
  tokenID: BigNumber;
  price: BigNumber;
  to: string;
}
export type CreateAskEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  CreateAskEventObject
>;

export type CreateAskEventFilter = TypedEventFilter<CreateAskEvent>;

export interface CreateBidEventObject {
  nft: string;
  tokenID: BigNumber;
  price: BigNumber;
}
export type CreateBidEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  CreateBidEventObject
>;

export type CreateBidEventFilter = TypedEventFilter<CreateBidEvent>;

export interface Marketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    HUNDRED_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    REVERT_ASK_DOES_NOT_EXIST(overrides?: CallOverrides): Promise<[string]>;

    REVERT_ASK_INSUFFICIENT_VALUE(overrides?: CallOverrides): Promise<[string]>;

    REVERT_ASK_IS_RESERVED(overrides?: CallOverrides): Promise<[string]>;

    REVERT_ASK_SELLER_NOT_OWNER(overrides?: CallOverrides): Promise<[string]>;

    REVERT_BID_TOO_LOW(overrides?: CallOverrides): Promise<[string]>;

    REVERT_CANT_ACCEPT_OWN_ASK(overrides?: CallOverrides): Promise<[string]>;

    REVERT_INSUFFICIENT_ETHER(overrides?: CallOverrides): Promise<[string]>;

    REVERT_NFT_NOT_SENT(overrides?: CallOverrides): Promise<[string]>;

    REVERT_NOT_A_CREATOR_OF_ASK(overrides?: CallOverrides): Promise<[string]>;

    REVERT_NOT_A_CREATOR_OF_BID(overrides?: CallOverrides): Promise<[string]>;

    REVERT_NOT_OWNER_OF_TOKEN_ID(overrides?: CallOverrides): Promise<[string]>;

    REVERT_OWNER_OF_TOKEN_ID(overrides?: CallOverrides): Promise<[string]>;

    acceptAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    asks(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, string] & {
        exists: boolean;
        seller: string;
        price: BigNumber;
        to: string;
      }
    >;

    authority(overrides?: CallOverrides): Promise<[string]>;

    bids(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber] & {
        exists: boolean;
        buyer: string;
        price: BigNumber;
      }
    >;

    cancelAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      price: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      price: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    escrow(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAuthority(
      _newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  REVERT_ASK_DOES_NOT_EXIST(overrides?: CallOverrides): Promise<string>;

  REVERT_ASK_INSUFFICIENT_VALUE(overrides?: CallOverrides): Promise<string>;

  REVERT_ASK_IS_RESERVED(overrides?: CallOverrides): Promise<string>;

  REVERT_ASK_SELLER_NOT_OWNER(overrides?: CallOverrides): Promise<string>;

  REVERT_BID_TOO_LOW(overrides?: CallOverrides): Promise<string>;

  REVERT_CANT_ACCEPT_OWN_ASK(overrides?: CallOverrides): Promise<string>;

  REVERT_INSUFFICIENT_ETHER(overrides?: CallOverrides): Promise<string>;

  REVERT_NFT_NOT_SENT(overrides?: CallOverrides): Promise<string>;

  REVERT_NOT_A_CREATOR_OF_ASK(overrides?: CallOverrides): Promise<string>;

  REVERT_NOT_A_CREATOR_OF_BID(overrides?: CallOverrides): Promise<string>;

  REVERT_NOT_OWNER_OF_TOKEN_ID(overrides?: CallOverrides): Promise<string>;

  REVERT_OWNER_OF_TOKEN_ID(overrides?: CallOverrides): Promise<string>;

  acceptAsk(
    nft: PromiseOrValue<string>[],
    tokenID: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptBid(
    nft: PromiseOrValue<string>[],
    tokenID: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  asks(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, BigNumber, string] & {
      exists: boolean;
      seller: string;
      price: BigNumber;
      to: string;
    }
  >;

  authority(overrides?: CallOverrides): Promise<string>;

  bids(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, BigNumber] & {
      exists: boolean;
      buyer: string;
      price: BigNumber;
    }
  >;

  cancelAsk(
    nft: PromiseOrValue<string>[],
    tokenID: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelBid(
    nft: PromiseOrValue<string>[],
    tokenID: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeFee(
    newFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createAsk(
    nft: PromiseOrValue<string>[],
    tokenID: PromiseOrValue<BigNumberish>[],
    price: PromiseOrValue<BigNumberish>[],
    to: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createBid(
    nft: PromiseOrValue<string>[],
    tokenID: PromiseOrValue<BigNumberish>[],
    price: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  escrow(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  setAuthority(
    _newAuthority: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_ASK_DOES_NOT_EXIST(overrides?: CallOverrides): Promise<string>;

    REVERT_ASK_INSUFFICIENT_VALUE(overrides?: CallOverrides): Promise<string>;

    REVERT_ASK_IS_RESERVED(overrides?: CallOverrides): Promise<string>;

    REVERT_ASK_SELLER_NOT_OWNER(overrides?: CallOverrides): Promise<string>;

    REVERT_BID_TOO_LOW(overrides?: CallOverrides): Promise<string>;

    REVERT_CANT_ACCEPT_OWN_ASK(overrides?: CallOverrides): Promise<string>;

    REVERT_INSUFFICIENT_ETHER(overrides?: CallOverrides): Promise<string>;

    REVERT_NFT_NOT_SENT(overrides?: CallOverrides): Promise<string>;

    REVERT_NOT_A_CREATOR_OF_ASK(overrides?: CallOverrides): Promise<string>;

    REVERT_NOT_A_CREATOR_OF_BID(overrides?: CallOverrides): Promise<string>;

    REVERT_NOT_OWNER_OF_TOKEN_ID(overrides?: CallOverrides): Promise<string>;

    REVERT_OWNER_OF_TOKEN_ID(overrides?: CallOverrides): Promise<string>;

    acceptAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    acceptBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    asks(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, string] & {
        exists: boolean;
        seller: string;
        price: BigNumber;
        to: string;
      }
    >;

    authority(overrides?: CallOverrides): Promise<string>;

    bids(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber] & {
        exists: boolean;
        buyer: string;
        price: BigNumber;
      }
    >;

    cancelAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    changeFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      price: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    createBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      price: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    escrow(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    setAuthority(
      _newAuthority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AcceptAsk(address,uint256,uint256,address)"(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      to?: PromiseOrValue<string> | null
    ): AcceptAskEventFilter;
    AcceptAsk(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      to?: PromiseOrValue<string> | null
    ): AcceptAskEventFilter;

    "AcceptBid(address,uint256,uint256)"(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      price?: null
    ): AcceptBidEventFilter;
    AcceptBid(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      price?: null
    ): AcceptBidEventFilter;

    "AuthorityUpdated(address)"(authority?: null): AuthorityUpdatedEventFilter;
    AuthorityUpdated(authority?: null): AuthorityUpdatedEventFilter;

    "CancelAsk(address,uint256)"(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null
    ): CancelAskEventFilter;
    CancelAsk(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null
    ): CancelAskEventFilter;

    "CancelBid(address,uint256)"(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null
    ): CancelBidEventFilter;
    CancelBid(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null
    ): CancelBidEventFilter;

    "CreateAsk(address,uint256,uint256,address)"(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      to?: PromiseOrValue<string> | null
    ): CreateAskEventFilter;
    CreateAsk(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      to?: PromiseOrValue<string> | null
    ): CreateAskEventFilter;

    "CreateBid(address,uint256,uint256)"(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      price?: null
    ): CreateBidEventFilter;
    CreateBid(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      price?: null
    ): CreateBidEventFilter;
  };

  estimateGas: {
    HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_ASK_DOES_NOT_EXIST(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_ASK_INSUFFICIENT_VALUE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    REVERT_ASK_IS_RESERVED(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_ASK_SELLER_NOT_OWNER(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_BID_TOO_LOW(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_CANT_ACCEPT_OWN_ASK(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_INSUFFICIENT_ETHER(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_NFT_NOT_SENT(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_NOT_A_CREATOR_OF_ASK(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_NOT_A_CREATOR_OF_BID(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_NOT_OWNER_OF_TOKEN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_OWNER_OF_TOKEN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    acceptAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    asks(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    bids(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      price: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      price: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    escrow(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    setAuthority(
      _newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    HUNDRED_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REVERT_ASK_DOES_NOT_EXIST(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_ASK_INSUFFICIENT_VALUE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_ASK_IS_RESERVED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_ASK_SELLER_NOT_OWNER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_BID_TOO_LOW(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_CANT_ACCEPT_OWN_ASK(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_INSUFFICIENT_ETHER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_NFT_NOT_SENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_NOT_A_CREATOR_OF_ASK(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_NOT_A_CREATOR_OF_BID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_NOT_OWNER_OF_TOKEN_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_OWNER_OF_TOKEN_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    asks(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bids(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      price: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      price: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    escrow(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAuthority(
      _newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
