/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface StakingInterface extends utils.Interface {
  functions: {
    "authority()": FunctionFragment;
    "calculateRewards(address)": FunctionFragment;
    "claimRewards()": FunctionFragment;
    "compoundFreq()": FunctionFragment;
    "compoundRewardsTimer(address)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "foundersRewardBoost()": FunctionFragment;
    "foundersRewardBoostDivisor()": FunctionFragment;
    "getDepositInfo(address)": FunctionFragment;
    "getFoundersRewardBoost()": FunctionFragment;
    "getFoundersRewardBoostDenominator()": FunctionFragment;
    "getKnftRewardBoostDenominator()": FunctionFragment;
    "getMinStake()": FunctionFragment;
    "getRewardsPerHour()": FunctionFragment;
    "getStakedAmount(address)": FunctionFragment;
    "getTimeOfLastUpdate(address)": FunctionFragment;
    "getkNFTRewardBoost()": FunctionFragment;
    "helixERC20()": FunctionFragment;
    "kNFTRewardBoost()": FunctionFragment;
    "kNFTRewardBoostDivisor()": FunctionFragment;
    "konduxERC20()": FunctionFragment;
    "konduxERC721Founders()": FunctionFragment;
    "konduxERC721kNFT()": FunctionFragment;
    "minStake()": FunctionFragment;
    "rewardsPerHour()": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "setCompFreq(uint256)": FunctionFragment;
    "setFoundersRewardBoost(uint256)": FunctionFragment;
    "setFoundersRewardBoostDivisor(uint256)": FunctionFragment;
    "setHelixERC20(address)": FunctionFragment;
    "setKonduxERC20(address)": FunctionFragment;
    "setKonduxERC721Founders(address)": FunctionFragment;
    "setKonduxERC721kNFT(address)": FunctionFragment;
    "setMinStake(uint256)": FunctionFragment;
    "setRewards(uint256)": FunctionFragment;
    "setTimeLock(uint256)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "setWithdrawalFee(uint256)": FunctionFragment;
    "setWithdrawalFeeDivisor(uint256)": FunctionFragment;
    "setkNFTRewardBoost(uint256)": FunctionFragment;
    "setkNFTRewardBoostDivisor(uint256)": FunctionFragment;
    "stakeRewards()": FunctionFragment;
    "timelock()": FunctionFragment;
    "treasury()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
    "withdrawalFee()": FunctionFragment;
    "withdrawalFeeDivisor()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "authority"
      | "calculateRewards"
      | "claimRewards"
      | "compoundFreq"
      | "compoundRewardsTimer"
      | "deposit"
      | "foundersRewardBoost"
      | "foundersRewardBoostDivisor"
      | "getDepositInfo"
      | "getFoundersRewardBoost"
      | "getFoundersRewardBoostDenominator"
      | "getKnftRewardBoostDenominator"
      | "getMinStake"
      | "getRewardsPerHour"
      | "getStakedAmount"
      | "getTimeOfLastUpdate"
      | "getkNFTRewardBoost"
      | "helixERC20"
      | "kNFTRewardBoost"
      | "kNFTRewardBoostDivisor"
      | "konduxERC20"
      | "konduxERC721Founders"
      | "konduxERC721kNFT"
      | "minStake"
      | "rewardsPerHour"
      | "setAuthority"
      | "setCompFreq"
      | "setFoundersRewardBoost"
      | "setFoundersRewardBoostDivisor"
      | "setHelixERC20"
      | "setKonduxERC20"
      | "setKonduxERC721Founders"
      | "setKonduxERC721kNFT"
      | "setMinStake"
      | "setRewards"
      | "setTimeLock"
      | "setTreasury"
      | "setWithdrawalFee"
      | "setWithdrawalFeeDivisor"
      | "setkNFTRewardBoost"
      | "setkNFTRewardBoostDivisor"
      | "stakeRewards"
      | "timelock"
      | "treasury"
      | "withdraw"
      | "withdrawAll"
      | "withdrawalFee"
      | "withdrawalFeeDivisor"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "compoundFreq",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "compoundRewardsTimer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "foundersRewardBoost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "foundersRewardBoostDivisor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFoundersRewardBoost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFoundersRewardBoostDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getKnftRewardBoostDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsPerHour",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeOfLastUpdate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getkNFTRewardBoost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "helixERC20",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "kNFTRewardBoost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "kNFTRewardBoostDivisor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "konduxERC20",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "konduxERC721Founders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "konduxERC721kNFT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minStake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardsPerHour",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCompFreq",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFoundersRewardBoost",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFoundersRewardBoostDivisor",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setHelixERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKonduxERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKonduxERC721Founders",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKonduxERC721kNFT",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinStake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewards",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeLock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalFeeDivisor",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setkNFTRewardBoost",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setkNFTRewardBoostDivisor",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeRewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalFeeDivisor",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compoundFreq",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compoundRewardsTimer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "foundersRewardBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "foundersRewardBoostDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFoundersRewardBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFoundersRewardBoostDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKnftRewardBoostDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsPerHour",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeOfLastUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getkNFTRewardBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "helixERC20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kNFTRewardBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kNFTRewardBoostDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "konduxERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "konduxERC721Founders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "konduxERC721kNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsPerHour",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCompFreq",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFoundersRewardBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFoundersRewardBoostDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHelixERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKonduxERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKonduxERC721Founders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKonduxERC721kNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTimeLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalFeeDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setkNFTRewardBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setkNFTRewardBoostDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalFeeDivisor",
    data: BytesLike
  ): Result;

  events: {
    "AuthorityUpdated(address)": EventFragment;
    "Compound(address,uint256)": EventFragment;
    "Reward(address,uint256)": EventFragment;
    "Stake(address,uint256)": EventFragment;
    "Unstake(address,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Compound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface AuthorityUpdatedEventObject {
  authority: string;
}
export type AuthorityUpdatedEvent = TypedEvent<
  [string],
  AuthorityUpdatedEventObject
>;

export type AuthorityUpdatedEventFilter =
  TypedEventFilter<AuthorityUpdatedEvent>;

export interface CompoundEventObject {
  staker: string;
  amount: BigNumber;
}
export type CompoundEvent = TypedEvent<
  [string, BigNumber],
  CompoundEventObject
>;

export type CompoundEventFilter = TypedEventFilter<CompoundEvent>;

export interface RewardEventObject {
  staker: string;
  amount: BigNumber;
}
export type RewardEvent = TypedEvent<[string, BigNumber], RewardEventObject>;

export type RewardEventFilter = TypedEventFilter<RewardEvent>;

export interface StakeEventObject {
  staker: string;
  amount: BigNumber;
}
export type StakeEvent = TypedEvent<[string, BigNumber], StakeEventObject>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface UnstakeEventObject {
  staker: string;
  amount: BigNumber;
}
export type UnstakeEvent = TypedEvent<[string, BigNumber], UnstakeEventObject>;

export type UnstakeEventFilter = TypedEventFilter<UnstakeEvent>;

export interface WithdrawEventObject {
  staker: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Staking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authority(overrides?: CallOverrides): Promise<[string]>;

    calculateRewards(
      _staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewards: BigNumber }>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    compoundFreq(overrides?: CallOverrides): Promise<[BigNumber]>;

    compoundRewardsTimer(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _timer: BigNumber }>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    foundersRewardBoost(overrides?: CallOverrides): Promise<[BigNumber]>;

    foundersRewardBoostDivisor(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDepositInfo(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _stake: BigNumber; _rewards: BigNumber }
    >;

    getFoundersRewardBoost(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _foundersRewardBoost: BigNumber }>;

    getFoundersRewardBoostDenominator(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _foundersRewardBoostDivisor: BigNumber }>;

    getKnftRewardBoostDenominator(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _kNFTRewardBoostDivisor: BigNumber }>;

    getMinStake(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _minStake: BigNumber }>;

    getRewardsPerHour(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _rewardsPerHour: BigNumber }>;

    getStakedAmount(
      _staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _deposited: BigNumber }>;

    getTimeOfLastUpdate(
      _staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _timeOfLastUpdate: BigNumber }>;

    getkNFTRewardBoost(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _kNFTRewardBoost: BigNumber }>;

    helixERC20(overrides?: CallOverrides): Promise<[string]>;

    kNFTRewardBoost(overrides?: CallOverrides): Promise<[BigNumber]>;

    kNFTRewardBoostDivisor(overrides?: CallOverrides): Promise<[BigNumber]>;

    konduxERC20(overrides?: CallOverrides): Promise<[string]>;

    konduxERC721Founders(overrides?: CallOverrides): Promise<[string]>;

    konduxERC721kNFT(overrides?: CallOverrides): Promise<[string]>;

    minStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardsPerHour(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAuthority(
      _newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCompFreq(
      _compoundFreq: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFoundersRewardBoost(
      _foundersRewardBoost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFoundersRewardBoostDivisor(
      _foundersRewardBoostDivisor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setHelixERC20(
      _helix: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKonduxERC20(
      _konduxERC20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKonduxERC721Founders(
      _konduxERC721Founders: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKonduxERC721kNFT(
      _konduxERC721kNFT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinStake(
      _minStake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewards(
      _rewardsPerHour: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTimeLock(
      _timelock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWithdrawalFee(
      _withdrawalFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWithdrawalFeeDivisor(
      _withdrawalFeeDivisor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setkNFTRewardBoost(
      _kNFTRewardBoost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setkNFTRewardBoostDivisor(
      _kNFTRewardBoostDivisor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    timelock(overrides?: CallOverrides): Promise<[BigNumber]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawalFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawalFeeDivisor(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  authority(overrides?: CallOverrides): Promise<string>;

  calculateRewards(
    _staker: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimRewards(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  compoundFreq(overrides?: CallOverrides): Promise<BigNumber>;

  compoundRewardsTimer(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deposit(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  foundersRewardBoost(overrides?: CallOverrides): Promise<BigNumber>;

  foundersRewardBoostDivisor(overrides?: CallOverrides): Promise<BigNumber>;

  getDepositInfo(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _stake: BigNumber; _rewards: BigNumber }
  >;

  getFoundersRewardBoost(overrides?: CallOverrides): Promise<BigNumber>;

  getFoundersRewardBoostDenominator(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getKnftRewardBoostDenominator(overrides?: CallOverrides): Promise<BigNumber>;

  getMinStake(overrides?: CallOverrides): Promise<BigNumber>;

  getRewardsPerHour(overrides?: CallOverrides): Promise<BigNumber>;

  getStakedAmount(
    _staker: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTimeOfLastUpdate(
    _staker: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getkNFTRewardBoost(overrides?: CallOverrides): Promise<BigNumber>;

  helixERC20(overrides?: CallOverrides): Promise<string>;

  kNFTRewardBoost(overrides?: CallOverrides): Promise<BigNumber>;

  kNFTRewardBoostDivisor(overrides?: CallOverrides): Promise<BigNumber>;

  konduxERC20(overrides?: CallOverrides): Promise<string>;

  konduxERC721Founders(overrides?: CallOverrides): Promise<string>;

  konduxERC721kNFT(overrides?: CallOverrides): Promise<string>;

  minStake(overrides?: CallOverrides): Promise<BigNumber>;

  rewardsPerHour(overrides?: CallOverrides): Promise<BigNumber>;

  setAuthority(
    _newAuthority: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCompFreq(
    _compoundFreq: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFoundersRewardBoost(
    _foundersRewardBoost: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFoundersRewardBoostDivisor(
    _foundersRewardBoostDivisor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setHelixERC20(
    _helix: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKonduxERC20(
    _konduxERC20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKonduxERC721Founders(
    _konduxERC721Founders: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKonduxERC721kNFT(
    _konduxERC721kNFT: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinStake(
    _minStake: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewards(
    _rewardsPerHour: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTimeLock(
    _timelock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWithdrawalFee(
    _withdrawalFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWithdrawalFeeDivisor(
    _withdrawalFeeDivisor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setkNFTRewardBoost(
    _kNFTRewardBoost: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setkNFTRewardBoostDivisor(
    _kNFTRewardBoostDivisor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeRewards(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  timelock(overrides?: CallOverrides): Promise<BigNumber>;

  treasury(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawalFeeDivisor(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    authority(overrides?: CallOverrides): Promise<string>;

    calculateRewards(
      _staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewards(overrides?: CallOverrides): Promise<void>;

    compoundFreq(overrides?: CallOverrides): Promise<BigNumber>;

    compoundRewardsTimer(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    foundersRewardBoost(overrides?: CallOverrides): Promise<BigNumber>;

    foundersRewardBoostDivisor(overrides?: CallOverrides): Promise<BigNumber>;

    getDepositInfo(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _stake: BigNumber; _rewards: BigNumber }
    >;

    getFoundersRewardBoost(overrides?: CallOverrides): Promise<BigNumber>;

    getFoundersRewardBoostDenominator(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKnftRewardBoostDenominator(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinStake(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardsPerHour(overrides?: CallOverrides): Promise<BigNumber>;

    getStakedAmount(
      _staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimeOfLastUpdate(
      _staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getkNFTRewardBoost(overrides?: CallOverrides): Promise<BigNumber>;

    helixERC20(overrides?: CallOverrides): Promise<string>;

    kNFTRewardBoost(overrides?: CallOverrides): Promise<BigNumber>;

    kNFTRewardBoostDivisor(overrides?: CallOverrides): Promise<BigNumber>;

    konduxERC20(overrides?: CallOverrides): Promise<string>;

    konduxERC721Founders(overrides?: CallOverrides): Promise<string>;

    konduxERC721kNFT(overrides?: CallOverrides): Promise<string>;

    minStake(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsPerHour(overrides?: CallOverrides): Promise<BigNumber>;

    setAuthority(
      _newAuthority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCompFreq(
      _compoundFreq: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFoundersRewardBoost(
      _foundersRewardBoost: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFoundersRewardBoostDivisor(
      _foundersRewardBoostDivisor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setHelixERC20(
      _helix: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKonduxERC20(
      _konduxERC20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKonduxERC721Founders(
      _konduxERC721Founders: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKonduxERC721kNFT(
      _konduxERC721kNFT: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinStake(
      _minStake: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewards(
      _rewardsPerHour: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimeLock(
      _timelock: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawalFee(
      _withdrawalFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawalFeeDivisor(
      _withdrawalFeeDivisor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setkNFTRewardBoost(
      _kNFTRewardBoost: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setkNFTRewardBoostDivisor(
      _kNFTRewardBoostDivisor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeRewards(overrides?: CallOverrides): Promise<void>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;

    withdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalFeeDivisor(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AuthorityUpdated(address)"(authority?: null): AuthorityUpdatedEventFilter;
    AuthorityUpdated(authority?: null): AuthorityUpdatedEventFilter;

    "Compound(address,uint256)"(
      staker?: PromiseOrValue<string> | null,
      amount?: null
    ): CompoundEventFilter;
    Compound(
      staker?: PromiseOrValue<string> | null,
      amount?: null
    ): CompoundEventFilter;

    "Reward(address,uint256)"(
      staker?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardEventFilter;
    Reward(
      staker?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardEventFilter;

    "Stake(address,uint256)"(
      staker?: PromiseOrValue<string> | null,
      amount?: null
    ): StakeEventFilter;
    Stake(
      staker?: PromiseOrValue<string> | null,
      amount?: null
    ): StakeEventFilter;

    "Unstake(address,uint256)"(
      staker?: PromiseOrValue<string> | null,
      amount?: null
    ): UnstakeEventFilter;
    Unstake(
      staker?: PromiseOrValue<string> | null,
      amount?: null
    ): UnstakeEventFilter;

    "Withdraw(address,uint256)"(
      staker?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      staker?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    authority(overrides?: CallOverrides): Promise<BigNumber>;

    calculateRewards(
      _staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    compoundFreq(overrides?: CallOverrides): Promise<BigNumber>;

    compoundRewardsTimer(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    foundersRewardBoost(overrides?: CallOverrides): Promise<BigNumber>;

    foundersRewardBoostDivisor(overrides?: CallOverrides): Promise<BigNumber>;

    getDepositInfo(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFoundersRewardBoost(overrides?: CallOverrides): Promise<BigNumber>;

    getFoundersRewardBoostDenominator(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKnftRewardBoostDenominator(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinStake(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardsPerHour(overrides?: CallOverrides): Promise<BigNumber>;

    getStakedAmount(
      _staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimeOfLastUpdate(
      _staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getkNFTRewardBoost(overrides?: CallOverrides): Promise<BigNumber>;

    helixERC20(overrides?: CallOverrides): Promise<BigNumber>;

    kNFTRewardBoost(overrides?: CallOverrides): Promise<BigNumber>;

    kNFTRewardBoostDivisor(overrides?: CallOverrides): Promise<BigNumber>;

    konduxERC20(overrides?: CallOverrides): Promise<BigNumber>;

    konduxERC721Founders(overrides?: CallOverrides): Promise<BigNumber>;

    konduxERC721kNFT(overrides?: CallOverrides): Promise<BigNumber>;

    minStake(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsPerHour(overrides?: CallOverrides): Promise<BigNumber>;

    setAuthority(
      _newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCompFreq(
      _compoundFreq: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFoundersRewardBoost(
      _foundersRewardBoost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFoundersRewardBoostDivisor(
      _foundersRewardBoostDivisor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setHelixERC20(
      _helix: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKonduxERC20(
      _konduxERC20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKonduxERC721Founders(
      _konduxERC721Founders: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKonduxERC721kNFT(
      _konduxERC721kNFT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinStake(
      _minStake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewards(
      _rewardsPerHour: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTimeLock(
      _timelock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWithdrawalFee(
      _withdrawalFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWithdrawalFeeDivisor(
      _withdrawalFeeDivisor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setkNFTRewardBoost(
      _kNFTRewardBoost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setkNFTRewardBoostDivisor(
      _kNFTRewardBoostDivisor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalFeeDivisor(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateRewards(
      _staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    compoundFreq(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    compoundRewardsTimer(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    foundersRewardBoost(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    foundersRewardBoostDivisor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositInfo(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFoundersRewardBoost(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFoundersRewardBoostDenominator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKnftRewardBoostDenominator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardsPerHour(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakedAmount(
      _staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimeOfLastUpdate(
      _staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getkNFTRewardBoost(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    helixERC20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kNFTRewardBoost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kNFTRewardBoostDivisor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    konduxERC20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    konduxERC721Founders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    konduxERC721kNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsPerHour(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAuthority(
      _newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCompFreq(
      _compoundFreq: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFoundersRewardBoost(
      _foundersRewardBoost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFoundersRewardBoostDivisor(
      _foundersRewardBoostDivisor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setHelixERC20(
      _helix: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKonduxERC20(
      _konduxERC20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKonduxERC721Founders(
      _konduxERC721Founders: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKonduxERC721kNFT(
      _konduxERC721kNFT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinStake(
      _minStake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewards(
      _rewardsPerHour: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTimeLock(
      _timelock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawalFee(
      _withdrawalFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawalFeeDivisor(
      _withdrawalFeeDivisor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setkNFTRewardBoost(
      _kNFTRewardBoost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setkNFTRewardBoostDivisor(
      _kNFTRewardBoostDivisor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawalFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawalFeeDivisor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
