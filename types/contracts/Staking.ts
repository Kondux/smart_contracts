/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface StakingInterface extends utils.Interface {
  functions: {
    "addNewStakingToken(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "aprERC20(address)": FunctionFragment;
    "authority()": FunctionFragment;
    "authorizedERC20(address)": FunctionFragment;
    "calculateRewards(address,uint256)": FunctionFragment;
    "claimRewards(uint256)": FunctionFragment;
    "compoundFreqERC20(address)": FunctionFragment;
    "compoundRewardsTimer(uint256)": FunctionFragment;
    "deposit(uint256,uint8,address)": FunctionFragment;
    "foundersRewardBoostDivisorERC20(address)": FunctionFragment;
    "foundersRewardBoostERC20(address)": FunctionFragment;
    "getAPR(address)": FunctionFragment;
    "getDepositIds(address)": FunctionFragment;
    "getDepositInfo(uint256)": FunctionFragment;
    "getFoundersRewardBoost(address)": FunctionFragment;
    "getFoundersRewardBoostDenominator(address)": FunctionFragment;
    "getKnftRewardBoostDenominator(address)": FunctionFragment;
    "getMinStake(address)": FunctionFragment;
    "getRewardsPerHour(address)": FunctionFragment;
    "getStakedAmount(uint256)": FunctionFragment;
    "getTimeOfLastUpdate(uint256)": FunctionFragment;
    "getTimelock(uint256)": FunctionFragment;
    "getTimelockCategory(uint256)": FunctionFragment;
    "getTotalRewards(address)": FunctionFragment;
    "getTotalStaked(address)": FunctionFragment;
    "getUserTotalRewardsByCoin(address,address)": FunctionFragment;
    "getUserTotalStakedByCoin(address,address)": FunctionFragment;
    "getWithdrawalFee(address)": FunctionFragment;
    "getWithdrawalFeeDivisor(address)": FunctionFragment;
    "getkNFTRewardBoost(address)": FunctionFragment;
    "helixERC20()": FunctionFragment;
    "kNFTRewardBoostDivisorERC20(address)": FunctionFragment;
    "kNFTRewardBoostERC20(address)": FunctionFragment;
    "konduxERC721Founders()": FunctionFragment;
    "konduxERC721kNFT()": FunctionFragment;
    "minStakeERC20(address)": FunctionFragment;
    "ratioERC20(address)": FunctionFragment;
    "setAPR(uint256,address)": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "setAuthorizedERC20(address,bool)": FunctionFragment;
    "setCompoundFreq(uint256,address)": FunctionFragment;
    "setFoundersRewardBoost(uint256,address)": FunctionFragment;
    "setFoundersRewardBoostDivisor(uint256,address)": FunctionFragment;
    "setHelixERC20(address)": FunctionFragment;
    "setKonduxERC721Founders(address)": FunctionFragment;
    "setKonduxERC721kNFT(address)": FunctionFragment;
    "setMinStake(uint256,address)": FunctionFragment;
    "setRatio(uint256,address)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "setWithdrawalFee(uint256,address)": FunctionFragment;
    "setWithdrawalFeeDivisor(uint256,address)": FunctionFragment;
    "setkNFTRewardBoost(uint256,address)": FunctionFragment;
    "setkNFTRewardBoostDivisor(uint256,address)": FunctionFragment;
    "stakeRewards(uint256)": FunctionFragment;
    "totalRewarded(address)": FunctionFragment;
    "totalStaked(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "userDeposits(uint256)": FunctionFragment;
    "userDepositsIds(address,uint256)": FunctionFragment;
    "userTotalRewardedByCoin(address,address)": FunctionFragment;
    "userTotalStakedByCoin(address,address)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
    "withdrawAndClaim(uint256,uint256)": FunctionFragment;
    "withdrawalFeeDivisorERC20(address)": FunctionFragment;
    "withdrawalFeeERC20(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addNewStakingToken"
      | "aprERC20"
      | "authority"
      | "authorizedERC20"
      | "calculateRewards"
      | "claimRewards"
      | "compoundFreqERC20"
      | "compoundRewardsTimer"
      | "deposit"
      | "foundersRewardBoostDivisorERC20"
      | "foundersRewardBoostERC20"
      | "getAPR"
      | "getDepositIds"
      | "getDepositInfo"
      | "getFoundersRewardBoost"
      | "getFoundersRewardBoostDenominator"
      | "getKnftRewardBoostDenominator"
      | "getMinStake"
      | "getRewardsPerHour"
      | "getStakedAmount"
      | "getTimeOfLastUpdate"
      | "getTimelock"
      | "getTimelockCategory"
      | "getTotalRewards"
      | "getTotalStaked"
      | "getUserTotalRewardsByCoin"
      | "getUserTotalStakedByCoin"
      | "getWithdrawalFee"
      | "getWithdrawalFeeDivisor"
      | "getkNFTRewardBoost"
      | "helixERC20"
      | "kNFTRewardBoostDivisorERC20"
      | "kNFTRewardBoostERC20"
      | "konduxERC721Founders"
      | "konduxERC721kNFT"
      | "minStakeERC20"
      | "ratioERC20"
      | "setAPR"
      | "setAuthority"
      | "setAuthorizedERC20"
      | "setCompoundFreq"
      | "setFoundersRewardBoost"
      | "setFoundersRewardBoostDivisor"
      | "setHelixERC20"
      | "setKonduxERC721Founders"
      | "setKonduxERC721kNFT"
      | "setMinStake"
      | "setRatio"
      | "setTreasury"
      | "setWithdrawalFee"
      | "setWithdrawalFeeDivisor"
      | "setkNFTRewardBoost"
      | "setkNFTRewardBoostDivisor"
      | "stakeRewards"
      | "totalRewarded"
      | "totalStaked"
      | "treasury"
      | "userDeposits"
      | "userDepositsIds"
      | "userTotalRewardedByCoin"
      | "userTotalStakedByCoin"
      | "withdraw"
      | "withdrawAndClaim"
      | "withdrawalFeeDivisorERC20"
      | "withdrawalFeeERC20"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addNewStakingToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "aprERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "authorizedERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRewards",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "compoundFreqERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "compoundRewardsTimer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "foundersRewardBoostDivisorERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "foundersRewardBoostERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAPR",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositIds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFoundersRewardBoost",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFoundersRewardBoostDenominator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getKnftRewardBoostDenominator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinStake",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsPerHour",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeOfLastUpdate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimelock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimelockCategory",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStaked",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTotalRewardsByCoin",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTotalStakedByCoin",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalFeeDivisor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getkNFTRewardBoost",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "helixERC20",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "kNFTRewardBoostDivisorERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "kNFTRewardBoostERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "konduxERC721Founders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "konduxERC721kNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minStakeERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ratioERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAPR",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedERC20",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCompoundFreq",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFoundersRewardBoost",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFoundersRewardBoostDivisor",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setHelixERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKonduxERC721Founders",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKonduxERC721kNFT",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinStake",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRatio",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalFeeDivisor",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setkNFTRewardBoost",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setkNFTRewardBoostDivisor",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeRewards",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewarded",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userDeposits",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userDepositsIds",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userTotalRewardedByCoin",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userTotalStakedByCoin",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndClaim",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalFeeDivisorERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalFeeERC20",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addNewStakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aprERC20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizedERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compoundFreqERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compoundRewardsTimer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "foundersRewardBoostDivisorERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "foundersRewardBoostERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAPR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDepositIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFoundersRewardBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFoundersRewardBoostDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKnftRewardBoostDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsPerHour",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeOfLastUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimelockCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTotalRewardsByCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTotalStakedByCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalFeeDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getkNFTRewardBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "helixERC20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kNFTRewardBoostDivisorERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kNFTRewardBoostERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "konduxERC721Founders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "konduxERC721kNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minStakeERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ratioERC20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAPR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCompoundFreq",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFoundersRewardBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFoundersRewardBoostDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHelixERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKonduxERC721Founders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKonduxERC721kNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalFeeDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setkNFTRewardBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setkNFTRewardBoostDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRewarded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDepositsIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTotalRewardedByCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTotalStakedByCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalFeeDivisorERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalFeeERC20",
    data: BytesLike
  ): Result;

  events: {
    "AuthorityUpdated(address)": EventFragment;
    "Compound(address,uint256)": EventFragment;
    "NewAPR(uint256,address)": EventFragment;
    "NewAuthorizedERC20(address,bool)": EventFragment;
    "NewCompoundFreq(uint256,address)": EventFragment;
    "NewFoundersRewardBoost(uint256,address)": EventFragment;
    "NewFoundersRewardBoostDivisor(uint256,address)": EventFragment;
    "NewHelixERC20(address)": EventFragment;
    "NewKNFTRewardBoost(uint256,address)": EventFragment;
    "NewKNFTRewardBoostDivisor(uint256,address)": EventFragment;
    "NewKonduxERC721Founders(address)": EventFragment;
    "NewKonduxERC721kNFT(address)": EventFragment;
    "NewMinStake(uint256,address)": EventFragment;
    "NewRatio(uint256,address)": EventFragment;
    "NewTreasury(address)": EventFragment;
    "NewWithdrawalFee(uint256,address)": EventFragment;
    "NewWithdrawalFeeDivisor(uint256,address)": EventFragment;
    "Reward(address,uint256)": EventFragment;
    "Stake(uint256,address,address,uint256)": EventFragment;
    "Unstake(address,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
    "WithdrawAll(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Compound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAPR"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAuthorizedERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCompoundFreq"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewFoundersRewardBoost"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewFoundersRewardBoostDivisor"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewHelixERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewKNFTRewardBoost"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewKNFTRewardBoostDivisor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewKonduxERC721Founders"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewKonduxERC721kNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMinStake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewRatio"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTreasury"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewWithdrawalFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewWithdrawalFeeDivisor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawAll"): EventFragment;
}

export interface AuthorityUpdatedEventObject {
  authority: string;
}
export type AuthorityUpdatedEvent = TypedEvent<
  [string],
  AuthorityUpdatedEventObject
>;

export type AuthorityUpdatedEventFilter =
  TypedEventFilter<AuthorityUpdatedEvent>;

export interface CompoundEventObject {
  staker: string;
  amount: BigNumber;
}
export type CompoundEvent = TypedEvent<
  [string, BigNumber],
  CompoundEventObject
>;

export type CompoundEventFilter = TypedEventFilter<CompoundEvent>;

export interface NewAPREventObject {
  amount: BigNumber;
  token: string;
}
export type NewAPREvent = TypedEvent<[BigNumber, string], NewAPREventObject>;

export type NewAPREventFilter = TypedEventFilter<NewAPREvent>;

export interface NewAuthorizedERC20EventObject {
  token: string;
  authorized: boolean;
}
export type NewAuthorizedERC20Event = TypedEvent<
  [string, boolean],
  NewAuthorizedERC20EventObject
>;

export type NewAuthorizedERC20EventFilter =
  TypedEventFilter<NewAuthorizedERC20Event>;

export interface NewCompoundFreqEventObject {
  amount: BigNumber;
  token: string;
}
export type NewCompoundFreqEvent = TypedEvent<
  [BigNumber, string],
  NewCompoundFreqEventObject
>;

export type NewCompoundFreqEventFilter = TypedEventFilter<NewCompoundFreqEvent>;

export interface NewFoundersRewardBoostEventObject {
  amount: BigNumber;
  token: string;
}
export type NewFoundersRewardBoostEvent = TypedEvent<
  [BigNumber, string],
  NewFoundersRewardBoostEventObject
>;

export type NewFoundersRewardBoostEventFilter =
  TypedEventFilter<NewFoundersRewardBoostEvent>;

export interface NewFoundersRewardBoostDivisorEventObject {
  amount: BigNumber;
  token: string;
}
export type NewFoundersRewardBoostDivisorEvent = TypedEvent<
  [BigNumber, string],
  NewFoundersRewardBoostDivisorEventObject
>;

export type NewFoundersRewardBoostDivisorEventFilter =
  TypedEventFilter<NewFoundersRewardBoostDivisorEvent>;

export interface NewHelixERC20EventObject {
  helixERC20: string;
}
export type NewHelixERC20Event = TypedEvent<[string], NewHelixERC20EventObject>;

export type NewHelixERC20EventFilter = TypedEventFilter<NewHelixERC20Event>;

export interface NewKNFTRewardBoostEventObject {
  amount: BigNumber;
  token: string;
}
export type NewKNFTRewardBoostEvent = TypedEvent<
  [BigNumber, string],
  NewKNFTRewardBoostEventObject
>;

export type NewKNFTRewardBoostEventFilter =
  TypedEventFilter<NewKNFTRewardBoostEvent>;

export interface NewKNFTRewardBoostDivisorEventObject {
  amount: BigNumber;
  token: string;
}
export type NewKNFTRewardBoostDivisorEvent = TypedEvent<
  [BigNumber, string],
  NewKNFTRewardBoostDivisorEventObject
>;

export type NewKNFTRewardBoostDivisorEventFilter =
  TypedEventFilter<NewKNFTRewardBoostDivisorEvent>;

export interface NewKonduxERC721FoundersEventObject {
  konduxERC721Founders: string;
}
export type NewKonduxERC721FoundersEvent = TypedEvent<
  [string],
  NewKonduxERC721FoundersEventObject
>;

export type NewKonduxERC721FoundersEventFilter =
  TypedEventFilter<NewKonduxERC721FoundersEvent>;

export interface NewKonduxERC721kNFTEventObject {
  konduxERC721kNFT: string;
}
export type NewKonduxERC721kNFTEvent = TypedEvent<
  [string],
  NewKonduxERC721kNFTEventObject
>;

export type NewKonduxERC721kNFTEventFilter =
  TypedEventFilter<NewKonduxERC721kNFTEvent>;

export interface NewMinStakeEventObject {
  amount: BigNumber;
  token: string;
}
export type NewMinStakeEvent = TypedEvent<
  [BigNumber, string],
  NewMinStakeEventObject
>;

export type NewMinStakeEventFilter = TypedEventFilter<NewMinStakeEvent>;

export interface NewRatioEventObject {
  amount: BigNumber;
  token: string;
}
export type NewRatioEvent = TypedEvent<
  [BigNumber, string],
  NewRatioEventObject
>;

export type NewRatioEventFilter = TypedEventFilter<NewRatioEvent>;

export interface NewTreasuryEventObject {
  treasury: string;
}
export type NewTreasuryEvent = TypedEvent<[string], NewTreasuryEventObject>;

export type NewTreasuryEventFilter = TypedEventFilter<NewTreasuryEvent>;

export interface NewWithdrawalFeeEventObject {
  amount: BigNumber;
  token: string;
}
export type NewWithdrawalFeeEvent = TypedEvent<
  [BigNumber, string],
  NewWithdrawalFeeEventObject
>;

export type NewWithdrawalFeeEventFilter =
  TypedEventFilter<NewWithdrawalFeeEvent>;

export interface NewWithdrawalFeeDivisorEventObject {
  amount: BigNumber;
  token: string;
}
export type NewWithdrawalFeeDivisorEvent = TypedEvent<
  [BigNumber, string],
  NewWithdrawalFeeDivisorEventObject
>;

export type NewWithdrawalFeeDivisorEventFilter =
  TypedEventFilter<NewWithdrawalFeeDivisorEvent>;

export interface RewardEventObject {
  staker: string;
  amount: BigNumber;
}
export type RewardEvent = TypedEvent<[string, BigNumber], RewardEventObject>;

export type RewardEventFilter = TypedEventFilter<RewardEvent>;

export interface StakeEventObject {
  id: BigNumber;
  staker: string;
  token: string;
  amount: BigNumber;
}
export type StakeEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  StakeEventObject
>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface UnstakeEventObject {
  staker: string;
  amount: BigNumber;
}
export type UnstakeEvent = TypedEvent<[string, BigNumber], UnstakeEventObject>;

export type UnstakeEventFilter = TypedEventFilter<UnstakeEvent>;

export interface WithdrawEventObject {
  staker: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawAllEventObject {
  staker: string;
  amount: BigNumber;
}
export type WithdrawAllEvent = TypedEvent<
  [string, BigNumber],
  WithdrawAllEventObject
>;

export type WithdrawAllEventFilter = TypedEventFilter<WithdrawAllEvent>;

export interface Staking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addNewStakingToken(
      _token: PromiseOrValue<string>,
      _apr: PromiseOrValue<BigNumberish>,
      _compoundFreq: PromiseOrValue<BigNumberish>,
      _withdrawalFee: PromiseOrValue<BigNumberish>,
      _withdrawalFeeDivisor: PromiseOrValue<BigNumberish>,
      _foundersRewardBoost: PromiseOrValue<BigNumberish>,
      _foundersRewardBoostDivisor: PromiseOrValue<BigNumberish>,
      _kNFTRewardBoost: PromiseOrValue<BigNumberish>,
      _kNFTRewardBoostDivisor: PromiseOrValue<BigNumberish>,
      _ratio: PromiseOrValue<BigNumberish>,
      _minStake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    aprERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    authority(overrides?: CallOverrides): Promise<[string]>;

    authorizedERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    calculateRewards(
      _staker: PromiseOrValue<string>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewards: BigNumber }>;

    claimRewards(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    compoundFreqERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    compoundRewardsTimer(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { remainingTime: BigNumber }>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      _timelock: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    foundersRewardBoostDivisorERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    foundersRewardBoostERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAPR(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _rewardsPerHour: BigNumber }>;

    getDepositIds(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getDepositInfo(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _stake: BigNumber;
        _unclaimedRewards: BigNumber;
      }
    >;

    getFoundersRewardBoost(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _foundersRewardBoost: BigNumber }>;

    getFoundersRewardBoostDenominator(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _foundersRewardBoostDivisor: BigNumber }>;

    getKnftRewardBoostDenominator(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _kNFTRewardBoostDivisor: BigNumber }>;

    getMinStake(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _minStake: BigNumber }>;

    getRewardsPerHour(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _rewardsPerHour: BigNumber }>;

    getStakedAmount(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _deposited: BigNumber }>;

    getTimeOfLastUpdate(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _timeOfLastUpdate: BigNumber }>;

    getTimelock(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _timelock: BigNumber }>;

    getTimelockCategory(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number] & { _timelockCategory: number }>;

    getTotalRewards(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _totalRewards: BigNumber }>;

    getTotalStaked(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _totalStaked: BigNumber }>;

    getUserTotalRewardsByCoin(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _totalRewards: BigNumber }>;

    getUserTotalStakedByCoin(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _totalStaked: BigNumber }>;

    getWithdrawalFee(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _withdrawalFee: BigNumber }>;

    getWithdrawalFeeDivisor(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _withdrawalFeeDivisor: BigNumber }>;

    getkNFTRewardBoost(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _kNFTRewardBoost: BigNumber }>;

    helixERC20(overrides?: CallOverrides): Promise<[string]>;

    kNFTRewardBoostDivisorERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    kNFTRewardBoostERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    konduxERC721Founders(overrides?: CallOverrides): Promise<[string]>;

    konduxERC721kNFT(overrides?: CallOverrides): Promise<[string]>;

    minStakeERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ratioERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setAPR(
      _apr: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAuthority(
      _newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAuthorizedERC20(
      _token: PromiseOrValue<string>,
      _authorized: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCompoundFreq(
      _compoundFreq: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFoundersRewardBoost(
      _foundersRewardBoost: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFoundersRewardBoostDivisor(
      _foundersRewardBoostDivisor: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setHelixERC20(
      _helix: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKonduxERC721Founders(
      _konduxERC721Founders: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKonduxERC721kNFT(
      _konduxERC721kNFT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinStake(
      _minStake: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRatio(
      _ratio: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWithdrawalFee(
      _withdrawalFee: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWithdrawalFeeDivisor(
      _withdrawalFeeDivisor: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setkNFTRewardBoost(
      _kNFTRewardBoost: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setkNFTRewardBoostDivisor(
      _kNFTRewardBoostDivisor: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeRewards(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalRewarded(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalStaked(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    userDeposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        token: string;
        staker: string;
        deposited: BigNumber;
        redeemed: BigNumber;
        timeOfLastUpdate: BigNumber;
        lastDepositTime: BigNumber;
        unclaimedRewards: BigNumber;
        timelock: BigNumber;
        timelockCategory: number;
      }
    >;

    userDepositsIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userTotalRewardedByCoin(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userTotalStakedByCoin(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAndClaim(
      _amount: PromiseOrValue<BigNumberish>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawalFeeDivisorERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawalFeeERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  addNewStakingToken(
    _token: PromiseOrValue<string>,
    _apr: PromiseOrValue<BigNumberish>,
    _compoundFreq: PromiseOrValue<BigNumberish>,
    _withdrawalFee: PromiseOrValue<BigNumberish>,
    _withdrawalFeeDivisor: PromiseOrValue<BigNumberish>,
    _foundersRewardBoost: PromiseOrValue<BigNumberish>,
    _foundersRewardBoostDivisor: PromiseOrValue<BigNumberish>,
    _kNFTRewardBoost: PromiseOrValue<BigNumberish>,
    _kNFTRewardBoostDivisor: PromiseOrValue<BigNumberish>,
    _ratio: PromiseOrValue<BigNumberish>,
    _minStake: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  aprERC20(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  authority(overrides?: CallOverrides): Promise<string>;

  authorizedERC20(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  calculateRewards(
    _staker: PromiseOrValue<string>,
    _depositId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimRewards(
    _depositId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  compoundFreqERC20(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  compoundRewardsTimer(
    _depositId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deposit(
    _amount: PromiseOrValue<BigNumberish>,
    _timelock: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  foundersRewardBoostDivisorERC20(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  foundersRewardBoostERC20(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAPR(
    _tokenId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDepositIds(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getDepositInfo(
    _depositId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _stake: BigNumber; _unclaimedRewards: BigNumber }
  >;

  getFoundersRewardBoost(
    _tokenId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFoundersRewardBoostDenominator(
    _tokenId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getKnftRewardBoostDenominator(
    _tokenId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinStake(
    _tokenId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardsPerHour(
    _tokenId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakedAmount(
    _depositId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTimeOfLastUpdate(
    _depositId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTimelock(
    _depositId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTimelockCategory(
    _depositId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getTotalRewards(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalStaked(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserTotalRewardsByCoin(
    _user: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserTotalStakedByCoin(
    _user: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWithdrawalFee(
    _tokenId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWithdrawalFeeDivisor(
    _tokenId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getkNFTRewardBoost(
    _tokenId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  helixERC20(overrides?: CallOverrides): Promise<string>;

  kNFTRewardBoostDivisorERC20(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  kNFTRewardBoostERC20(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  konduxERC721Founders(overrides?: CallOverrides): Promise<string>;

  konduxERC721kNFT(overrides?: CallOverrides): Promise<string>;

  minStakeERC20(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ratioERC20(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setAPR(
    _apr: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAuthority(
    _newAuthority: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAuthorizedERC20(
    _token: PromiseOrValue<string>,
    _authorized: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCompoundFreq(
    _compoundFreq: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFoundersRewardBoost(
    _foundersRewardBoost: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFoundersRewardBoostDivisor(
    _foundersRewardBoostDivisor: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setHelixERC20(
    _helix: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKonduxERC721Founders(
    _konduxERC721Founders: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKonduxERC721kNFT(
    _konduxERC721kNFT: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinStake(
    _minStake: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRatio(
    _ratio: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWithdrawalFee(
    _withdrawalFee: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWithdrawalFeeDivisor(
    _withdrawalFeeDivisor: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setkNFTRewardBoost(
    _kNFTRewardBoost: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setkNFTRewardBoostDivisor(
    _kNFTRewardBoostDivisor: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeRewards(
    _depositId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalRewarded(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalStaked(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  treasury(overrides?: CallOverrides): Promise<string>;

  userDeposits(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      token: string;
      staker: string;
      deposited: BigNumber;
      redeemed: BigNumber;
      timeOfLastUpdate: BigNumber;
      lastDepositTime: BigNumber;
      unclaimedRewards: BigNumber;
      timelock: BigNumber;
      timelockCategory: number;
    }
  >;

  userDepositsIds(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userTotalRewardedByCoin(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userTotalStakedByCoin(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    _amount: PromiseOrValue<BigNumberish>,
    _depositId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAndClaim(
    _amount: PromiseOrValue<BigNumberish>,
    _depositId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawalFeeDivisorERC20(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawalFeeERC20(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addNewStakingToken(
      _token: PromiseOrValue<string>,
      _apr: PromiseOrValue<BigNumberish>,
      _compoundFreq: PromiseOrValue<BigNumberish>,
      _withdrawalFee: PromiseOrValue<BigNumberish>,
      _withdrawalFeeDivisor: PromiseOrValue<BigNumberish>,
      _foundersRewardBoost: PromiseOrValue<BigNumberish>,
      _foundersRewardBoostDivisor: PromiseOrValue<BigNumberish>,
      _kNFTRewardBoost: PromiseOrValue<BigNumberish>,
      _kNFTRewardBoostDivisor: PromiseOrValue<BigNumberish>,
      _ratio: PromiseOrValue<BigNumberish>,
      _minStake: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    aprERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<string>;

    authorizedERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    calculateRewards(
      _staker: PromiseOrValue<string>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewards(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    compoundFreqERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compoundRewardsTimer(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      _timelock: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    foundersRewardBoostDivisorERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    foundersRewardBoostERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAPR(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositIds(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getDepositInfo(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _stake: BigNumber;
        _unclaimedRewards: BigNumber;
      }
    >;

    getFoundersRewardBoost(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFoundersRewardBoostDenominator(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKnftRewardBoostDenominator(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinStake(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsPerHour(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakedAmount(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimeOfLastUpdate(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimelock(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimelockCategory(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getTotalRewards(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalStaked(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTotalRewardsByCoin(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTotalStakedByCoin(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawalFee(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawalFeeDivisor(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getkNFTRewardBoost(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    helixERC20(overrides?: CallOverrides): Promise<string>;

    kNFTRewardBoostDivisorERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kNFTRewardBoostERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    konduxERC721Founders(overrides?: CallOverrides): Promise<string>;

    konduxERC721kNFT(overrides?: CallOverrides): Promise<string>;

    minStakeERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ratioERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAPR(
      _apr: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuthority(
      _newAuthority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuthorizedERC20(
      _token: PromiseOrValue<string>,
      _authorized: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCompoundFreq(
      _compoundFreq: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFoundersRewardBoost(
      _foundersRewardBoost: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFoundersRewardBoostDivisor(
      _foundersRewardBoostDivisor: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setHelixERC20(
      _helix: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKonduxERC721Founders(
      _konduxERC721Founders: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKonduxERC721kNFT(
      _konduxERC721kNFT: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinStake(
      _minStake: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRatio(
      _ratio: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawalFee(
      _withdrawalFee: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawalFeeDivisor(
      _withdrawalFeeDivisor: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setkNFTRewardBoost(
      _kNFTRewardBoost: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setkNFTRewardBoostDivisor(
      _kNFTRewardBoostDivisor: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeRewards(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalRewarded(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStaked(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<string>;

    userDeposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        token: string;
        staker: string;
        deposited: BigNumber;
        redeemed: BigNumber;
        timeOfLastUpdate: BigNumber;
        lastDepositTime: BigNumber;
        unclaimedRewards: BigNumber;
        timelock: BigNumber;
        timelockCategory: number;
      }
    >;

    userDepositsIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userTotalRewardedByCoin(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userTotalStakedByCoin(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAndClaim(
      _amount: PromiseOrValue<BigNumberish>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawalFeeDivisorERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawalFeeERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AuthorityUpdated(address)"(authority?: null): AuthorityUpdatedEventFilter;
    AuthorityUpdated(authority?: null): AuthorityUpdatedEventFilter;

    "Compound(address,uint256)"(
      staker?: PromiseOrValue<string> | null,
      amount?: null
    ): CompoundEventFilter;
    Compound(
      staker?: PromiseOrValue<string> | null,
      amount?: null
    ): CompoundEventFilter;

    "NewAPR(uint256,address)"(
      amount?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null
    ): NewAPREventFilter;
    NewAPR(
      amount?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null
    ): NewAPREventFilter;

    "NewAuthorizedERC20(address,bool)"(
      token?: PromiseOrValue<string> | null,
      authorized?: PromiseOrValue<boolean> | null
    ): NewAuthorizedERC20EventFilter;
    NewAuthorizedERC20(
      token?: PromiseOrValue<string> | null,
      authorized?: PromiseOrValue<boolean> | null
    ): NewAuthorizedERC20EventFilter;

    "NewCompoundFreq(uint256,address)"(
      amount?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null
    ): NewCompoundFreqEventFilter;
    NewCompoundFreq(
      amount?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null
    ): NewCompoundFreqEventFilter;

    "NewFoundersRewardBoost(uint256,address)"(
      amount?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null
    ): NewFoundersRewardBoostEventFilter;
    NewFoundersRewardBoost(
      amount?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null
    ): NewFoundersRewardBoostEventFilter;

    "NewFoundersRewardBoostDivisor(uint256,address)"(
      amount?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null
    ): NewFoundersRewardBoostDivisorEventFilter;
    NewFoundersRewardBoostDivisor(
      amount?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null
    ): NewFoundersRewardBoostDivisorEventFilter;

    "NewHelixERC20(address)"(
      helixERC20?: PromiseOrValue<string> | null
    ): NewHelixERC20EventFilter;
    NewHelixERC20(
      helixERC20?: PromiseOrValue<string> | null
    ): NewHelixERC20EventFilter;

    "NewKNFTRewardBoost(uint256,address)"(
      amount?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null
    ): NewKNFTRewardBoostEventFilter;
    NewKNFTRewardBoost(
      amount?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null
    ): NewKNFTRewardBoostEventFilter;

    "NewKNFTRewardBoostDivisor(uint256,address)"(
      amount?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null
    ): NewKNFTRewardBoostDivisorEventFilter;
    NewKNFTRewardBoostDivisor(
      amount?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null
    ): NewKNFTRewardBoostDivisorEventFilter;

    "NewKonduxERC721Founders(address)"(
      konduxERC721Founders?: PromiseOrValue<string> | null
    ): NewKonduxERC721FoundersEventFilter;
    NewKonduxERC721Founders(
      konduxERC721Founders?: PromiseOrValue<string> | null
    ): NewKonduxERC721FoundersEventFilter;

    "NewKonduxERC721kNFT(address)"(
      konduxERC721kNFT?: PromiseOrValue<string> | null
    ): NewKonduxERC721kNFTEventFilter;
    NewKonduxERC721kNFT(
      konduxERC721kNFT?: PromiseOrValue<string> | null
    ): NewKonduxERC721kNFTEventFilter;

    "NewMinStake(uint256,address)"(
      amount?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null
    ): NewMinStakeEventFilter;
    NewMinStake(
      amount?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null
    ): NewMinStakeEventFilter;

    "NewRatio(uint256,address)"(
      amount?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null
    ): NewRatioEventFilter;
    NewRatio(
      amount?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null
    ): NewRatioEventFilter;

    "NewTreasury(address)"(
      treasury?: PromiseOrValue<string> | null
    ): NewTreasuryEventFilter;
    NewTreasury(
      treasury?: PromiseOrValue<string> | null
    ): NewTreasuryEventFilter;

    "NewWithdrawalFee(uint256,address)"(
      amount?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null
    ): NewWithdrawalFeeEventFilter;
    NewWithdrawalFee(
      amount?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null
    ): NewWithdrawalFeeEventFilter;

    "NewWithdrawalFeeDivisor(uint256,address)"(
      amount?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null
    ): NewWithdrawalFeeDivisorEventFilter;
    NewWithdrawalFeeDivisor(
      amount?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null
    ): NewWithdrawalFeeDivisorEventFilter;

    "Reward(address,uint256)"(
      staker?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardEventFilter;
    Reward(
      staker?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardEventFilter;

    "Stake(uint256,address,address,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      staker?: PromiseOrValue<string> | null,
      token?: null,
      amount?: null
    ): StakeEventFilter;
    Stake(
      id?: PromiseOrValue<BigNumberish> | null,
      staker?: PromiseOrValue<string> | null,
      token?: null,
      amount?: null
    ): StakeEventFilter;

    "Unstake(address,uint256)"(
      staker?: PromiseOrValue<string> | null,
      amount?: null
    ): UnstakeEventFilter;
    Unstake(
      staker?: PromiseOrValue<string> | null,
      amount?: null
    ): UnstakeEventFilter;

    "Withdraw(address,uint256)"(
      staker?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      staker?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;

    "WithdrawAll(address,uint256)"(
      staker?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawAllEventFilter;
    WithdrawAll(
      staker?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawAllEventFilter;
  };

  estimateGas: {
    addNewStakingToken(
      _token: PromiseOrValue<string>,
      _apr: PromiseOrValue<BigNumberish>,
      _compoundFreq: PromiseOrValue<BigNumberish>,
      _withdrawalFee: PromiseOrValue<BigNumberish>,
      _withdrawalFeeDivisor: PromiseOrValue<BigNumberish>,
      _foundersRewardBoost: PromiseOrValue<BigNumberish>,
      _foundersRewardBoostDivisor: PromiseOrValue<BigNumberish>,
      _kNFTRewardBoost: PromiseOrValue<BigNumberish>,
      _kNFTRewardBoostDivisor: PromiseOrValue<BigNumberish>,
      _ratio: PromiseOrValue<BigNumberish>,
      _minStake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    aprERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    authorizedERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRewards(
      _staker: PromiseOrValue<string>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewards(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    compoundFreqERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compoundRewardsTimer(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      _timelock: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    foundersRewardBoostDivisorERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    foundersRewardBoostERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAPR(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositIds(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositInfo(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFoundersRewardBoost(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFoundersRewardBoostDenominator(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKnftRewardBoostDenominator(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinStake(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsPerHour(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakedAmount(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimeOfLastUpdate(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimelock(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimelockCategory(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalRewards(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalStaked(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTotalRewardsByCoin(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTotalStakedByCoin(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawalFee(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawalFeeDivisor(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getkNFTRewardBoost(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    helixERC20(overrides?: CallOverrides): Promise<BigNumber>;

    kNFTRewardBoostDivisorERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kNFTRewardBoostERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    konduxERC721Founders(overrides?: CallOverrides): Promise<BigNumber>;

    konduxERC721kNFT(overrides?: CallOverrides): Promise<BigNumber>;

    minStakeERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ratioERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAPR(
      _apr: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAuthority(
      _newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAuthorizedERC20(
      _token: PromiseOrValue<string>,
      _authorized: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCompoundFreq(
      _compoundFreq: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFoundersRewardBoost(
      _foundersRewardBoost: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFoundersRewardBoostDivisor(
      _foundersRewardBoostDivisor: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setHelixERC20(
      _helix: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKonduxERC721Founders(
      _konduxERC721Founders: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKonduxERC721kNFT(
      _konduxERC721kNFT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinStake(
      _minStake: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRatio(
      _ratio: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWithdrawalFee(
      _withdrawalFee: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWithdrawalFeeDivisor(
      _withdrawalFeeDivisor: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setkNFTRewardBoost(
      _kNFTRewardBoost: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setkNFTRewardBoostDivisor(
      _kNFTRewardBoostDivisor: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeRewards(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalRewarded(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStaked(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    userDeposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userDepositsIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userTotalRewardedByCoin(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userTotalStakedByCoin(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAndClaim(
      _amount: PromiseOrValue<BigNumberish>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawalFeeDivisorERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawalFeeERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addNewStakingToken(
      _token: PromiseOrValue<string>,
      _apr: PromiseOrValue<BigNumberish>,
      _compoundFreq: PromiseOrValue<BigNumberish>,
      _withdrawalFee: PromiseOrValue<BigNumberish>,
      _withdrawalFeeDivisor: PromiseOrValue<BigNumberish>,
      _foundersRewardBoost: PromiseOrValue<BigNumberish>,
      _foundersRewardBoostDivisor: PromiseOrValue<BigNumberish>,
      _kNFTRewardBoost: PromiseOrValue<BigNumberish>,
      _kNFTRewardBoostDivisor: PromiseOrValue<BigNumberish>,
      _ratio: PromiseOrValue<BigNumberish>,
      _minStake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    aprERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    authorizedERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRewards(
      _staker: PromiseOrValue<string>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimRewards(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    compoundFreqERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compoundRewardsTimer(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      _timelock: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    foundersRewardBoostDivisorERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    foundersRewardBoostERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAPR(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositIds(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositInfo(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFoundersRewardBoost(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFoundersRewardBoostDenominator(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKnftRewardBoostDenominator(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinStake(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsPerHour(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakedAmount(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimeOfLastUpdate(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimelock(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimelockCategory(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalRewards(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalStaked(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTotalRewardsByCoin(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTotalStakedByCoin(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawalFee(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawalFeeDivisor(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getkNFTRewardBoost(
      _tokenId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    helixERC20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kNFTRewardBoostDivisorERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kNFTRewardBoostERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    konduxERC721Founders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    konduxERC721kNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minStakeERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ratioERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAPR(
      _apr: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAuthority(
      _newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAuthorizedERC20(
      _token: PromiseOrValue<string>,
      _authorized: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCompoundFreq(
      _compoundFreq: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFoundersRewardBoost(
      _foundersRewardBoost: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFoundersRewardBoostDivisor(
      _foundersRewardBoostDivisor: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setHelixERC20(
      _helix: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKonduxERC721Founders(
      _konduxERC721Founders: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKonduxERC721kNFT(
      _konduxERC721kNFT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinStake(
      _minStake: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRatio(
      _ratio: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawalFee(
      _withdrawalFee: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawalFeeDivisor(
      _withdrawalFeeDivisor: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setkNFTRewardBoost(
      _kNFTRewardBoost: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setkNFTRewardBoostDivisor(
      _kNFTRewardBoostDivisor: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeRewards(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalRewarded(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStaked(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userDeposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userDepositsIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userTotalRewardedByCoin(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userTotalStakedByCoin(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAndClaim(
      _amount: PromiseOrValue<BigNumberish>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawalFeeDivisorERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawalFeeERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
