/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface AuthorityInterface extends utils.Interface {
  functions: {
    "authority()": FunctionFragment;
    "governor()": FunctionFragment;
    "guardian()": FunctionFragment;
    "isContract(address)": FunctionFragment;
    "newGovernor()": FunctionFragment;
    "newGuardian()": FunctionFragment;
    "newPolicy()": FunctionFragment;
    "newVault()": FunctionFragment;
    "policy()": FunctionFragment;
    "pullGovernor()": FunctionFragment;
    "pullGuardian()": FunctionFragment;
    "pullPolicy()": FunctionFragment;
    "pullVault()": FunctionFragment;
    "pushGovernor(address,bool)": FunctionFragment;
    "pushGuardian(address,bool)": FunctionFragment;
    "pushPolicy(address,bool)": FunctionFragment;
    "pushRole(address,bytes32)": FunctionFragment;
    "pushVault(address,bool)": FunctionFragment;
    "roles(address)": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "vault()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "authority"
      | "governor"
      | "guardian"
      | "isContract"
      | "newGovernor"
      | "newGuardian"
      | "newPolicy"
      | "newVault"
      | "policy"
      | "pullGovernor"
      | "pullGuardian"
      | "pullPolicy"
      | "pullVault"
      | "pushGovernor"
      | "pushGuardian"
      | "pushPolicy"
      | "pushRole"
      | "pushVault"
      | "roles"
      | "setAuthority"
      | "vault"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "guardian", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "newGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newGuardian",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "newPolicy", values?: undefined): string;
  encodeFunctionData(functionFragment: "newVault", values?: undefined): string;
  encodeFunctionData(functionFragment: "policy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pullGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pullGuardian",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pullPolicy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pullVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pushGovernor",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "pushGuardian",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "pushPolicy",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "pushRole",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "pushVault",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "roles",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "guardian", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isContract", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newPolicy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "policy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pullGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pullGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pullPolicy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pullVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pushGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pushPolicy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pushRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pushVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "AuthorityUpdated(address)": EventFragment;
    "GovernorPulled(address,address)": EventFragment;
    "GovernorPushed(address,address,bool)": EventFragment;
    "GuardianPulled(address,address)": EventFragment;
    "GuardianPushed(address,address,bool)": EventFragment;
    "PolicyPulled(address,address)": EventFragment;
    "PolicyPushed(address,address,bool)": EventFragment;
    "RolePushed(address,bytes32)": EventFragment;
    "VaultPulled(address,address)": EventFragment;
    "VaultPushed(address,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorPulled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorPushed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GuardianPulled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GuardianPushed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PolicyPulled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PolicyPushed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RolePushed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultPulled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultPushed"): EventFragment;
}

export interface AuthorityUpdatedEventObject {
  authority: string;
}
export type AuthorityUpdatedEvent = TypedEvent<
  [string],
  AuthorityUpdatedEventObject
>;

export type AuthorityUpdatedEventFilter =
  TypedEventFilter<AuthorityUpdatedEvent>;

export interface GovernorPulledEventObject {
  from: string;
  to: string;
}
export type GovernorPulledEvent = TypedEvent<
  [string, string],
  GovernorPulledEventObject
>;

export type GovernorPulledEventFilter = TypedEventFilter<GovernorPulledEvent>;

export interface GovernorPushedEventObject {
  from: string;
  to: string;
  _effectiveImmediately: boolean;
}
export type GovernorPushedEvent = TypedEvent<
  [string, string, boolean],
  GovernorPushedEventObject
>;

export type GovernorPushedEventFilter = TypedEventFilter<GovernorPushedEvent>;

export interface GuardianPulledEventObject {
  from: string;
  to: string;
}
export type GuardianPulledEvent = TypedEvent<
  [string, string],
  GuardianPulledEventObject
>;

export type GuardianPulledEventFilter = TypedEventFilter<GuardianPulledEvent>;

export interface GuardianPushedEventObject {
  from: string;
  to: string;
  _effectiveImmediately: boolean;
}
export type GuardianPushedEvent = TypedEvent<
  [string, string, boolean],
  GuardianPushedEventObject
>;

export type GuardianPushedEventFilter = TypedEventFilter<GuardianPushedEvent>;

export interface PolicyPulledEventObject {
  from: string;
  to: string;
}
export type PolicyPulledEvent = TypedEvent<
  [string, string],
  PolicyPulledEventObject
>;

export type PolicyPulledEventFilter = TypedEventFilter<PolicyPulledEvent>;

export interface PolicyPushedEventObject {
  from: string;
  to: string;
  _effectiveImmediately: boolean;
}
export type PolicyPushedEvent = TypedEvent<
  [string, string, boolean],
  PolicyPushedEventObject
>;

export type PolicyPushedEventFilter = TypedEventFilter<PolicyPushedEvent>;

export interface RolePushedEventObject {
  account: string;
  _role: string;
}
export type RolePushedEvent = TypedEvent<
  [string, string],
  RolePushedEventObject
>;

export type RolePushedEventFilter = TypedEventFilter<RolePushedEvent>;

export interface VaultPulledEventObject {
  from: string;
  to: string;
}
export type VaultPulledEvent = TypedEvent<
  [string, string],
  VaultPulledEventObject
>;

export type VaultPulledEventFilter = TypedEventFilter<VaultPulledEvent>;

export interface VaultPushedEventObject {
  from: string;
  to: string;
  _effectiveImmediately: boolean;
}
export type VaultPushedEvent = TypedEvent<
  [string, string, boolean],
  VaultPushedEventObject
>;

export type VaultPushedEventFilter = TypedEventFilter<VaultPushedEvent>;

export interface Authority extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuthorityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authority(overrides?: CallOverrides): Promise<[string]>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    guardian(overrides?: CallOverrides): Promise<[string]>;

    isContract(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    newGovernor(overrides?: CallOverrides): Promise<[string]>;

    newGuardian(overrides?: CallOverrides): Promise<[string]>;

    newPolicy(overrides?: CallOverrides): Promise<[string]>;

    newVault(overrides?: CallOverrides): Promise<[string]>;

    policy(overrides?: CallOverrides): Promise<[string]>;

    pullGovernor(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pullGuardian(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pullPolicy(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pullVault(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pushGovernor(
      _newGovernor: PromiseOrValue<string>,
      _effectiveImmediately: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pushGuardian(
      _newGuardian: PromiseOrValue<string>,
      _effectiveImmediately: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pushPolicy(
      _newPolicy: PromiseOrValue<string>,
      _effectiveImmediately: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pushRole(
      _account: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pushVault(
      _newVault: PromiseOrValue<string>,
      _effectiveImmediately: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setAuthority(
      _newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  authority(overrides?: CallOverrides): Promise<string>;

  governor(overrides?: CallOverrides): Promise<string>;

  guardian(overrides?: CallOverrides): Promise<string>;

  isContract(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  newGovernor(overrides?: CallOverrides): Promise<string>;

  newGuardian(overrides?: CallOverrides): Promise<string>;

  newPolicy(overrides?: CallOverrides): Promise<string>;

  newVault(overrides?: CallOverrides): Promise<string>;

  policy(overrides?: CallOverrides): Promise<string>;

  pullGovernor(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pullGuardian(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pullPolicy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pullVault(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pushGovernor(
    _newGovernor: PromiseOrValue<string>,
    _effectiveImmediately: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pushGuardian(
    _newGuardian: PromiseOrValue<string>,
    _effectiveImmediately: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pushPolicy(
    _newPolicy: PromiseOrValue<string>,
    _effectiveImmediately: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pushRole(
    _account: PromiseOrValue<string>,
    _role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pushVault(
    _newVault: PromiseOrValue<string>,
    _effectiveImmediately: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roles(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  setAuthority(
    _newAuthority: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    authority(overrides?: CallOverrides): Promise<string>;

    governor(overrides?: CallOverrides): Promise<string>;

    guardian(overrides?: CallOverrides): Promise<string>;

    isContract(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    newGovernor(overrides?: CallOverrides): Promise<string>;

    newGuardian(overrides?: CallOverrides): Promise<string>;

    newPolicy(overrides?: CallOverrides): Promise<string>;

    newVault(overrides?: CallOverrides): Promise<string>;

    policy(overrides?: CallOverrides): Promise<string>;

    pullGovernor(overrides?: CallOverrides): Promise<void>;

    pullGuardian(overrides?: CallOverrides): Promise<void>;

    pullPolicy(overrides?: CallOverrides): Promise<void>;

    pullVault(overrides?: CallOverrides): Promise<void>;

    pushGovernor(
      _newGovernor: PromiseOrValue<string>,
      _effectiveImmediately: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    pushGuardian(
      _newGuardian: PromiseOrValue<string>,
      _effectiveImmediately: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    pushPolicy(
      _newPolicy: PromiseOrValue<string>,
      _effectiveImmediately: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    pushRole(
      _account: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    pushVault(
      _newVault: PromiseOrValue<string>,
      _effectiveImmediately: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    roles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    setAuthority(
      _newAuthority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AuthorityUpdated(address)"(authority?: null): AuthorityUpdatedEventFilter;
    AuthorityUpdated(authority?: null): AuthorityUpdatedEventFilter;

    "GovernorPulled(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): GovernorPulledEventFilter;
    GovernorPulled(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): GovernorPulledEventFilter;

    "GovernorPushed(address,address,bool)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      _effectiveImmediately?: null
    ): GovernorPushedEventFilter;
    GovernorPushed(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      _effectiveImmediately?: null
    ): GovernorPushedEventFilter;

    "GuardianPulled(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): GuardianPulledEventFilter;
    GuardianPulled(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): GuardianPulledEventFilter;

    "GuardianPushed(address,address,bool)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      _effectiveImmediately?: null
    ): GuardianPushedEventFilter;
    GuardianPushed(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      _effectiveImmediately?: null
    ): GuardianPushedEventFilter;

    "PolicyPulled(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): PolicyPulledEventFilter;
    PolicyPulled(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): PolicyPulledEventFilter;

    "PolicyPushed(address,address,bool)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      _effectiveImmediately?: null
    ): PolicyPushedEventFilter;
    PolicyPushed(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      _effectiveImmediately?: null
    ): PolicyPushedEventFilter;

    "RolePushed(address,bytes32)"(
      account?: PromiseOrValue<string> | null,
      _role?: null
    ): RolePushedEventFilter;
    RolePushed(
      account?: PromiseOrValue<string> | null,
      _role?: null
    ): RolePushedEventFilter;

    "VaultPulled(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): VaultPulledEventFilter;
    VaultPulled(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): VaultPulledEventFilter;

    "VaultPushed(address,address,bool)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      _effectiveImmediately?: null
    ): VaultPushedEventFilter;
    VaultPushed(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      _effectiveImmediately?: null
    ): VaultPushedEventFilter;
  };

  estimateGas: {
    authority(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<BigNumber>;

    isContract(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    newGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    newPolicy(overrides?: CallOverrides): Promise<BigNumber>;

    newVault(overrides?: CallOverrides): Promise<BigNumber>;

    policy(overrides?: CallOverrides): Promise<BigNumber>;

    pullGovernor(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pullGuardian(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pullPolicy(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pullVault(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pushGovernor(
      _newGovernor: PromiseOrValue<string>,
      _effectiveImmediately: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pushGuardian(
      _newGuardian: PromiseOrValue<string>,
      _effectiveImmediately: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pushPolicy(
      _newPolicy: PromiseOrValue<string>,
      _effectiveImmediately: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pushRole(
      _account: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pushVault(
      _newVault: PromiseOrValue<string>,
      _effectiveImmediately: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAuthority(
      _newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isContract(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newPolicy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    policy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pullGovernor(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pullGuardian(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pullPolicy(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pullVault(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pushGovernor(
      _newGovernor: PromiseOrValue<string>,
      _effectiveImmediately: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pushGuardian(
      _newGuardian: PromiseOrValue<string>,
      _effectiveImmediately: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pushPolicy(
      _newPolicy: PromiseOrValue<string>,
      _effectiveImmediately: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pushRole(
      _account: PromiseOrValue<string>,
      _role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pushVault(
      _newVault: PromiseOrValue<string>,
      _effectiveImmediately: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAuthority(
      _newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
