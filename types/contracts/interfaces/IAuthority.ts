/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IAuthorityInterface extends utils.Interface {
  functions: {
    "governor()": FunctionFragment;
    "guardian()": FunctionFragment;
    "policy()": FunctionFragment;
    "roles(address)": FunctionFragment;
    "vault()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "governor"
      | "guardian"
      | "policy"
      | "roles"
      | "vault"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "guardian", values?: undefined): string;
  encodeFunctionData(functionFragment: "policy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "roles",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "guardian", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "policy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "GovernorPulled(address,address)": EventFragment;
    "GovernorPushed(address,address,bool)": EventFragment;
    "GuardianPulled(address,address)": EventFragment;
    "GuardianPushed(address,address,bool)": EventFragment;
    "PolicyPulled(address,address)": EventFragment;
    "PolicyPushed(address,address,bool)": EventFragment;
    "RolePushed(address,bytes32)": EventFragment;
    "VaultPulled(address,address)": EventFragment;
    "VaultPushed(address,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GovernorPulled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorPushed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GuardianPulled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GuardianPushed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PolicyPulled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PolicyPushed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RolePushed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultPulled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultPushed"): EventFragment;
}

export interface GovernorPulledEventObject {
  from: string;
  to: string;
}
export type GovernorPulledEvent = TypedEvent<
  [string, string],
  GovernorPulledEventObject
>;

export type GovernorPulledEventFilter = TypedEventFilter<GovernorPulledEvent>;

export interface GovernorPushedEventObject {
  from: string;
  to: string;
  _effectiveImmediately: boolean;
}
export type GovernorPushedEvent = TypedEvent<
  [string, string, boolean],
  GovernorPushedEventObject
>;

export type GovernorPushedEventFilter = TypedEventFilter<GovernorPushedEvent>;

export interface GuardianPulledEventObject {
  from: string;
  to: string;
}
export type GuardianPulledEvent = TypedEvent<
  [string, string],
  GuardianPulledEventObject
>;

export type GuardianPulledEventFilter = TypedEventFilter<GuardianPulledEvent>;

export interface GuardianPushedEventObject {
  from: string;
  to: string;
  _effectiveImmediately: boolean;
}
export type GuardianPushedEvent = TypedEvent<
  [string, string, boolean],
  GuardianPushedEventObject
>;

export type GuardianPushedEventFilter = TypedEventFilter<GuardianPushedEvent>;

export interface PolicyPulledEventObject {
  from: string;
  to: string;
}
export type PolicyPulledEvent = TypedEvent<
  [string, string],
  PolicyPulledEventObject
>;

export type PolicyPulledEventFilter = TypedEventFilter<PolicyPulledEvent>;

export interface PolicyPushedEventObject {
  from: string;
  to: string;
  _effectiveImmediately: boolean;
}
export type PolicyPushedEvent = TypedEvent<
  [string, string, boolean],
  PolicyPushedEventObject
>;

export type PolicyPushedEventFilter = TypedEventFilter<PolicyPushedEvent>;

export interface RolePushedEventObject {
  account: string;
  _role: string;
}
export type RolePushedEvent = TypedEvent<
  [string, string],
  RolePushedEventObject
>;

export type RolePushedEventFilter = TypedEventFilter<RolePushedEvent>;

export interface VaultPulledEventObject {
  from: string;
  to: string;
}
export type VaultPulledEvent = TypedEvent<
  [string, string],
  VaultPulledEventObject
>;

export type VaultPulledEventFilter = TypedEventFilter<VaultPulledEvent>;

export interface VaultPushedEventObject {
  from: string;
  to: string;
  _effectiveImmediately: boolean;
}
export type VaultPushedEvent = TypedEvent<
  [string, string, boolean],
  VaultPushedEventObject
>;

export type VaultPushedEventFilter = TypedEventFilter<VaultPushedEvent>;

export interface IAuthority extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAuthorityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    governor(overrides?: CallOverrides): Promise<[string]>;

    guardian(overrides?: CallOverrides): Promise<[string]>;

    policy(overrides?: CallOverrides): Promise<[string]>;

    roles(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  governor(overrides?: CallOverrides): Promise<string>;

  guardian(overrides?: CallOverrides): Promise<string>;

  policy(overrides?: CallOverrides): Promise<string>;

  roles(
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    governor(overrides?: CallOverrides): Promise<string>;

    guardian(overrides?: CallOverrides): Promise<string>;

    policy(overrides?: CallOverrides): Promise<string>;

    roles(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "GovernorPulled(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): GovernorPulledEventFilter;
    GovernorPulled(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): GovernorPulledEventFilter;

    "GovernorPushed(address,address,bool)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      _effectiveImmediately?: null
    ): GovernorPushedEventFilter;
    GovernorPushed(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      _effectiveImmediately?: null
    ): GovernorPushedEventFilter;

    "GuardianPulled(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): GuardianPulledEventFilter;
    GuardianPulled(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): GuardianPulledEventFilter;

    "GuardianPushed(address,address,bool)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      _effectiveImmediately?: null
    ): GuardianPushedEventFilter;
    GuardianPushed(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      _effectiveImmediately?: null
    ): GuardianPushedEventFilter;

    "PolicyPulled(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): PolicyPulledEventFilter;
    PolicyPulled(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): PolicyPulledEventFilter;

    "PolicyPushed(address,address,bool)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      _effectiveImmediately?: null
    ): PolicyPushedEventFilter;
    PolicyPushed(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      _effectiveImmediately?: null
    ): PolicyPushedEventFilter;

    "RolePushed(address,bytes32)"(
      account?: PromiseOrValue<string> | null,
      _role?: null
    ): RolePushedEventFilter;
    RolePushed(
      account?: PromiseOrValue<string> | null,
      _role?: null
    ): RolePushedEventFilter;

    "VaultPulled(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): VaultPulledEventFilter;
    VaultPulled(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): VaultPulledEventFilter;

    "VaultPushed(address,address,bool)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      _effectiveImmediately?: null
    ): VaultPushedEventFilter;
    VaultPushed(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      _effectiveImmediately?: null
    ): VaultPushedEventFilter;
  };

  estimateGas: {
    governor(overrides?: CallOverrides): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<BigNumber>;

    policy(overrides?: CallOverrides): Promise<BigNumber>;

    roles(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    policy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roles(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
