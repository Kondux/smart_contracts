/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IMarketplaceInterface extends utils.Interface {
  functions: {
    "acceptAsk(address[],uint256[])": FunctionFragment;
    "acceptBid(address[],uint256[])": FunctionFragment;
    "cancelAsk(address[],uint256[])": FunctionFragment;
    "cancelBid(address[],uint256[])": FunctionFragment;
    "createAsk(address[],uint256[],uint256[],address[])": FunctionFragment;
    "createBid(address[],uint256[],uint256[])": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptAsk"
      | "acceptBid"
      | "cancelAsk"
      | "cancelBid"
      | "createAsk"
      | "createBid"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptAsk",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptBid",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAsk",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBid",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createAsk",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createBid",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "acceptAsk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "acceptBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelAsk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createAsk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AcceptAsk(address,uint256,uint256,address)": EventFragment;
    "AcceptBid(address,uint256,uint256)": EventFragment;
    "CancelAsk(address,uint256)": EventFragment;
    "CancelBid(address,uint256)": EventFragment;
    "CreateAsk(address,uint256,uint256,address)": EventFragment;
    "CreateBid(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AcceptAsk"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AcceptBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelAsk"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateAsk"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateBid"): EventFragment;
}

export interface AcceptAskEventObject {
  nft: string;
  tokenID: BigNumber;
  price: BigNumber;
  to: string;
}
export type AcceptAskEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  AcceptAskEventObject
>;

export type AcceptAskEventFilter = TypedEventFilter<AcceptAskEvent>;

export interface AcceptBidEventObject {
  nft: string;
  tokenID: BigNumber;
  price: BigNumber;
}
export type AcceptBidEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AcceptBidEventObject
>;

export type AcceptBidEventFilter = TypedEventFilter<AcceptBidEvent>;

export interface CancelAskEventObject {
  nft: string;
  tokenID: BigNumber;
}
export type CancelAskEvent = TypedEvent<
  [string, BigNumber],
  CancelAskEventObject
>;

export type CancelAskEventFilter = TypedEventFilter<CancelAskEvent>;

export interface CancelBidEventObject {
  nft: string;
  tokenID: BigNumber;
}
export type CancelBidEvent = TypedEvent<
  [string, BigNumber],
  CancelBidEventObject
>;

export type CancelBidEventFilter = TypedEventFilter<CancelBidEvent>;

export interface CreateAskEventObject {
  nft: string;
  tokenID: BigNumber;
  price: BigNumber;
  to: string;
}
export type CreateAskEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  CreateAskEventObject
>;

export type CreateAskEventFilter = TypedEventFilter<CreateAskEvent>;

export interface CreateBidEventObject {
  nft: string;
  tokenID: BigNumber;
  price: BigNumber;
}
export type CreateBidEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  CreateBidEventObject
>;

export type CreateBidEventFilter = TypedEventFilter<CreateBidEvent>;

export interface IMarketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      price: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      price: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptAsk(
    nft: PromiseOrValue<string>[],
    tokenID: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptBid(
    nft: PromiseOrValue<string>[],
    tokenID: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelAsk(
    nft: PromiseOrValue<string>[],
    tokenID: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelBid(
    nft: PromiseOrValue<string>[],
    tokenID: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createAsk(
    nft: PromiseOrValue<string>[],
    tokenID: PromiseOrValue<BigNumberish>[],
    price: PromiseOrValue<BigNumberish>[],
    to: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createBid(
    nft: PromiseOrValue<string>[],
    tokenID: PromiseOrValue<BigNumberish>[],
    price: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    acceptBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    createAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      price: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    createBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      price: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AcceptAsk(address,uint256,uint256,address)"(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      to?: PromiseOrValue<string> | null
    ): AcceptAskEventFilter;
    AcceptAsk(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      to?: PromiseOrValue<string> | null
    ): AcceptAskEventFilter;

    "AcceptBid(address,uint256,uint256)"(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      price?: null
    ): AcceptBidEventFilter;
    AcceptBid(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      price?: null
    ): AcceptBidEventFilter;

    "CancelAsk(address,uint256)"(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null
    ): CancelAskEventFilter;
    CancelAsk(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null
    ): CancelAskEventFilter;

    "CancelBid(address,uint256)"(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null
    ): CancelBidEventFilter;
    CancelBid(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null
    ): CancelBidEventFilter;

    "CreateAsk(address,uint256,uint256,address)"(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      to?: PromiseOrValue<string> | null
    ): CreateAskEventFilter;
    CreateAsk(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      to?: PromiseOrValue<string> | null
    ): CreateAskEventFilter;

    "CreateBid(address,uint256,uint256)"(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      price?: null
    ): CreateBidEventFilter;
    CreateBid(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      price?: null
    ): CreateBidEventFilter;
  };

  estimateGas: {
    acceptAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      price: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      price: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      price: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      price: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
