/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface MinterFoundersInterface extends utils.Interface {
  functions: {
    "authority()": FunctionFragment;
    "konduxFounders()": FunctionFragment;
    "pausedOG()": FunctionFragment;
    "pausedPublic()": FunctionFragment;
    "pausedWL1()": FunctionFragment;
    "pausedWL2()": FunctionFragment;
    "pausedWhitelist()": FunctionFragment;
    "price()": FunctionFragment;
    "priceOG()": FunctionFragment;
    "pricePublic()": FunctionFragment;
    "priceWL1()": FunctionFragment;
    "priceWL2()": FunctionFragment;
    "publicMint()": FunctionFragment;
    "root()": FunctionFragment;
    "rootOG()": FunctionFragment;
    "rootWL1()": FunctionFragment;
    "rootWL2()": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "setPausedOG(bool)": FunctionFragment;
    "setPausedPublic(bool)": FunctionFragment;
    "setPausedWL1(bool)": FunctionFragment;
    "setPausedWL2(bool)": FunctionFragment;
    "setPausedWhitelist(bool)": FunctionFragment;
    "setPrice(uint256)": FunctionFragment;
    "setPriceOG(uint256)": FunctionFragment;
    "setPricePublic(uint256)": FunctionFragment;
    "setPriceWL1(uint256)": FunctionFragment;
    "setPriceWL2(uint256)": FunctionFragment;
    "setRoot(bytes32)": FunctionFragment;
    "setRootOG(bytes32)": FunctionFragment;
    "setRootWL1(bytes32)": FunctionFragment;
    "setRootWL2(bytes32)": FunctionFragment;
    "treasury()": FunctionFragment;
    "whitelistMint(bytes32[])": FunctionFragment;
    "whitelistMintOG(bytes32[])": FunctionFragment;
    "whitelistMintWL1(bytes32[])": FunctionFragment;
    "whitelistMintWL2(bytes32[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "authority"
      | "konduxFounders"
      | "pausedOG"
      | "pausedPublic"
      | "pausedWL1"
      | "pausedWL2"
      | "pausedWhitelist"
      | "price"
      | "priceOG"
      | "pricePublic"
      | "priceWL1"
      | "priceWL2"
      | "publicMint"
      | "root"
      | "rootOG"
      | "rootWL1"
      | "rootWL2"
      | "setAuthority"
      | "setPausedOG"
      | "setPausedPublic"
      | "setPausedWL1"
      | "setPausedWL2"
      | "setPausedWhitelist"
      | "setPrice"
      | "setPriceOG"
      | "setPricePublic"
      | "setPriceWL1"
      | "setPriceWL2"
      | "setRoot"
      | "setRootOG"
      | "setRootWL1"
      | "setRootWL2"
      | "treasury"
      | "whitelistMint"
      | "whitelistMintOG"
      | "whitelistMintWL1"
      | "whitelistMintWL2"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "konduxFounders",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pausedOG", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pausedPublic",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pausedWL1", values?: undefined): string;
  encodeFunctionData(functionFragment: "pausedWL2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pausedWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(functionFragment: "priceOG", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pricePublic",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "priceWL1", values?: undefined): string;
  encodeFunctionData(functionFragment: "priceWL2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publicMint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "root", values?: undefined): string;
  encodeFunctionData(functionFragment: "rootOG", values?: undefined): string;
  encodeFunctionData(functionFragment: "rootWL1", values?: undefined): string;
  encodeFunctionData(functionFragment: "rootWL2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPausedOG",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPausedPublic",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPausedWL1",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPausedWL2",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPausedWhitelist",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceOG",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPricePublic",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceWL1",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceWL2",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoot",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRootOG",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRootWL1",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRootWL2",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whitelistMint",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistMintOG",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistMintWL1",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistMintWL2",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;

  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "konduxFounders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pausedOG", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pausedPublic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pausedWL1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pausedWL2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pausedWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceOG", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pricePublic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceWL1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceWL2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "publicMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "root", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rootOG", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rootWL1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rootWL2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPausedOG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPausedPublic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPausedWL1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPausedWL2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPausedWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPriceOG", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPricePublic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceWL1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceWL2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRootOG", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRootWL1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRootWL2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistMintOG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistMintWL1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistMintWL2",
    data: BytesLike
  ): Result;

  events: {
    "AuthorityUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
}

export interface AuthorityUpdatedEventObject {
  authority: string;
}
export type AuthorityUpdatedEvent = TypedEvent<
  [string],
  AuthorityUpdatedEventObject
>;

export type AuthorityUpdatedEventFilter =
  TypedEventFilter<AuthorityUpdatedEvent>;

export interface MinterFounders extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MinterFoundersInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authority(overrides?: CallOverrides): Promise<[string]>;

    konduxFounders(overrides?: CallOverrides): Promise<[string]>;

    pausedOG(overrides?: CallOverrides): Promise<[boolean]>;

    pausedPublic(overrides?: CallOverrides): Promise<[boolean]>;

    pausedWL1(overrides?: CallOverrides): Promise<[boolean]>;

    pausedWL2(overrides?: CallOverrides): Promise<[boolean]>;

    pausedWhitelist(overrides?: CallOverrides): Promise<[boolean]>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceOG(overrides?: CallOverrides): Promise<[BigNumber]>;

    pricePublic(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceWL1(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceWL2(overrides?: CallOverrides): Promise<[BigNumber]>;

    publicMint(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    root(overrides?: CallOverrides): Promise<[string]>;

    rootOG(overrides?: CallOverrides): Promise<[string]>;

    rootWL1(overrides?: CallOverrides): Promise<[string]>;

    rootWL2(overrides?: CallOverrides): Promise<[string]>;

    setAuthority(
      _newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPausedOG(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPausedPublic(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPausedWL1(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPausedWL2(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPausedWhitelist(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceOG(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPricePublic(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceWL1(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceWL2(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRoot(
      _root: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRootOG(
      _rootOG: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRootWL1(
      _rootWL1: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRootWL2(
      _rootWL2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    whitelistMint(
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistMintOG(
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistMintWL1(
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistMintWL2(
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  authority(overrides?: CallOverrides): Promise<string>;

  konduxFounders(overrides?: CallOverrides): Promise<string>;

  pausedOG(overrides?: CallOverrides): Promise<boolean>;

  pausedPublic(overrides?: CallOverrides): Promise<boolean>;

  pausedWL1(overrides?: CallOverrides): Promise<boolean>;

  pausedWL2(overrides?: CallOverrides): Promise<boolean>;

  pausedWhitelist(overrides?: CallOverrides): Promise<boolean>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  priceOG(overrides?: CallOverrides): Promise<BigNumber>;

  pricePublic(overrides?: CallOverrides): Promise<BigNumber>;

  priceWL1(overrides?: CallOverrides): Promise<BigNumber>;

  priceWL2(overrides?: CallOverrides): Promise<BigNumber>;

  publicMint(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  root(overrides?: CallOverrides): Promise<string>;

  rootOG(overrides?: CallOverrides): Promise<string>;

  rootWL1(overrides?: CallOverrides): Promise<string>;

  rootWL2(overrides?: CallOverrides): Promise<string>;

  setAuthority(
    _newAuthority: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPausedOG(
    _paused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPausedPublic(
    _paused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPausedWL1(
    _paused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPausedWL2(
    _paused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPausedWhitelist(
    _paused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPrice(
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceOG(
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPricePublic(
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceWL1(
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceWL2(
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRoot(
    _root: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRootOG(
    _rootOG: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRootWL1(
    _rootWL1: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRootWL2(
    _rootWL2: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  whitelistMint(
    _merkleProof: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistMintOG(
    _merkleProof: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistMintWL1(
    _merkleProof: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistMintWL2(
    _merkleProof: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    authority(overrides?: CallOverrides): Promise<string>;

    konduxFounders(overrides?: CallOverrides): Promise<string>;

    pausedOG(overrides?: CallOverrides): Promise<boolean>;

    pausedPublic(overrides?: CallOverrides): Promise<boolean>;

    pausedWL1(overrides?: CallOverrides): Promise<boolean>;

    pausedWL2(overrides?: CallOverrides): Promise<boolean>;

    pausedWhitelist(overrides?: CallOverrides): Promise<boolean>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    priceOG(overrides?: CallOverrides): Promise<BigNumber>;

    pricePublic(overrides?: CallOverrides): Promise<BigNumber>;

    priceWL1(overrides?: CallOverrides): Promise<BigNumber>;

    priceWL2(overrides?: CallOverrides): Promise<BigNumber>;

    publicMint(overrides?: CallOverrides): Promise<BigNumber>;

    root(overrides?: CallOverrides): Promise<string>;

    rootOG(overrides?: CallOverrides): Promise<string>;

    rootWL1(overrides?: CallOverrides): Promise<string>;

    rootWL2(overrides?: CallOverrides): Promise<string>;

    setAuthority(
      _newAuthority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPausedOG(
      _paused: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPausedPublic(
      _paused: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPausedWL1(
      _paused: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPausedWL2(
      _paused: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPausedWhitelist(
      _paused: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceOG(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPricePublic(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceWL1(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceWL2(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoot(
      _root: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRootOG(
      _rootOG: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRootWL1(
      _rootWL1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRootWL2(
      _rootWL2: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    whitelistMint(
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistMintOG(
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistMintWL1(
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistMintWL2(
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AuthorityUpdated(address)"(authority?: null): AuthorityUpdatedEventFilter;
    AuthorityUpdated(authority?: null): AuthorityUpdatedEventFilter;
  };

  estimateGas: {
    authority(overrides?: CallOverrides): Promise<BigNumber>;

    konduxFounders(overrides?: CallOverrides): Promise<BigNumber>;

    pausedOG(overrides?: CallOverrides): Promise<BigNumber>;

    pausedPublic(overrides?: CallOverrides): Promise<BigNumber>;

    pausedWL1(overrides?: CallOverrides): Promise<BigNumber>;

    pausedWL2(overrides?: CallOverrides): Promise<BigNumber>;

    pausedWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    priceOG(overrides?: CallOverrides): Promise<BigNumber>;

    pricePublic(overrides?: CallOverrides): Promise<BigNumber>;

    priceWL1(overrides?: CallOverrides): Promise<BigNumber>;

    priceWL2(overrides?: CallOverrides): Promise<BigNumber>;

    publicMint(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    root(overrides?: CallOverrides): Promise<BigNumber>;

    rootOG(overrides?: CallOverrides): Promise<BigNumber>;

    rootWL1(overrides?: CallOverrides): Promise<BigNumber>;

    rootWL2(overrides?: CallOverrides): Promise<BigNumber>;

    setAuthority(
      _newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPausedOG(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPausedPublic(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPausedWL1(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPausedWL2(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPausedWhitelist(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceOG(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPricePublic(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceWL1(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceWL2(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRoot(
      _root: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRootOG(
      _rootOG: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRootWL1(
      _rootWL1: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRootWL2(
      _rootWL2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistMint(
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistMintOG(
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistMintWL1(
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistMintWL2(
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    konduxFounders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pausedOG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pausedPublic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pausedWL1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pausedWL2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pausedWhitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceOG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricePublic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceWL1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceWL2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicMint(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    root(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rootOG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rootWL1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rootWL2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAuthority(
      _newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPausedOG(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPausedPublic(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPausedWL1(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPausedWL2(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPausedWhitelist(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceOG(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPricePublic(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceWL1(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceWL2(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRoot(
      _root: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRootOG(
      _rootOG: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRootWL1(
      _rootWL1: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRootWL2(
      _rootWL2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistMint(
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistMintOG(
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistMintWL1(
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistMintWL2(
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
